{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "LS_DS_242_Validate_classification_problems.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chadeowen/DS-Unit-2-Sprint-4-Model-Validation/blob/master/module-2-validate-classification-problems/assignment%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "KMI2k-oBsS08",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "_Lambda School Data Science — Model Validation_ \n",
        "\n",
        "# Validate classification problems\n",
        "\n",
        "Objectives\n",
        "- Imbalanced Classes\n",
        "- Confusion Matrix\n",
        "- ROC AUC\n"
      ]
    },
    {
      "metadata": {
        "id": "SUZCkblZYN60",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Reading\n",
        "- [Simple guide to confusion matrix terminology](https://www.dataschool.io/simple-guide-to-confusion-matrix-terminology/)\n",
        "- [Precision and Recall](https://en.wikipedia.org/wiki/Precision_and_recall)"
      ]
    },
    {
      "metadata": {
        "id": "rU7RuVcjWdcp",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Preliminary"
      ]
    },
    {
      "metadata": {
        "id": "jes2WnwV072n",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We'll use [mlxtend](http://rasbt.github.io/mlxtend/) and [yellowbrick](http://www.scikit-yb.org/en/latest/) for visualizations. These libraries are already installed on Google Colab. But if you are running locally with Anaconda Python, you'll probably need to install them:\n",
        "\n",
        "```\n",
        "conda install -c conda-forge mlxtend \n",
        "conda install -c districtdatalabs yellowbrick\n",
        "```"
      ]
    },
    {
      "metadata": {
        "id": "nQYGb3HgEp8b",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We'll reuse the `train_validation_test_split` function from yesterday's lesson."
      ]
    },
    {
      "metadata": {
        "id": "PMTjC3vQ7ZNV",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def train_validation_test_split(\n",
        "    X, y, train_size=0.8, val_size=0.1, test_size=0.1, \n",
        "    random_state=None, shuffle=True):\n",
        "        \n",
        "    assert train_size + val_size + test_size == 1\n",
        "    \n",
        "    X_train_val, X_test, y_train_val, y_test = train_test_split(\n",
        "        X, y, test_size=test_size, random_state=random_state, shuffle=shuffle)\n",
        "    \n",
        "    X_train, X_val, y_train, y_val = train_test_split(\n",
        "        X_train_val, y_train_val, test_size=val_size/(train_size+val_size), \n",
        "        random_state=random_state, shuffle=shuffle)\n",
        "    \n",
        "    return X_train, X_val, X_test, y_train, y_val, y_test"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "OWLBlu5K5kJR",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Fun demo!\n",
        "\n",
        "The next code cell does five things:\n",
        "\n",
        "#### 1. Generate data\n",
        "\n",
        "We use scikit-learn's [make_classification](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_classification.html) function to generate fake data for a binary classification problem, based on several parameters, including:\n",
        "- Number of samples\n",
        "- Weights, meaning \"the proportions of samples assigned to each class.\"\n",
        "- Class separation: \"Larger values spread out the clusters/classes and make the classification task easier.\"\n",
        "\n",
        "(We are generating fake data so it is easy to visualize.)\n",
        "\n",
        "#### 2. Split data\n",
        "\n",
        "We split the data three ways, into train, validation, and test sets. (For this toy example, it's not really necessary to do a three-way split. A two-way split, or even no split, would be ok. But I'm trying to demonstrate good habits, even in toy examples, to avoid confusion.)\n",
        "\n",
        "#### 3. Fit model\n",
        "\n",
        "We use scikit-learn to fit a [Logistic Regression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html) on the training data.\n",
        "\n",
        "We use this model parameter:\n",
        "\n",
        "> **class_weight : _dict or ‘balanced’, default: None_**\n",
        "\n",
        "> Weights associated with classes in the form `{class_label: weight}`. If not given, all classes are supposed to have weight one.\n",
        "\n",
        "> The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as `n_samples / (n_classes * np.bincount(y))`.\n",
        "\n",
        "\n",
        "#### 4. Evaluate model\n",
        "\n",
        "We use our Logistic Regression model, which was fit on the training data, to generate predictions for the validation data.\n",
        "\n",
        "Then we print [scikit-learn's Classification Report](https://scikit-learn.org/stable/modules/model_evaluation.html#classification-report), with many metrics, and also the accuracy score. We are comparing the correct labels to the Logistic Regression's predicted labels, for the validation set. \n",
        "\n",
        "#### 5. Visualize decision function\n",
        "\n",
        "Based on these examples\n",
        "- https://imbalanced-learn.readthedocs.io/en/stable/auto_examples/combine/plot_comparison_combine.html\n",
        "- http://rasbt.github.io/mlxtend/user_guide/plotting/plot_decision_regions/#example-1-decision-regions-in-2d"
      ]
    },
    {
      "metadata": {
        "id": "TcpoWCUq5xNV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 544
        },
        "outputId": "2a11f565-3bbd-4d72-bf82-15d68ebd6def"
      },
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from mlxtend.plotting import plot_decision_regions\n",
        "\n",
        "\n",
        "#1. Generate data\n",
        "\n",
        "# Try re-running the cell with different values for these parameters\n",
        "n_samples = 1000\n",
        "weights = (0.50, 0.50)\n",
        "class_sep = 0.8\n",
        "\n",
        "X, y = make_classification(n_samples=n_samples, n_features=2, n_informative=2, \n",
        "                           n_redundant=0, n_repeated=0, n_classes=2, \n",
        "                           n_clusters_per_class=1, weights=weights, \n",
        "                           class_sep=class_sep, random_state=0)\n",
        "\n",
        "\n",
        "# 2. Split data\n",
        "\n",
        "# Uses our custom train_validation_test_split function\n",
        "X_train, X_val, X_test, y_train, y_val, y_test = train_validation_test_split(\n",
        "    X, y, train_size=0.8, val_size=0.1, test_size=0.1, random_state=1)\n",
        "\n",
        "\n",
        "# 3. Fit model\n",
        "\n",
        "# Try re-running the cell with different values for this parameter\n",
        "class_weight = None\n",
        "\n",
        "model = LogisticRegression(solver='lbfgs', class_weight=class_weight)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "# 4. Evaluate model\n",
        "\n",
        "y_pred = model.predict(X_val)\n",
        "print(classification_report(y_val, y_pred))\n",
        "print('accuracy', accuracy_score(y_val, y_pred))\n",
        "\n",
        "\n",
        "# 5. Visualize decision regions\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plot_decision_regions(X_val, y_val, model, legend=0);"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.92      0.94        48\n",
            "           1       0.93      0.96      0.94        52\n",
            "\n",
            "   micro avg       0.94      0.94      0.94       100\n",
            "   macro avg       0.94      0.94      0.94       100\n",
            "weighted avg       0.94      0.94      0.94       100\n",
            "\n",
            "accuracy 0.94\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "zrllN3yECsEN",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Try re-running the cell above with different values for these four parameters:\n",
        "- `n_samples`\n",
        "- `weights`\n",
        "- `class_sep`\n",
        "- `class_balance`\n",
        "\n",
        "For example, with a 50% / 50% class distribution:\n",
        "```\n",
        "n_samples = 1000\n",
        "weights = (0.50, 0.50)\n",
        "class_sep = 0.8\n",
        "class_balance = None\n",
        "```\n",
        "\n",
        "With a 95% / 5% class distribution:\n",
        "```\n",
        "n_samples = 1000\n",
        "weights = (0.95, 0.05)\n",
        "class_sep = 0.8\n",
        "class_balance = None\n",
        "```\n",
        "\n",
        "With the same 95% / 5% class distribution, but changing the Logistic Regression's `class_balance` parameter to `'balanced'` (instead of its default `None`)\n",
        "```\n",
        "n_samples = 1000\n",
        "weights = (0.95, 0.05)\n",
        "class_sep = 0.8\n",
        "class_balance = 'balanced'\n",
        "```\n",
        "\n",
        "With the same 95% / 5% class distribution, but with different values for `class_balance`:\n",
        "- `{0: 1, 1: 1}` _(equivalent to `None`)_\n",
        "- `{1: 1, 1: 2}`\n",
        "- `{1: 1, 1: 10}` _(roughly equivalent to `'balanced'` for this dataset)_\n",
        "- `{1: 1, 1: 100}`\n",
        "- `{1: 1, 1: 10000}`\n",
        "\n",
        "How do the evaluation metrics and decision region plots change?"
      ]
    },
    {
      "metadata": {
        "id": "5-3MS-jANssN",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## What you can do about imbalanced classes"
      ]
    },
    {
      "metadata": {
        "id": "2KwgStd-yUUr",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "[Learning from Imbalanced Classes](https://www.svds.com/tbt-learning-imbalanced-classes/) gives \"a rough outline of useful approaches\" : \n",
        "\n",
        "- Do nothing. Sometimes you get lucky and nothing needs to be done. You can train on the so-called natural (or stratified) distribution and sometimes it works without need for modification.\n",
        "- Balance the training set in some way:\n",
        "  - Oversample the minority class.\n",
        "  - Undersample the majority class.\n",
        "  - Synthesize new minority classes.\n",
        "- Throw away minority examples and switch to an anomaly detection framework.\n",
        "- At the algorithm level, or after it:\n",
        "  - Adjust the class weight (misclassification costs).\n",
        "  - Adjust the decision threshold.\n",
        "  - Modify an existing algorithm to be more sensitive to rare classes.\n",
        "- Construct an entirely new algorithm to perform well on imbalanced data.\n"
      ]
    },
    {
      "metadata": {
        "id": "iO7kOZ2HN0EA",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We demonstrated just one of these options: many scikit-learn classifiers have a `class_balance` parameter, which we can use to \"adjust the class weight (misclassification costs).\"\n",
        "\n",
        "The [imbalance-learn](https://github.com/scikit-learn-contrib/imbalanced-learn) library can be used to \"oversample the minority class, undersample the majority class, or synthesize new minority classes.\"\n",
        "\n",
        "You can see how to \"adjust the decision threshold\" in a great blog post, [Visualizing Machine Learning Thresholds to Make Better Business Decisions](https://blog.insightdatascience.com/visualizing-machine-learning-thresholds-to-make-better-business-decisions-4ab07f823415)."
      ]
    },
    {
      "metadata": {
        "id": "Xhh5TiW_X1_Q",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Bank Marketing — getting started\n",
        "\n",
        "https://archive.ics.uci.edu/ml/datasets/Bank+Marketing\n",
        "\n",
        "The data is related with direct marketing campaigns of a Portuguese banking institution. The marketing campaigns were based on phone calls. Often, more than one contact to the same client was required, in order to access if the product (bank term deposit) would be ('yes') or not ('no') subscribed. \n",
        "\n",
        "bank-additional-full.csv with all examples (41188) and 20 inputs, **ordered by date (from May 2008 to November 2010)**"
      ]
    },
    {
      "metadata": {
        "id": "n18wVnuxY-xl",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Download data"
      ]
    },
    {
      "metadata": {
        "id": "S-oHbkK1X1h2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "47389a60-5a5d-46a8-b038-82db2dba284e"
      },
      "cell_type": "code",
      "source": [
        "!wget https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2019-01-29 22:41:45--  https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip\n",
            "Resolving archive.ics.uci.edu (archive.ics.uci.edu)... 128.195.10.249\n",
            "Connecting to archive.ics.uci.edu (archive.ics.uci.edu)|128.195.10.249|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 444572 (434K) [application/zip]\n",
            "Saving to: ‘bank-additional.zip’\n",
            "\n",
            "bank-additional.zip 100%[===================>] 434.15K  1.21MB/s    in 0.3s    \n",
            "\n",
            "2019-01-29 22:41:50 (1.21 MB/s) - ‘bank-additional.zip’ saved [444572/444572]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "1INLmiipZA-y",
        "colab_type": "code",
        "cellView": "both",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "8cfd123e-5090-4996-fc76-42dfe7f0f2a6"
      },
      "cell_type": "code",
      "source": [
        "!unzip bank-additional.zip"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Archive:  bank-additional.zip\n",
            "   creating: bank-additional/\n",
            "  inflating: bank-additional/.DS_Store  \n",
            "   creating: __MACOSX/\n",
            "   creating: __MACOSX/bank-additional/\n",
            "  inflating: __MACOSX/bank-additional/._.DS_Store  \n",
            "  inflating: bank-additional/.Rhistory  \n",
            "  inflating: bank-additional/bank-additional-full.csv  \n",
            "  inflating: bank-additional/bank-additional-names.txt  \n",
            "  inflating: bank-additional/bank-additional.csv  \n",
            "  inflating: __MACOSX/._bank-additional  \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "HwWCY5XrZCWk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "4f807192-6055-4d50-b5f7-6b7238581d2b"
      },
      "cell_type": "code",
      "source": [
        "%cd bank-additional"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/bank-additional\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "Zf49DcHTZPdE",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Load data, assign to X and y"
      ]
    },
    {
      "metadata": {
        "id": "OwhVgENcZEwo",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "bank = pd.read_csv('bank-additional-full.csv', sep=';')\n",
        "\n",
        "X = bank.drop(columns='y')\n",
        "y = bank['y'] == 'yes'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "lq1it0dnZlX3",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "### Split data"
      ]
    },
    {
      "metadata": {
        "id": "P-FgY4pIaEXo",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We want to do \"model selection (hyperparameter optimization) and performance estimation\" so we'll choose a validation method from the diagram's green box.\n",
        "\n",
        "There is no one \"right\" choice here, but I'll choose \"3-way holdout method (train/validation/test split).\"\n",
        "  \n",
        "<img src=\"https://sebastianraschka.com/images/blog/2018/model-evaluation-selection-part4/model-eval-conclusions.jpg\" width=\"600\">\n",
        "\n",
        "Source: https://sebastianraschka.com/blog/2018/model-evaluation-selection-part4.html"
      ]
    },
    {
      "metadata": {
        "id": "V74i3GDcZnkm",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "There's no one \"right\" choice here, but I'll choose to split by time, not with a random shuffle, based on this advice by [Rachel Thomas](\n",
        "https://www.fast.ai/2017/11/13/validation-sets/):\n",
        "> If your data is a time series, choosing a random subset of the data will be both too easy (you can look at the data both before and after the dates your are trying to predict) and not representative of most business use cases (where you are using historical data to build a model for use in the future).\n",
        "\n",
        "[According to UCI](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing), this data is \"ordered by date (from May 2008 to November 2010)\" so if I don't shuffle it when splitting, then it will be split by time."
      ]
    },
    {
      "metadata": {
        "id": "-xnw-vfOamHH",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "X_train, X_val, X_test, y_train, y_val, y_test = train_validation_test_split(\n",
        "    X, y, shuffle=False)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "12dWJxXabDxt",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "## Bank Marketing — live coding!"
      ]
    },
    {
      "metadata": {
        "id": "P_XjBTW5SBwZ",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# ASSIGNMENT options\n",
        "\n",
        "Replicate code from the lesson or other examples. [Do it \"the hard way\" or with the \"Benjamin Franklin method.\"](https://docs.google.com/document/d/1ubOw9B3Hfip27hF2ZFnW3a3z9xAgrUDRReOEo-FHCVs/edit)\n",
        "\n",
        "Work with one of these datasets\n",
        "- [Bank Marketing](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing)\n",
        "- [Synthetic Financial Dataset For Fraud Detection](https://www.kaggle.com/ntnu-testimon/paysim1)\n",
        "- Any imbalanced binary classification dataset\n",
        "\n",
        "Continue improving your model. Measure validation performance with a variety of classification metrics, which could include:\n",
        "- Accuracy\n",
        "- Precision\n",
        "- Recall\n",
        "- F1\n",
        "- ROC AUC\n",
        "\n",
        "Try one of the other options mentioned for imbalanced classes\n",
        "- The [imbalance-learn](https://github.com/scikit-learn-contrib/imbalanced-learn) library can be used to \"oversample the minority class, undersample the majority class, or synthesize new minority classes.\"\n",
        "- You can see how to \"adjust the decision threshold\" in a great blog post, [Visualizing Machine Learning Thresholds to Make Better Business Decisions](https://blog.insightdatascience.com/visualizing-machine-learning-thresholds-to-make-better-business-decisions-4ab07f823415)."
      ]
    },
    {
      "metadata": {
        "id": "HVlXcinHxzGS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "11f6ec91-b5f4-47c4-a07b-6197b3e46acf"
      },
      "cell_type": "code",
      "source": [
        "!wget https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2019-01-29 22:45:14--  https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip\n",
            "Resolving archive.ics.uci.edu (archive.ics.uci.edu)... 128.195.10.249\n",
            "Connecting to archive.ics.uci.edu (archive.ics.uci.edu)|128.195.10.249|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 444572 (434K) [application/zip]\n",
            "Saving to: ‘bank-additional.zip’\n",
            "\n",
            "bank-additional.zip 100%[===================>] 434.15K  1.14MB/s    in 0.4s    \n",
            "\n",
            "2019-01-29 22:45:15 (1.14 MB/s) - ‘bank-additional.zip’ saved [444572/444572]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "psuAF5YfyIrm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "2380f64c-7c79-444b-c128-02c59e9d786f"
      },
      "cell_type": "code",
      "source": [
        "!unzip bank-additional.zip"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Archive:  bank-additional.zip\n",
            "   creating: bank-additional/\n",
            "  inflating: bank-additional/.DS_Store  \n",
            "   creating: __MACOSX/\n",
            "   creating: __MACOSX/bank-additional/\n",
            "  inflating: __MACOSX/bank-additional/._.DS_Store  \n",
            "  inflating: bank-additional/.Rhistory  \n",
            "  inflating: bank-additional/bank-additional-full.csv  \n",
            "  inflating: bank-additional/bank-additional-names.txt  \n",
            "  inflating: bank-additional/bank-additional.csv  \n",
            "  inflating: __MACOSX/._bank-additional  \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "0qI3Jxo5yLYO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "c86f3d08-0fa6-4a2b-fed2-25b6f6013894"
      },
      "cell_type": "code",
      "source": [
        "%cd bank-additional"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/bank-additional/bank-additional\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "YaZ0ZM7ayNjW",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "bank = pd.read_csv('bank-additional-full.csv', sep=';')\n",
        "\n",
        "X = bank.drop(columns='y')\n",
        "y = bank['y'] == 'yes'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "lWqhI2e0yQdp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "outputId": "628f0c11-ba1e-43ff-cb17-ba541f66bd7b"
      },
      "cell_type": "code",
      "source": [
        "pd.set_option('display.max_columns', 500)\n",
        "bank.head()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>month</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>emp.var.rate</th>\n",
              "      <th>cons.price.idx</th>\n",
              "      <th>cons.conf.idx</th>\n",
              "      <th>euribor3m</th>\n",
              "      <th>nr.employed</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>56</td>\n",
              "      <td>housemaid</td>\n",
              "      <td>married</td>\n",
              "      <td>basic.4y</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>261</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>57</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>149</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>37</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>226</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>40</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>basic.6y</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>151</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>56</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>307</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.857</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   age        job  marital    education  default housing loan    contact  \\\n",
              "0   56  housemaid  married     basic.4y       no      no   no  telephone   \n",
              "1   57   services  married  high.school  unknown      no   no  telephone   \n",
              "2   37   services  married  high.school       no     yes   no  telephone   \n",
              "3   40     admin.  married     basic.6y       no      no   no  telephone   \n",
              "4   56   services  married  high.school       no      no  yes  telephone   \n",
              "\n",
              "  month day_of_week  duration  campaign  pdays  previous     poutcome  \\\n",
              "0   may         mon       261         1    999         0  nonexistent   \n",
              "1   may         mon       149         1    999         0  nonexistent   \n",
              "2   may         mon       226         1    999         0  nonexistent   \n",
              "3   may         mon       151         1    999         0  nonexistent   \n",
              "4   may         mon       307         1    999         0  nonexistent   \n",
              "\n",
              "   emp.var.rate  cons.price.idx  cons.conf.idx  euribor3m  nr.employed   y  \n",
              "0           1.1          93.994          -36.4      4.857       5191.0  no  \n",
              "1           1.1          93.994          -36.4      4.857       5191.0  no  \n",
              "2           1.1          93.994          -36.4      4.857       5191.0  no  \n",
              "3           1.1          93.994          -36.4      4.857       5191.0  no  \n",
              "4           1.1          93.994          -36.4      4.857       5191.0  no  "
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "metadata": {
        "id": "_QCyVYX4ylxJ",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# you could train test split twice, but Ryan made this function\n",
        "# this function shuffles by default\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def train_validation_test_split(\n",
        "    X, y, train_size=0.8, val_size=0.1, test_size=0.1, \n",
        "    random_state=None, shuffle=True):\n",
        "        \n",
        "    assert train_size + val_size + test_size == 1\n",
        "    \n",
        "    X_train_val, X_test, y_train_val, y_test = train_test_split(\n",
        "        X, y, test_size=test_size, random_state=random_state, shuffle=shuffle)\n",
        "    \n",
        "    X_train, X_val, y_train, y_val = train_test_split(\n",
        "        X_train_val, y_train_val, test_size=val_size/(train_size+val_size), \n",
        "        random_state=random_state, shuffle=shuffle)\n",
        "    \n",
        "    return X_train, X_val, X_test, y_train, y_val, y_test"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "lGy9JzIEyR0u",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# data is ordered by date, must shuffle\n",
        "\n",
        "X_train, X_val, X_test, y_train, y_val, y_test = train_validation_test_split(\n",
        "    X, y, shuffle=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "CqbYdihX0-Xq",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "majority_class = y_train.mode()[0]\n",
        "y_pred = np.full(shape=y_val.shape, fill_value=majority_class)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "bvMG7VUV1Cb0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d4eb2122-3ea9-4f01-ecf7-dcbdc6cc3135"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "accuracy_score(y_val, y_pred) \n",
        "\n",
        "# accuracy given .8 train, .1 val, .1 test"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8895362952172857"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "metadata": {
        "id": "JvA4ECSU1IDr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "d240b155-9a40-4205-a923-f30fecad2492"
      },
      "cell_type": "code",
      "source": [
        "# probably the same as value counts\n",
        "\n",
        "y_val.value_counts(normalize=True)\n",
        "\n",
        "# yep"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    0.889536\n",
              "True     0.110464\n",
              "Name: y, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "metadata": {
        "id": "HTtmWOJc1kg0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "41df4d74-5b42-4e0e-d3e1-66014160bc49"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import roc_auc_score\n",
        "roc_auc_score(y_val, y_pred)\n",
        "\n",
        "# AUC is 0.5 = model has no discrimination \n",
        "# capacity to distinguish between positive class and negative class"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "metadata": {
        "id": "b-Efp0zg1q_G",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "outputId": "b3a92254-db2f-413d-e4a4-5ad8bf15fcc7"
      },
      "cell_type": "code",
      "source": [
        "print(classification_report(y_val, y_pred))"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "       False       0.89      1.00      0.94      3664\n",
            "        True       0.00      0.00      0.00       455\n",
            "\n",
            "   micro avg       0.89      0.89      0.89      4119\n",
            "   macro avg       0.44      0.50      0.47      4119\n",
            "weighted avg       0.79      0.89      0.84      4119\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples.\n",
            "  'precision', 'predicted', average, warn_for)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "Beigioj316MZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 275
        },
        "outputId": "047e3cd5-f22d-4ed4-e566-3c1c581840ac"
      },
      "cell_type": "code",
      "source": [
        "!pip install category_encoders"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting category_encoders\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f7/d3/82a4b85a87ece114f6d0139d643580c726efa45fa4db3b81aed38c0156c5/category_encoders-1.3.0-py2.py3-none-any.whl (61kB)\n",
            "\r\u001b[K    16% |█████▍                          | 10kB 18.9MB/s eta 0:00:01\r\u001b[K    33% |██████████▊                     | 20kB 3.4MB/s eta 0:00:01\r\u001b[K    50% |████████████████                | 30kB 4.8MB/s eta 0:00:01\r\u001b[K    66% |█████████████████████▍          | 40kB 3.1MB/s eta 0:00:01\r\u001b[K    83% |██████████████████████████▊     | 51kB 3.8MB/s eta 0:00:01\r\u001b[K    100% |████████████████████████████████| 61kB 4.0MB/s \n",
            "\u001b[?25hRequirement already satisfied: patsy>=0.4.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (0.5.1)\n",
            "Requirement already satisfied: numpy>=1.11.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (1.14.6)\n",
            "Requirement already satisfied: statsmodels>=0.6.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (0.8.0)\n",
            "Requirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (1.1.0)\n",
            "Requirement already satisfied: pandas>=0.20.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (0.22.0)\n",
            "Requirement already satisfied: scikit-learn>=0.17.1 in /usr/local/lib/python3.6/dist-packages (from category_encoders) (0.20.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from patsy>=0.4.1->category_encoders) (1.11.0)\n",
            "Requirement already satisfied: pytz>=2011k in /usr/local/lib/python3.6/dist-packages (from pandas>=0.20.1->category_encoders) (2018.9)\n",
            "Requirement already satisfied: python-dateutil>=2 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.20.1->category_encoders) (2.5.3)\n",
            "Installing collected packages: category-encoders\n",
            "Successfully installed category-encoders-1.3.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "dD_bQ6Hp2AXH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        },
        "outputId": "2b452167-62d5-4c75-f856-2144b2639fb2"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "import category_encoders as ce\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "pipeline = make_pipeline(\n",
        "    ce.OneHotEncoder(use_cat_names=True),\n",
        "    StandardScaler(),\n",
        "    LogisticRegression(solver='lbfgs')\n",
        ")\n",
        "\n",
        "pipeline.fit(X_train, y_train)\n",
        "y_pred = pipeline.predict(X_val)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/data.py:625: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by StandardScaler.\n",
            "  return self.partial_fit(X, y)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/base.py:465: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by StandardScaler.\n",
            "  return self.fit(X, y, **fit_params).transform(X)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/pipeline.py:331: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by StandardScaler.\n",
            "  Xt = transform.transform(Xt)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "Qq5KxhG12GCI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "71a71185-4deb-4277-d692-41f788842724"
      },
      "cell_type": "code",
      "source": [
        "accuracy_score(y_val, y_pred) \n",
        "\n",
        "# after we one-hot-encode categorical variables,\n",
        "# scale all X variables\n",
        "# and apply logistic regression\n",
        "# slightly better accuracy, but only 1 percent"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9036173828599174"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "metadata": {
        "id": "om8zzC1c2JK8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "41172a20-bb1b-4c81-f665-bd2df998c460"
      },
      "cell_type": "code",
      "source": [
        "roc_auc_score(y_val, y_pred) \n",
        "\n",
        "# area under curve (AUC) is noticeably better\n",
        "\n",
        "# interpretation: there is a 67% chance that the model will be able\n",
        "# to successfully distinguish between positive and negative class"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.674416658668842"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "metadata": {
        "id": "aTYXeMpD2qkj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "f7ee2547-9cfb-4570-c7d0-d43a0b8f4b3f"
      },
      "cell_type": "code",
      "source": [
        "print(classification_report(y_val, y_pred))"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "       False       0.93      0.97      0.95      3664\n",
            "        True       0.60      0.38      0.47       455\n",
            "\n",
            "   micro avg       0.90      0.90      0.90      4119\n",
            "   macro avg       0.76      0.67      0.71      4119\n",
            "weighted avg       0.89      0.90      0.89      4119\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "65SuMxBN29E8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "3f1e119a-3f6a-492f-8f87-e67458b71734"
      },
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "confusion_matrix(y_val, y_pred)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[3549,  115],\n",
              "       [ 282,  173]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "metadata": {
        "id": "0-XYTnrt2_OA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 277
        },
        "outputId": "fafc34cd-e37e-4d24-e882-32731de66b5a"
      },
      "cell_type": "code",
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "def confusion_viz(y_true, y_pred):\n",
        "  matrix = confusion_matrix(y_true, y_pred)\n",
        "  return sns.heatmap(matrix, annot=True, fmt=',', linewidths=1,\n",
        "                    linecolor='grey', square=True, xticklabels=['Predicted\\nNO', 'Predicted\\nYES'],\n",
        "                    yticklabels=['Actual\\nNO','Actual\\nYES'])\n",
        "\n",
        "confusion_viz(y_val, y_pred);"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "-w5jwaVH3nq_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1694
        },
        "outputId": "6dc8fdc3-5e77-42bd-8fb9-34665a7a2194"
      },
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,30))\n",
        "plt.title('Coefficients')\n",
        "\n",
        "coefficients = pipeline.named_steps['logisticregression'].coef_[0]\n",
        "feature_names = pipeline.named_steps['onehotencoder'].transform(X_train).columns\n",
        "pd.Series(coefficients, feature_names).sort_values().plot.barh(color='gray');"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsoAAAaNCAYAAADNhGmHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJzs3XmYXGWZsPG7SSdgpIHGlCOOsqk8\nDqAMOwHCPuIKiDggoEQdRfOBYGQERAmNiqIzIIhhRFTAUXGGYXUUF4SIyLArMqOPgoKEzQYDBJEl\npL8/zmm7qj29JZ3qrq77d1256tR73u08fbh46q23qjr6+vqQJEmS1Gi1iZ6AJEmSNBmZKEuSJEkV\nTJQlSZKkCibKkiRJUgUTZUmSJKmCibIkSZJUoXOiJyBJaj0R0QF8EHgXMJ3i/yffA47PzMdWoL9p\nwA+AjYB9gDnAicDngTWBezLz34Zp/ytg18x8aKxjl+33Bn6Zmb9fkfaSpiYTZUnSivg0sBuwd2be\nFxHPB84Avh0Ru2TmWL+k/8XArsAamflsRHwOOCEzvzyaxpn5yjGON9gHgU8AJsqS/qLDHxyRJI1F\nRKwL3AdsmZm/qitfA/gH4CrgNGB3YDnwHeDDmflcRGwKnA2sBzwNvBO4Dfg1sDGQwC+BvYFHgXOA\nDYE7M/MTEbF1WdYFPADMzczfRUQf8NLMXBwR7wXmA2sA1wPvysw/R8R5wD3AjsAm5Zj7AscDxwH3\nAx8G/hf4ErAWMAM4IzPPGs8YSmoN7lGWJI3VDsDi+iQZIDOfyswrgA8ALwU2A7ai2EbxtohYDbgU\nuCAzNwHeB1wGdAB7As9l5isz883AjRTJ9UmDxr4Q+GjZ/hKgIYGNiDnAx4E9MnND4LHyeb+3AgcC\nLwNqwJsz82MUif8hmfktYAHwb5m5GTAb2CsiVl+hSElqaSbKkqSxWhcYbi/wG4BzMnNZZv4Z+Drw\nGuCVwAuBrwBk5nVAL8UK74giYhNgVmZ+tyw6C3jLoGpvAr6VmfeXz/8N2L/u/H9n5h8zcxnwC2D9\niqH+ALwlIrYCHsnM/TLz6dHMUdLU4h5lSdJYPQz87TDna8CSuudLKBLkdYCZwC8jov/cWsALGN3e\n4FkUK8QAlMnuskF11gHeHBGvKZ+vRrF9ol/9Bw2fA6ZVjHMs8BHgP4A1IuKUzFw4ivlJmmJMlCVJ\nY/U/wN9ExFaZeWt/YURMB04CllIkv/1eQLECfT/weNUH7yJiw1GM+zCwbkSslpnLy/H+NjPvrqtz\nP3B+Zh4ztksakJlPUCTKH4mIbYErI+KHmfnrFe1TUmty64UkaUwy81HgM8AFEfFygIiYSfEhuy0p\nVmLfHRHTym/DeDvw3xQfpFscEQeUbWZFxDfLOqPxG2AxA1sp3l2OWe9yYP+IqJVj7BsRx46i72cp\nVqOJiCsiYrOy/A6KVWg/+S61IRNlSdKYlR+yOwe4PCISuIVi1Xh/iu8+vpfi2yNuBr4N/Gf5lXEH\nAUeU33v8Y+CqzPzTKMfso/gw3gkR8RvgYOD9g+rcCpwCXBMRv6T49ovLRtH9RcCFETG/nP83yva3\nAgsz8zejmaOkqcWvh5MkSZIquKIsSZIkVTBRliRJkiqYKEuSJEkVTJQlSZKkCibKkiRJUgV/cETj\nrrd3aVO+SqW7eyZLljzZjKFagvFoZDwGGItGxqOR8WhkPBq1Qzxqta6Ooc65oqyW1dlZ9cuz7ct4\nNDIeA4xFI+PRyHg0Mh6N2j0eJsqSJElSBRNlSZIkqYKJsiRJklTBRFmSJEmq4LdeSJLUxnp6eiZ6\nCtKQ5s2bP6Hju6LcoiJizYi4eyXarx8R25XHn4uIjcZrbpIkSVOBK8rtaw9gTeDGzDx6oicjSZI0\n2Zgot5CIWAv4L2AN4Cdl2d3A5pn5RET8C3BHWf11wIuBg4APAduV7f4NuAw4CXg2In4PzAeOAO4F\nzgPWAaYDH8jMWyPiTuBSYCfgUeANmbl81V6tJEnSxHLrRWs5FLgjM+cAPxuh7vrALsAjwN2ZuTMw\nBzg5M3spEuIzMvPyujZHAf+TmbsDRwOnl+UbAxdk5mygG3j1OF2PJEnSpOWKcmvZFFhUHl8zQt2b\nMrMPeCoi1o2InwLPALVh2mwDfBIgM2+OiJeX5Y9n5u3l8WJg7eEG7u6e2bRf8qnVupoyTqswHo2M\nxwBj0ch4SK1hov9bNVFuLR1A/5aH/ncD+urOT687fgYgInal2I+8a2Y+GxFPDNN/XzlGv/5sd1nF\nPIbUrN+Er9W66O1d2pSxWoHxaGQ8BhiLRsZDah3N+G91uGTcrRetJSlWfQF2Lx8fB9aLiGnADhVt\nZgH3lknyPsC0iJhBkXAPfqF0U3+/EbEDA/udJUmS2o4ryq3lAuCSiLiK4sN8fcBZwBUUSfT/VrT5\nIXBsRCyi+EDet4GzgQuB8yOit67uGcBXI+JHFC+i/t+quhBJkqTJzkS5hWTmowysJAMsKB+/NEyb\nxyi+8aLf6XXHLy4fv15XdkBFH7Pqjv/qvCRJ0lTk1gtJkiSpgivKkiS1sQULFvjhxjp+2LNRu8fD\nFWVJkiSpgomyJEmSVMFEWZIkSapgoixJkiRVMFGWJEmSKpgoS5IkSRVMlCVJkqQKJsqSJElSBRNl\nSZIkqYKJsiRJklTBn7CWJKmN9fT0TPQUNEXNmzd/oqew0lxRliRJkiqYKE8REXFhRDxvBdv+fUT8\n1ZJCRFwUEbut9OQkSZJakFsvpojMPGgl2v4M+Nk4TkeSJKnlmSiPk4iYDpwPbAA8BbwLOAnYGFgd\nODEzvx8RdwJfBN5Ulu8FdAP/DjxH8Tc5NDPvqev7POAJ4JXALOCdwJKyzRPAWeW/zYEXlPOYBtwD\nHAb8DfBlYEY5xj9l5u/r+t8NOCIzD4iIDwNvK9uuVZ7/MvDdzLwoIs4FfpiZF45P5CRJkiYnt16M\nn8OABzNzJ+BLwFzgqczcFdifIpGFIhH+VWbuAvwO2BM4APhBZu4OHAWsV9F/Z2buBXwMOLEs2xI4\nJDO/XVfvk8BpmTkHuB/YBvg48K+ZuSfwubKPvxIR6wDzgNnA2ykSb4APA/8cEdsBf2uSLEmS2oEr\nyuNnK+AqgMy8MCLOBK4pn98fEU9HxLpl3WvLx8XA2sD3gUvKRPWizLy+ov8flo/XA6eWx3dl5iMV\n8ziqHPfD8JcV6YiIj1KsNPcOcQ0vB/43M58CnoqIW8p+HomIc4ArgJ1GCkR390w6O6eNVG1c1Gpd\nTRmnVRiPRsZjgLFoZDykVW8q/Hdmojx+nqNxhb4P6Kh7PgNYXh4vqyvvyMw7ImIL4DXApyLiK5l5\nwaD++/vuKPsGeGYU8+iv99bMfGCEa+iom2P9mAAvotjm8ULgzuE6WbLkyRGGGR+1Whe9vUubMlYr\nMB6NjMcAY9HIeEjN0Sr/nQ2X0Lv1YvzcBOwBEBFvBB4Bdi+fvxRYnpmPVjWMiIOAzTPzUuCjFNsl\nBptTPs4G/m+U8zg5IvYCbgD2K8v2iIiDh2h7F/B3ETEjItYCti7bbESRxO8JnB4RvsCSJElTnony\n+LkQeH5ELAKOpvxAXURcXZ47fJi2vwbOiogfAQuAsyPiRRHxxbo6a0TEtyn2G588TF8LgPeU89gI\nuJriQ4X7RcSPy/PXA0TE58okGIDM/GM57+spPvx3U3nq88DxmXk38D3ggyPEQpIkqeV19PX1jVxL\nE6rcY3zRoA/tTVq9vUubclP59mkj49HIeAwwFo2MR6OFC0+b6CloimqVX+ar1bo6hjrnW+iSJLWx\nBQsW+MKhji+kGrV7PEyUW0Bmzp3oOUiSJLUb9yhLkiRJFUyUJUmSpAomypIkSVIFE2VJkiSpgomy\nJEmSVMFEWZIkSapgoixJkiRVMFGWJEmSKpgoS5IkSRX8ZT5JktpYT0/PRE+hJc2bN3+ip6AmcEVZ\nkiRJquCKcouLiMsyc9+IuAY4IjPvGGP7FwLnA2sAM4D5mXnD+M9UkiSptbii3OIyc9+V7OJQ4GuZ\nuTvwEeDjKz8rSZKk1ueK8iQREdOAc4CNgenAieW/IzLzjog4ApgFXAMcA6wJfAj4XmbOKrt5d0Rs\nCcwE3pqZ90TEZ4CdKP7WZ2Xm18rV5zsAMvOIumm8FFhczucu4EvAAcCdwC3AW4HfZOYhqyQIkiRJ\nk4grypPHwcAD5crufsDnhqn7KmDvzLxlUPlDmbkbcAHwgYjYBdg8M3cC9gBOioiusu4d/UlyRLwo\nIm4CPlr+A5gG3ApsS5Fo352Z2wFzImKdlbxWSZKkSc8V5cljR4okdOfy+fMo9gxX+XlmPl1RfnX5\neCPwWmAbYBFAZv4pIv4PeEVdHcpzDwLbRsTrgfOA1/TXycy+iHgIuK0s+wOwNvDoUBfS3T2Tzs5p\nQ50eV7Va18iV2ojxaGQ8BhiLRsZDK6ud7qF2utbBTJQnj2eAT2bmN/sLIuLquvPTB9Wt0jfouA/o\nqCubASyv7yMidgVuz8wlmfmdiLigrv6yIY7r+/wrS5Y8OdzpcVOrddHbu7QpY7UC49HIeAwwFo2M\nh8ZDu9xD7fDfy3AvBNx6MXncAOwLxTdRRMQpwOPAeuX5nUbRx5zycQfgl8BNwG5ln2sCLwN+M6jN\n/sBhZZ1XAfeu8BVIkiRNIa4oTx7/AewRET+l2B98EnAd8IWI+A1w1yj6eGFEfBfoBg7IzMURcUtE\n/JhiRfq4cgtGfZuPA+dHxP7A6sD7x+2KJEmSWlhHX1/fyLWkMejtXdqUm6od3g4aC+PRyHgMMBaN\njEejhQtPm+gptKR2+WW+dvjvpVbrGnJLqSvKkiS1sQULFkz5RGgs2iEx1Oi5R1mSJEmqYKIsSZIk\nVTBRliRJkiqYKEuSJEkVTJQlSZKkCibKkiRJUgUTZUmSJKmCibIkSZJUwURZkiRJqmCiLEmSJFUw\nUZYkSZIqdE70BCRJ0sTp6emZ6CmMyrx58yd6CmpDrii3uIg4oHzcMCJunuj5SJIkTRUmyq3vuIme\ngCRJ0lTk1osJEBFzgV2BWcBmwAnA24BNgUOAHYCDyuqXZuapEXEecD+wNbB+WW9PYIuIuBiYD6wW\nEWcD2wG3ZOZ7h5nDh4ADKF4sfSczeyLiJODhzDwrIjYHzsrM3SLi2HJ+vwWmA/+amdeMUzgkSZIm\nJVeUJ84rgH2ATwHHA28ujz8CzAXmlP8OjIiXlW1Wz8y9gTOAd2TmZ4HHMnP/8vwmQA+wLfD6iFhn\nhDnsTJGUz42ItaoqRMS6wBHAbOD9FAm+JEnSlOeK8sS5OTP7IuIB4PbMfC4iHgJeDVyZmcsAIuI6\nYIuyzbXl42Jg+4o+78zMB8t2DwJrA48OMf6TwCJgGcXK9rpD1Hs58IvM/DPw54i4caQL6+6eSWfn\ntJGqjYtarasp47QK49HIeAwwFo2MR+tp5t/M+6NRO8fDRHniLBvieF2go+75DGB5Rb36OlX9DFWH\niNiAYqvGlpn5RETcUZ7qq6s2va6P5XXl9XUqLVny5EhVxkWt1kVv79KmjNUKjEcj4zHAWDQyHq2p\nWX8z749G7RCP4V4ImChPPpcAsyOi/2+zPXAKsN8Q9Vdk+8ws4A9lkrwVsAFFQv44sF5ZZ+fy8W5g\n84iYDqwDbLMC40mSJLUc9yhPTudQbIu4Fjg3M+8Zpu5to9kOMcjPgCfKbR0HAl8EFgIXA/tGxA8o\nkmIy8yHgG8CNFHujbwSeG+N4kiRJLaejr2/Ed9LV5spv6fgGxdaOXwB7Z+bioer39i5tyk3VDm8H\njYXxaGQ8BhiLRsaj0cKFp030FEalWT844v3RqB3iUat1VW5VBbdeTGkRsQ/FXuTBzsjMS8bQ1YuA\nG4Cnga8PlyRLkiRNFa4oa9y5ojwxjEcj4zHAWDQyHo2MRyPj0agd4jHcirJ7lCVJkqQKJsqSJElS\nBRNlSZIkqYKJsiRJklTBRFmSJEmqYKIsSZIkVTBRliRJkiqYKEuSJEkVTJQlSZKkCibKkiRJUoXO\niZ6AJEmaOD09PU0fc968+U0fU1oRrihLkiRJFUyUJUmSpAomyi0uIg4oHzeMiJsnej6SJElThYly\n6ztuoicgSZI0FflhvgkQEXOBXYFZwGbACcDbgE2BQ4AdgIPK6pdm5qkRcR5wP7A1sH5Zb09gi4i4\nGJgPrBYRZwPbAbdk5nuHmcNdwOXAXsB3KV40/QPw3cw8LiL2Aj4OPAMsAf4R2BE4BlgT+FBm3jIe\n8ZAkSZqMTJQnziuAOcA/AccDWwJzgY9QJMLblvVujIiLyuPVM3PviHgf8I7MPDoijs3M/SNiQ2AT\n4PXAH4DfR8Q6mfnoEONvBHyRIkn/I0Xi/jHgHopV6m7g4Mz8XURcAOwNLAVeBWySmU8PdWHd3TPp\n7Jw25oCsiFqtqynjtArj0ch4DDAWjYzHxJrs8Z/s82u2do6HifLEuTkz+yLiAeD2zHwuIh4CXg1c\nmZnLACLiOmCLss215eNiYPuKPu/MzAfLdg8CawNDJcqPZ+avyrpPUKxAL4uI/u04vcC5EdEJbAz8\niCJR/vlwSTLAkiVPjnTt46JW66K3d2lTxmoFxqOR8RhgLBoZj4k3mePv/dGoHeIx3AsB9yhPnGVD\nHK8LdNQ9nwEsr6hXX6eqn6HqVNbtT8zrfAU4IjN3BS6rK39mmD4lSZKmDBPlyecSYHZEdJarudsD\ntw1Tf1X9Ddem3L4B7E6RsEuSJLUNE+XJ6RxgEcVWi3Mz855h6t4WETeugjl8AbiunMtnKPZRr7cK\nxpEkSZqUOvr6+iZ6DppienuXNuWmaod9U2NhPBoZjwHGopHxaGQ8GhmPRu0Qj1qta8itqn6YbwqL\niH0ovjZusDMy85Jmz0eSJKmVmChPYZl5OcV3JUuSJGmM3KMsSZIkVTBRliRJkiqYKEuSJEkVTJQl\nSZKkCibKkiRJUgUTZUmSJKmCibIkSZJUwURZkiRJquAPjkiS1MZ6enqaPua8eVU/GitNPq4oS5Ik\nSRVMlKeoiDgpIo5YBf3eHBEbjne/kiRJk42JsiRJklTBPcqrWETMBXYGakAAnwWOA74D/CEzP1lX\ndw5wCvAscC/wHmBH4ChgGbAV8EngtcCWwD9n5qURcR/wX8C2wH3AwYPm8BlgJ4q/91nAzcA5mTmn\nPH8CsBT4YXm+r3w+NzMfjYgzgdlAAjPGLzqSJEmTlyvKzfEqYH9gP+BIYDrw3fokuXQmsG9m7gE8\nBLy1LP974FDgfcCngXeWx3PL8y8GvpGZs4EO4HX9HUbELsDmmbkTsAdwErAYWD0iXlJWeyPwLeDz\nwOGZuSfwfeD/RcSmFMn69sDxFMm+JEnSlOeKcnNcn5nPRcRiYO2y7Mb6ChHxN8ArgIsjAuD5wMMU\nK8Q/z8ynI+IB4NeZ+aeIeKiurz9l5v/0j0VjMrsNsAigbPd/5Tj/DvxjRFwIPJaZD0XEdsCXyvFX\nB24CNgVuyMzlwL0R8duRLra7eyadndNGHZyVUat1NWWcVmE8GhmPAcaikfGYWJM9/pN9fs3WzvEw\nUW6OZXXHHeXjM4PqPAPcl5m71RdGxG6D2lf1tdqgsr6653119aDYOrEc+CbFdo0/lccATwK7Z+Zf\n2kfEW8v6/UZ8F2LJkidHqjIuarUuenuXNmWsVmA8GhmPAcaikfGYeJM5/t4fjdohHsO9EHDrxSSR\nmUsAyq0ORMSREfHqUTZ/XkRsXR7PBv6v7txNwG5ln2sCLwN+k5m9wB+BtwMXl3V/TrH/mYg4KCL2\npNiXvHVEdETEBsBGK3aFkiRJrcVEeYJFxGsj4v3l03cDX42Iayk+AJij7OYR4NCy3TLge/0nMvMn\nwC0R8WPgB8Bxmfmn8vRFFKvY/S8VjwI+EhGLKPY/35aZtwO/oNjS8XHgZyt2pZIkSa2lo6+vb+Ra\nmtQi4uHMnLUC7c4HzsvMq8dzPr29S5tyU7XD20FjYTwaGY8BxqKR8Wi0cOFpTR9zMv8yn/dHo3aI\nR63W1THUOfcot6GIWAO4BrhpvJNkSVJrWbBgwZRPhKQVZaI8BYx1NTkznwJ2WEXTkSRJmhLcoyxJ\nkiRVMFGWJEmSKpgoS5IkSRVMlCVJkqQKJsqSJElSBRNlSZIkqYKJsiRJklTBRFmSJEmqYKIsSZIk\nVTBRliRJkir4E9aSJLWxnp6eceln3rz549KPNJm4oixJkiRVMFFugoh4ywq02SciZozT+HdHxJoR\ncV5EvHGkeuMxpiRJUqszUV7FImJD4G0r0HQ+MC6JsiRJksbOPcqjEBHTgfOBDYCngHcBJwEbA6sD\nJ2bm9yPiTuCLwJvK8r2ALwDbRcSJwFeAr5XdTgcOy8y7IuLtwAeA5cBpFAnyDsB3I2LPzHymYk7r\nAF8H1gIeAw4COoCvAt0Uf9sjM/P2irZzgc0z85hyBfmOzNyw7vwW5byfLef01nKcfweeAM7KzG+P\nLYqSJEmtxUR5dA4DHszMgyPiIGAu8FRm7hoRLwauATahiOevMvOzEXEhsCfwWeCIzDw5IrYFTs7M\nqyPiXcC8iDgJOBF4NUVyfX5m7hsRHwdeV5Ukl44BvpeZZ0bEBymS8lcBV2bmuRGxKXAG8A8rcL0v\npEiyb4uIk4FDgCuALYH1M/OR4Rp3d8+ks3PaCgw7drVaV1PGaRXGo5HxGGAsGhmP8TeVYjqVrmU8\ntHM8TJRHZyvgKoDMvDAizqRIjsnM+yPi6YhYt6x7bfm4GFgbeLSunweBMyOih2LV9xbg7yiS6z8D\nfwb2HcOcPlbO4XSAiDgcqEXEoWWdmWO8zn4PAadGxEzgxRQr1wB3jZQkAyxZ8uQKDjs2tVoXvb1L\nmzJWKzAejYzHAGPRyHisGlMlpt4fjdohHsO9EDBRHp3naNzP3UexzaHfDIotCgDL6srr6wCcTLEK\n/G8RcQDwxoq+V3ROAM9QrARfP0Lbvrrj6RXnzwBOzcwrI+IYoP8DfkOtbkuSJE05fphvdG4C9gAo\nvzXiEWD38vlLgeWZ+egQbZcz8IJkFnBXRHRQrBzPAH5VdBNrRsQaEfGD8nx9u5HmdHhEHAbcAOxX\nlm0aEUN9qeXjwHrl8c4V5/vnuTrwevxQoSRJakMmyqNzIfD8iFgEHE3xwb5pEXF1ee7wYdr+Etgq\nIk6n+KDf54Hvlu12BXai2KP8Q4rtHOdmZl95/JOImDVEv2cAO0bENRQr0xeXfb88Iq4FzgV+PETb\nqyiS82uAVzKwGt7v88ClwH+Wx4dRbCORJElqGx19fX0j15LGoLd3aVNuqnbYNzUWxqOR8RhgLBoZ\nj0YLF542Lv1MlV/m8/5o1A7xqNW6Bm+V/Qv3KE9yEXExsO6g4scyc7Qf+pMkaUgLFiyY8omQtKJM\nlCe5zNx/oucgSZLUjtyjLEmSJFUwUZYkSZIqmChLkiRJFUyUJUmSpAomypIkSVIFE2VJkiSpgomy\nJEmSVMFEWZIkSapgoixJkiRV8Jf5JElqYz09PSvVft68+eM0E2nycUVZkiRJqmCiPEoRsUtEvHCi\n5yFJkqTmMFEevXcBJsqSJEltom32KEfEXOC1wFrAS4DTgd8BpwDPAospkuG3AZtn5jERsSZwB/Ae\nYD9gs4h4C7Ar8AFgOXBaZn4rIv4RmA8sA27JzKMi4iRgFvByYGPgo+UYGwKvz8zfRsQngTnANOCs\nzPzmMNdwJrBNWffszDwvIh7OzFnl+YuAs4CfAV8vr/Ux4CCKv/Xgsg7gq0B3ef7IzLw9Io4F9i+v\n74rMPKWqbGx/AUmSpNbSbivKmwH7AHsAnwDOAQ7MzF2BJcDBVY0y8wcUyec7y3onArsAewMHlwn1\nKcBembkzsHFE7F42XzczXwv8J3BY3fE+ETEH2CAzdynn9NGIeF7VHCJiXeANmbkjsDMwfZjrPAb4\nXmbOAa4C9hqi7GjgyszcE3g/8K917XcCdiyvd6gySZKkKattVpRLizJzGfBwRDwGdGTmveW5qylW\nim8doY+/A36VmX8G/gzsGxFbAb/JzCfKOtcAW5bHN5aPDwB95fFDwAsoks4dIuKasnw1YD3gt4MH\nzcw/RsSvI+IyikT7gmHmuBXwsbLd6QAR8d6KssOBWkQcWrabWT5eBPwQ+AbFKvRQZZW6u2fS2Tlt\nuCrjplbraso4rcJ4NDIeA4xFI+MxfqZiLKfiNa2Mdo5HuyXK9SvofcDqdc9nUGwr6Ksrq1q1fY6/\nXonvo9jGUN/Xn8vjZXXl9ccdwDPAlzPzUyPOHMjM15VJ+cHAO4DXDKrSP9+qOVaVPUOx3eL6QeO8\nPyJeCfwjcE1EbDdE2TIqLFny5GguZ6XVal309i5tylitwHg0Mh4DjEUj4zG+plosvT8atUM8hnsh\n0G6J8uyImEaxJ7cL+FNErJ+Zv6dYTf4J8CeKVV0otjj0W04Rr18BUW63WAZcQbF/+RUR0ZWZS8u+\nPkGxvWE4NwD/EhGnUiTXn83MI6sqRsSGwD6ZeSZwa0TcUp7qi4j+leD+VeybKLZy3FSuGj81RNkN\n5dyvj4hNKfZwfxk4KjNPBk6OiF2Av42IwwaVrQX8cYTrkyRJalntlijfTbFt4eXACRQf5vtGRCwD\n7gIupNh+cEK5HeK/KRJkgEUU2w/2pdij/MOy/PTM/FNE/DNwZUQsB36SmT+JiGET5cz8aURcDVxP\nscK8cJjq9wM7RsRBwNPAV8rysykS3v8D+pPnM4ALymtYSrECvVpFGcB5EXEtxQcEP5CZj0VELSJu\nBJ4AfpqZ91SUmSRLkqQpraOvr2/kWlNA+a0Xm2fmMRM9l6mut3dpU26qdng7aCyMRyPjMcBYNDIe\njRYuPG2l2k+1X+bz/mjUDvGo1bo6hjrXbivKk15E7EPxNXODnZGZlzR7PpKkqW3BggVTPhGSVlTb\nJMqZed5Ez2E0MvNy4PKJnockSVK7a7fvUZYkSZJGxURZkiRJqmCiLEmSJFUwUZYkSZIqmChLkiRJ\nFUyUJUmSpAomypIkSVIFE2VJkiSpgomyJEmSVKFtfplPkiT9tZ6enlHXnTdv/iqciTT5uKIsSZIk\nVTBRnsIi4oDyccOIuHkM7S4b5txuEXHReMxPkiRpMjNRntqOW5FGmbnveE9EkiSp1bhHeZKJiLnA\nrsAsYDPgBOBtwKbAIcAOwEE07f/ZAAAgAElEQVRl9Usz89SIOA+4H9gaWL+styewRURcDMwHVouI\ns4HtgFsy873DzOHhzJwVEdcAR2TmHRFxRDmna8b1giVJkiYpV5Qnp1cA+wCfAo4H3lwefwSYC8wp\n/x0YES8r26yemXsDZwDvyMzPAo9l5v7l+U2AHmBb4PURsU6TrkWSJKkluaI8Od2cmX0R8QBwe2Y+\nFxEPAa8GrszMZQARcR2wRdnm2vJxMbB9RZ93ZuaDZbsHgbWBR1fF5Lu7Z9LZOW1VdP1XarWupozT\nKoxHI+MxwFg0Mh4rpl3i1i7XOVrtHA8T5clp2RDH6wIddc9nAMsr6tXXqepnqDqD9dUdTx9FfQCW\nLHlytFVXSq3WRW/v0qaM1QqMRyPjMcBYNDIeK64d4ub90agd4jHcCwG3XrSWS4DZEdEZEZ0UK8e3\nDVN/Zf++jwPrlcc7rWRfkiRJLcVEufWcAyyi2GpxbmbeM0zd2yLixpUc6wsR8d8UHxaUJElqGx19\nfX0j11LbiIgZwO8z80Ur2kdv79Km3FTt8HbQWBiPRsZjgLFoZDwaLVx42qjrtsMv83l/NGqHeNRq\nXUNuR3WPcpuKiH0ovjZusF2Bc5s8HUnSBFmwYMGUT4SkFWWi3KYy83Lg8omehyRJ0mTlHmVJkiSp\ngomyJEmSVMFEWZIkSapgoixJkiRVMFGWJEmSKpgoS5IkSRVMlCVJkqQKJsqSJElSBRNlSZIkqYKJ\nsiRJklTBn7CWJKmN9fT0jFhn3rz5TZiJNPm4otxmIuKVEfHriDhyUPllFXWPiIiTmjY5SZKkScRE\nuf1sB3wnMz9fX5iZ+07QfCRJkiYlt16sAhExHTgf2AB4CngXcBKwMbA6cGJmfj8i7gS+CLypLN8L\n6Ab+HXiO4u9zaGbeU9f3BmXf04B7gMOA9YCvADOA5cC7gb6y3l3AFsBtwPHAR4DnR8TvMvOMun4f\nzsxZEbEn8DngQeAB4LcR8XZg+8w8IiIOBXbOzPeNa9AkSZImGVeUV43DgAczcyfgS8Bc4KnM3BXY\nHzirrNcJ/CozdwF+B+wJHAD8IDN3B46iSILrfRI4LTPnAPcD2wAnA1/OzN2AhRRJOcDWFInxtsDr\ngWeBTwPfqk+SB/kURXL+D8AsgMz8GhARsRVwNHDc2EMiSZLUWlxRXjW2Aq4CyMwLI+JM4Jry+f0R\n8XRErFvWvbZ8XAysDXwfuCQi1gEuyszrK/o+quzrwwAR8SWK1WKAq4ETy+M7M/PBss79Zf8j2TAz\nf14eLwKeVx5/APgxMD8zHx2ug+7umXR2ThvFUCuvVutqyjitwng0Mh4DjEUj4zE27RavdrvekbRz\nPEyUV43naFyt7wM66p73b5EAWFZX3pGZd0TEFsBrgE9FxFcy84Jh+h7c/1B9M2gOQ1led1w/zguA\npcBLRupgyZInRzHMyqvVuujtXdqUsVqB8WhkPAYYi0bGY+zaKV7eH43aIR7DvRBw68WqcROwB0BE\nvBF4BNi9fP5SYPlQq7IRcRCweWZeCnyUYmvFUH2fHBF7lWW7l+d3BW5eibnfF4UOYLdynE7gM8Au\nwL4RseFK9C9JktQSTJRXjQspPjC3iGJP7/nAtIi4ujx3+DBtfw2cFRE/AhYAZ0fEiyLii+X5BcB7\nyr43YmCrxTvKNnPLOiOKiLkR8eZBxScAFwFXAPeWZR8ErsjMxRR7ns9CkiRpiuvo6+ub6Dloiunt\nXdqUm6od3g4aC+PRyHgMMBaNjEejhQtPG7FOO/3giPdHo3aIR63WNeTWVFeUJUmSpAp+mE+SpDa2\nYMGCKb9iKK0oV5QlSZKkCibKkiRJUgUTZUmSJKmCibIkSZJUwURZkiRJqmCiLEmSJFUwUZYkSZIq\nmChLkiRJFUyUJUmSpAomypIkSVIFf8JakqQ21tPTM2KdefPmN2Em0uTjirIkSZJUwUS5iSLitRHx\n/iHOnRcRb1yJvteKiNeMof7NEbHhqhxDkiSplbn1ooky88pV2P1WwGuA77f4GJIkSZOCiXITRcRc\nYHPgXuCgsvjSzDy1PH5TRBwN1IB3ZuatQ/SzJbAQeLr8dyDwBWCtiPg1sCNwUWZ+u1ylPiAz50bE\nmcBsIIEZZV8vBr5cPn8O+KfM/H1E3AlcCuwEPAq8oX6MzDxnvOIiSZI0Gbn1ovk2AuYCc8p/B0bE\ny8pzfZm5F3BC+W8o7wQWZuZuwKnAi4DPAt8aKoGNiE0pEujtgeOBKE99HPjXzNwT+BzwsbJ8Y+CC\nzJwNdAOvHmkMSZKkqcQV5ebbEvheZi4DiIjrgC3Kc1eXjzcCnx6mj8uAsyNiE4rE9VcRscMI424K\n3JCZy4F7I+K3ZfmOxTTio8A0oLcsfzwzby+PFwNrj+7yoLt7Jp2d00ZbfaXUal1NGadVGI9GxmOA\nsWhkPMam3eLVbtc7knaOh4ly8/UBHXXPZwDL685RcdwgM6+KiG2BNwLnR8QxFWP0m14+dtSNAwPv\nJjwDvDUzHxjUx7JBzzsYpSVLnhxt1ZVSq3XR27u0KWO1AuPRyHgMMBaNjMfYtVO8vD8atUM8hnsh\n4NaL5rsNmB0RnRHRSbEV4rby3JzycQfgl0N1EBFHAOtm5teB0ylWqZcz8MLncWC98njn8jGBrSOi\nIyI2oNgCAnADsF/Z7x4RcfAwc68fQ5IkaUoz6Wm+uym2WCyieKFybmbeE1FsGY6IK4CXAm8fpo87\ngf+MiMcoPsz3TooPAJ4aEYuBrwFfj4i3AD8DyMzbI+IXwPXAr/vLgZOAr0bE2yhWoucOM+6t/WNk\n5r+M7bIlSZJai4lyc80AlmXmFyi+QeIvMnPuaDspv2Zu8FfNPcTAKjIMfFivvt3hQ3S5d0XdWXXH\nB9SdWm9wXUmSpKnIRLlJImI2cCwwVLJa1eZiYN1BxY9l5r7jOTdJUvtasGDBlN+DKq0oE+Umyczr\ngZeNWLGxzf6raDqSJEkagR/mkyRJkiqYKEuSJEkVTJQlSZKkCibKkiRJUgUTZUmSJKmCibIkSZJU\nwURZkiRJqmCiLEmSJFUwUZYkSZIq+Mt8kiS1sZ6enhHrzJs3vwkzkSYfV5QlSZKkCibKEywiXhsR\n7x/i3HkR8cZxHGv9iNiuPP5cRGy0An28MSLOG685SZIkTVZuvZhgmXllE4fbA1gTuDEzj27iuJIk\nSS3HRHmCRcRcYHPgXuCgsvjSzDy1PH5TRBwN1IB3ZuatQ/RzErAxsBGwG3AyMAeYBpwF/BA4CXg2\nIn4PzAeOAA4Yrl1mfjMiXgVcAPwRuGtcLlySJGmSc+vF5LARMJciQZ0DHBgRLyvP9WXmXsAJ5b/h\nzMjMOcCOwAaZuQvFKvJHgSeA84AzMvPy0baLiOcBHwNOysw9gedW6kolSZJahCvKk8OWwPcycxlA\nRFwHbFGeu7p8vBH49Aj93Fg+7gjsEBHXlM9XA9ZbiXabAj8ty64BXjfcJLq7Z9LZOW2EqY6PWq2r\nKeO0CuPRyHgMMBaNjMfYtFu82u16R9LO8TBRnhz6gI665zOA5XXnqDiu8kzd45cz81P1JyNiRdt1\n1M1nxHchlix5cqQq46JW66K3d2lTxmoFxqOR8RhgLBoZj7Frp3h5fzRqh3gM90LArReTw23A7Ijo\njIhOYPuyDIqtGAA7AL8cZX83UOxtXi0i1oiIz5flyxn+xdFQ7RLYpjzefZRzkCRJamkmypPD3cA5\nwCLgWuDczLyn/2REXEHxIbuPj6azzPwpxZaN64EfA7eUp64HPhwRh4yx3SeAz0TEdxhYfZYkSZrS\nOvr6Rno3X6tSRLwX2Dgzj5vouYyX3t6lTbmp2uHtoLEwHo2MxwBj0ch4NFq48LQR67TTL/N5fzRq\nh3jUal0dQ51zj/IEiojZwLHA4WNoczGw7qDixzJz3/GcmySpPSxYsGDKJ0LSijJRnkCZeT3wshEr\nNrbZfxVNR5IkSXXcoyxJkiRVMFGWJEmSKpgoS5IkSRVMlCVJkqQKJsqSJElSBRNlSZIkqYKJsiRJ\nklTBRFmSJEmqYKIsSZIkVTBRliRJkir4E9aSJLWxnp6eYc/Pmze/STORJh9XlCVJkqQKJsqTSESs\nGRF3D3P+8oj40Rj7nBsR/1IeH7ByM5QkSWofJsqtZU5m7rES7Y8bt5lIkiRNce5RnmARsRbwX8Aa\nwE/KsjnAKcCzwL3Ae4BPAWtGxHeBA4FvAM8HZgJHZuaN5Wr05pn5RLmKfEfdOP8MbBERF2fm/kPM\n5TzgfmBrYH3gkMy8NSKOAg4qq12amaeOXwQkSZImJxPliXcocEdmfjAiDgTeBpwJ7JmZf4yIzwBv\nzcwPRcRhmfm6iNgEODczL42IPYBjgbcMN0hmfjYijh0qSa6zembuHRHvA94REUuAucC25fkbI+Ki\nzLxrqA66u2fS2TltNNe+0mq1rqaM0yqMRyPjMcBYNDIeo9eOsWrHax5OO8fDRHnibQosKo+vAf4G\nmAVcHBFQrBo/PKjNQ8DHIuIYYHXgT+M4n2vLx8XA9sCWwP9k5jKAiLgO2AIYMlFesuTJcZzO0Gq1\nLnp7lzZlrFZgPBoZjwHGopHxGJt2i5X3R6N2iMdwLwRMlCdeB7C8PF4NeAZ4MDN3G6bN0cB9mfn2\niNgG+JeyvK+uzvQVnM+yQXPrKx/7zaibryRJ0pTlh/kmXgLblMe7A0sAImLT8vHIiHj1oDazGFjR\nfTNF8grwOLBeREwDdqgYa0X+3rcBsyOiMyI6KVaZb1uBfiRJklqKifLEuwDYISKuAoJiBffdwFcj\n4lpgZ4pkenCb+RHxfeAG4EUR8U7gLOAK4GLgfyvGui0ibhzL5DLzbuAciu0h11Lsjb5nLH1IkiS1\noo6+vr6Ra0lj0Nu7tCk3VTvsmxoL49HIeAwwFo2MR6OFC08b9ny7/TKf90ejdohHrdbVMdQ59yi3\nmYiYAXy/4lRm5uHNno8kaWItWLBgyidC0ooyUW4zmfkMsNtEz0OSJGmyc4+yJEmSVMFEWZIkSapg\noixJkiRVMFGWJEmSKpgoS5IkSRVMlCVJkqQKJsqSJElSBRNlSZIkqYKJsiRJklTBX+aTJKmN9fT0\nDHt+3rz5TZqJNPm4oixJkiRVaOtEOSLWjIi7V2H/l0fEj1ZV/3Xj7BYRF63qccqxjoiIk5oxliRJ\n0kRy68WqNSczuyd6EpIkSRq7tkuUI2It4L+ANYCflGWHAEcCzwH/m5nvjYgbgIMz866IeAlwWWZu\nPUSfrwK+ACwHlgKHAScAa0bEdzPzdRVt9gLekpnvj4iDgeMz81URsR7wDWAf4KtAN8Xf6cjMvD0i\n5gCnAM8C9wLvGdTv4cC2mflPFWO+HPh8Zr4uInYEvgOsS/HOws+ALYBzgI2B6cCJmfmjiNgT+Bzw\nIPAA8NsRwixJktTy2nHrxaHAHZk5hyI5BHg+8NrM3Al4ZZn4fg04sDy/D/DNYfo8A/jnzNwNWAQc\nlZkfAh6rSpJLPwW2Ko93Av4QEWuXx1cDRwNXZuaewPuBfy3rngnsm5l7AA8Bb+3vsEx+31LW/yuZ\neSfwkojoKMe5DdgM+HvgRuBg4IHM3B3YjyI5BvgUcGhm/gMwa5g4SJIkTRltt6IMbEqRzAJcUz7+\nEbgsIgD+DngBRWL8PYrV2zcyaOV2cJ+ZeUN5fDWwYKRJZOaTEfF0RMwENgAuAbanSGAvAY4HahFx\naNlkZkT8DfAK4OJyrs8HHgbuA9Yr57x9Zj47zNC/ADYBtgMWArOB55Wx2BGYExE7l3WfFxEzgA0z\n8+dl2aKy/pC6u2fS2TltpBCMi1qtqynjtArj0ch4DDAWjYzH6LVjrNrxmofTzvFox0S5g2KLBBQr\n6jMotk1skZkPRsS3ATLzkYhYHBHbAqtl5n2j7H9GXf8j+QmwJ8V2jf8B3kCxynws8AzFdovr+ytH\nRDdwX7lyTV35bhTbJX4I/BPwiWHGvAbYAZhJkdR/BlgT+BCwNfDJzGxYPY+I+usZ8V2IJUueHKnK\nuKjVuujtXdqUsVqB8WhkPAYYi0bGY2zaLVbeH43aIR7DvRBox60XCWxTHu8OdAHLyiT5peW5GeX5\nr1Ek0SN9o8QdETG7PN4VuHmUc1kEHEWx7eHnFCvKT2bmM8ANFNsfiIhNI2J+Zi7pf14+HhkRry77\nuo5i1fsfI2KzEcZ8O3BnZj4M1IBaZt5bjrlv2fcLI+KUss19UegAdhvltUmSJLW0dkyULwB2iIir\ngKDYuvCDiLiJYsvEZ4DTI2I6cAXwckZOlD8AnFJ+Fdy2FPuIR+M6YBfg+nK7xJplGcDngZdHxLXA\nucCPy/J3A18ty3emSPwByMyngPcBX46Iyr0PmZkU20/6V6qXAHeWx/8BPBERP6W49mvL8hMoYnAF\nxQcIJUmSpryOvr6+iZ7DpBURuwNzM/OwiZ5LK+ntXdqUm6od3g4aC+PRyHgMMBaNjEejhQtPG/Z8\nu/0yn/dHo3aIR63W1THUuXbcozwqEdED7E3xLRJExPoUq9GDLcrMIT+8t6LtVkb5AbzvV5zKzDx8\nVYwpSWpNCxYsmPKJkLSiTJSHUCaxC+qe/54V2J+7ou1WRrnHualjSpIkTTXtuEdZkiRJGpGJsiRJ\nklTBRFmSJEmqYKIsSZIkVTBRliRJkiqYKEuSJEkVTJQlSZKkCibKkiRJUgUTZUmSJKmCv8wnSVIb\n6+npqSyfN29+k2ciTT6uKEuSJEkVTJSngIg4oHzcMCJunuj5SJIkTQUmylPDcRM9AUmSpKnGPcoT\nJCLmArsCs4DNgBOAtwGbAocAOwAHldUvzcxTI+I84H5ga2D9st6ewBYRcTEwH1gtIs4GtgNuycz3\nDjOHM4FtgGnA2Zl5XkTsD3wIWAbcnJkfKuf6WmAt4CXA6Zn51XEKhSRJ0qTkivLEegWwD/Ap4Hjg\nzeXxR4C5wJzy34ER8bKyzeqZuTdwBvCOzPws8Fhm7l+e3wToAbYFXh8R61QNHBHrAm/IzB2BnYHp\nEbEm8FFgj8zcFXhpROxUNtmsnOsewCciwntHkiRNaa4oT6ybM7MvIh4Abs/M5yLiIeDVwJWZuQwg\nIq4DtijbXFs+Lga2r+jzzsx8sGz3ILA28OjgSpn5x4j4dURcBvwncAHw9xQr1d+LCMq2G5RNFpXz\neTgillCshP+h6qK6u2fS2TltLHFYYbVaV1PGaRXGo5HxGGAsGhmPkbVzjNr52qu0czxMlCfWsiGO\n1wU66p7PAJZX1KuvU9XPUHUAyMzXRcRWwMHAO4BjKbZr7F1fr9x6Ub+C3AH0DdXvkiVPDnVqXNVq\nXfT2Lm3KWK3AeDQyHgOMRSPjMTrtGiPvj0btEI/hXgiYKE9OlwCzI6L/77M9cAqw3xD1x7wNIiI2\nBPbJzDOBWyPiFiCBv4uIF2bmHyKiBzinbDI7IqYB3UAX8MhYx5QkSWol7jOdvM4BFlFstTg3M+8Z\npu5tEXHjGPu/H9gxIn4aEVcDX8nMJ4Gjge+U2z1eUNYDuJtii8aPgBMyc3lFn5IkSVNGR1/fkO+g\nS8Bftl5snpnHjKZ+b+/SptxU7fB20P9n797jJKvKe/9/RoZBkAEHp02MRhQ1X0GEICCCICBGiRdQ\nREG8jYnxMhHhIN7iZRgSMMaIojgqBxX1eCeA4C9BVAQRkLtySPQxYEBAwOE4chETHOjfH3s3U9Xs\n7umZabqnuz7v16tftWvttdda++n646nVT1WvCePRz3isYiz6GY9+y5Yd19k+qP+Zz9dHv0GIx9DQ\n/DHLVC29mOWS7EfztXGjHV9Vp031eiRJkmYKE+VZrqrOAM5YxzFOnpzVSJLWN0uWLJn1O4bS2rJG\nWZIkSepgoixJkiR1MFGWJEmSOpgoS5IkSR1MlCVJkqQOJsqSJElSBxNlSZIkqYOJsiRJktTBRFmS\nJEnqYKIsSZIkdfBfWEuSNMCWLl3a2b548RFTvBJp/TNlO8pJ3pLkqEka68D2cd8kb56MMddw/kVJ\nXjLJY95/LyP3t4bXb5vk3MlckyRJ0iCbcTvKSeYBRwCnVNVZ07GGqjr5QRiz917eBZwy2XNIkiRp\n4iYtUU6yAXAisBWwIfB+YA7wUeAW4GbgF0n2At5SVSO7wrdV1cIkOwDLgPuAC6vq7UmeA/w9cA+w\nAng58BHgqUmWAZcA21bVkUkOAw5ul3N6VX0wycnAr4AdgccCr6yqK8ZY/1HAbVV1QpJtgROqaq8k\n1wCnA88Efgu8oL2324B9gI9U1Q+SbAz8FHgCcDSwB7BBO85X2rXcAzwC+F/A/wHupfkdvArYG9gW\nuBXYPsmpwB+AE6vqe0k2Av4DSFWtbNf8GOAbwP8AP+m5lwOAtwErgcuq6m1JNqdJvjcG/hX4m6p6\nfJL/bJ//Gvgc8BlgXru211fVL7vG64qhJEnSbDKZpReHADdX1d7Ai2kS5A8Ar6qqvwAWrub6jwFv\nrKpnAn+UZEtgAXBIVe0J3AE8D/gQUFW1eOTCJI8HFtEkp3sAByV5Qnt6o6p6HnA88Jq1uK+tgC9U\n1a7terbrOXcq8KL2+C+As4HdgC2r6lnAs4H3tkk0wG+q6qXAgcB32lgdBjxqZMCq+hBwe1UdAHwR\nOKg9tQ/wbyNJcuutwFerai+aNwQk2RR4L/DsNm5/muSZ7b3/R1XtTpPwz2nH2LAd9xiaNyUfrqp9\naH5/7xtnPEmSpFltMksvdgP2SLJ7+3xj4DFVNbLTeV7bNpZU1VUAVfUauD8BPinJXJqE9Zwxrt0B\n+FHPTusFwPbtufPbxxuBXdb4ruCOkXW1Y2zec+5M4B3A24H9ga/RxOEZPfXCD2FVInxJ+3g2cFqS\nh9OUkFyU5Mkdc58F/FOSDdvxTx51fhuaHWWAc4G/BJ5Cs3v+7SS0690S2LrtA3BGu+4RI+vaDUiS\n99Lshi8fZ7wLOtYLwIIFmzB37gZjnZ5UQ0Pzp2SemcJ49DMeqxiLfsZj9QY5RoN8710GOR6TmSjf\nAxxTVV8ZaUhyS8/5kd3r4VHXbdg+3tcx5meBF1TVT5OcMM7cw6zaIYWmdGBkvN4d2N4+XWOMXtPo\n6/vGqKrfJrkpTQa5G/BGmsTyM1X1gd6L2iTznva6q5NsDzwX+ECSz3YtqKpWJjmbZjf5KVV1Ucda\nRu5zJL73AJe3u+i98+/R03f07+CenseXVdXNPdft0DXeeFasuHuiXdfJ0NB8li+/c0rmmgmMRz/j\nsYqx6Gc8JmZQY+Tro98gxGO8NwKTWXpxMc2uJ0kemeRY4KY05gB7tf3uoN1hTbIdMLK6/0iyS9v+\nmSRb0+xe/rLded2bVQnw6AT/SmDXJHPb3edd2rY1cf+6gN3H6zjKacB7gIvaHe2LgRcleUiShyb5\n+OgLkhxMU1t9Ok1Zw06juvT+Xr5IU/N8bsfc1XPt3j1tWyd5ZDvX0iSPBq7t6fuXY9zLxTRlMyR5\ndpJDxhlPkiRpVpvMRPnrwF1JLqQpSTifJoE8pX1+Q9vvJ8Dv2n6vBq5r2w8DPpzkh8CKqvop8Ama\nP/GfCPwT8G6a3dB5SUZKDqiq69o+57XznlRV16/h+k8F9k/yHeDha3Dd6TQfIjylXcuFwPeBi4Af\nAJd3XPNz4IQk5wBLgE+OOn9lkkva8S4HtgC+PHIyyTfbw+OBv0rybZr6aarqbuBw4F/bEpRH0NQv\nn0xTGnMu8Ec0H9Yb7SjgxUl+0K7ronHGkyRJmtXmDA+P/iu81idJ/gxYVlXPWcdxtgSeXFXfTrIr\nsLSqnjspixxl+fI7p+RFNQh/DloTxqOf8VjFWPQzHv2WLTuus31Q/+GIr49+gxCPoaH5Y5bmzrjv\nUV5X7deubTGq+faq2n861jOeJG8C3gC8dhKGux04IsnI1/a9dRLGlCRJmrXcUdakc0d5ehiPfsZj\nFWPRz3j0Mx79jEe/QYjHeDvKU/YvrCVJkqSZxERZkiRJ6mCiLEmSJHUwUZYkSZI6mChLkiRJHUyU\nJUmSpA4mypIkSVIHE2VJkiSpg4myJEmS1MFEWZIkSeowd7oXIEmSps/SpUs72xcvPmKKVyKtf9xR\nliRJkjqYKE+jJPsmefMY505O8sJJnOuUJHtNoN+fJ+neXpAkSRogll5Mo6o6a7rXMFpV/Rj48XSv\nQ5IkabqZKE+jJIuAbYEbgIPb5tOr6oPt8YuSHA4MAa+rqivGGOcxwBfbpxsCr62qa5O8A3gFcD2w\nWdv3KGAh8ERgK+C9wF8BjwOeDzwWeEtVHZjkGuB04JnAb4EXVNV9k3LzkiRJ6zlLL6bf44FFwB7t\nz0FJntCeG66q5wDvaX/G8ijg6KraG/gssDjJw4HFwK7Aq2kS8hFbVNW+wDdokuqR4/1GjbsV8IWq\n2hVYAGy31ncpSZI0w7ijPP12AL5dVSsBklwAbN+e+377eAnwj+OMcQvwsba2eAFwOc2O8b9X1X8D\n/53k8p7+l7SPNwPD7fGtwCNGjXtHVV3VHt8IbD6RG1qwYBPmzt1gIl3X2dDQ/CmZZ6YwHv2MxyrG\nop/xWL1BjtEg33uXQY6HifL0Gwbm9DyfB9zXc46O49GOpkm2P5XkQOCF7Zi9ZRK9fz1YOcZx7zpG\nn+s632nFirsn0m2dDQ3NZ/nyO6dkrpnAePQzHqsYi37GY2IGNUa+PvoNQjzGeyNgojz9rgR2TTLy\nu9gFOBZ4MU0pxteBZwA/HWeMhcC1SeYA+wMbANcCWyeZBzwU2PHBWb4kSdLsZKI8/a6jKbE4j2bX\n96Squj4JAEnOBP6Ups54LJ8GPt6O9XHgRGAn4PPARcAvgEsnY7FJ/hx4SVUtmYzxJEmS1lcmytNr\nHrCyqj4BfKL3RFUtmuggVfUt4Fs9TY9uH88G/n5U93N7rjuh63ikT1Ut7Dl/YM95vz5OkiTNeibK\n0yTJrsA7gTeuwTWnAluMar69qvafzLVJkgbHkiVLZn0NqrS2TJSnSVVdBDxhtR37rzngQVqOJEmS\nRvF7lCVJkqQOJsqSJMAae+8AACAASURBVElSBxNlSZIkqYOJsiRJktTBRFmSJEnqYKIsSZIkdTBR\nliRJkjqYKEuSJEkdTJQlSZKkDv5nPkmSBtjSpUsf0LZ48RHTsBJp/eOOsiRJktTBRFmSJEnqYKI8\niyQ5sH18XJLLHoTxN0vy3MkeV5IkaX1kojy7vOtBHv9pgImyJEkaCH6Yb5olWQTsCSwEngK8B3gF\nsA3wSuAZwMFt99Or6oNJTgZ+BewIPLbttw+wfZJTgSOAhyT5JPB04PKqesM4a3h5e83Ktu9hSR4O\nfAnYDLi9XcMngM2S/LyqTpy0IEiSJK2H5gwPD0/3GgZamyi/HtijfTwU2AFYBOxHkwjv3Ha/BHgZ\n8D7g/1XV25K8CXhyVR2e5LaqWpjkccDVwBOBXwO/BLatqt92zL8p8GPgz6vqriRnAsfRJN6/rqqP\nJflfwH8BD2/HOXK8e1q58t7huXM3WNuQSJKmUNe3XixZsmQaViJNmzljnXBHef1wWVUNJ7kZuKqq\n7k1yK7AdcFZVrQRIcgGwfXvN+e3jjcAuHWNeU1W3tNfdAmwOPCBRBv4M+M+quqt9fi5Nov40moSc\nqvpIO86iidzMihV3T6TbOhsams/y5XdOyVwzgfHoZzxWMRb9jMfqDXJ8fH30G4R4DA3NH/OcNcrr\nh5VjHG9B/7ucecB9Hf263gmtHPV8rHdLw2PMcS++PiRJ0gAzEVq/nQbsmmRukrk0O8dXjtN/bX6f\nPweelGTk7dSewGXApcCzAZK8MclraRJo/wohSZIGgony+u9E4DyaUouTqur6cfpemeSSNRm8qn4H\nvB04K8n5wJVV9UPgeGC3JOcCLwROBa4ADkoybo2yJEnSbOCH+TTpli+/c0peVINQN7UmjEc/47GK\nsehnPPotW3bcA9oG+V9Y+/roNwjxGBqa74f5Bl2S/Wi+Am6046vqtKlejyRp/bBkyZJZnwhJa8tE\neUBU1RnAGdO9DkmSpJnCGmVJkiSpg4myJEmS1MFEWZIkSepgoixJkiR1MFGWJEmSOpgoS5IkSR1M\nlCVJkqQOJsqSJElSBxNlSZIkqYP/mU+SpAG2dOnSvueLFx8xTSuR1j8Ds6Oc5FlJHjnd65gqSb6a\nZOMxzj02ydPXYsy1uk6SJGkmGphEGfgrYGAS5ao6uKp+P8bpZwNrk/Cu7XWSJEkzzowpvUiyCNgX\n2Ax4DPAR4L+AY4E/ADfSJMOvALatqiOTbApcDfwN8GLgKUleCuwJvBW4Dziuqr6W5OXAEcBK4PKq\nOizJUcBC4InAVsB72zkeBzy/qn6R5BhgD2AD4ISq+so493ANcDrwTOC3wAuA+cDJwMOBDYG3VtUV\nY/R9GPA5YAHN7+7Q9r7PBXZr234I7A78GNi2bf8H4PfArcDfAkcBf0jyS+Aa4ARgGLgTWNSu5fPA\ntcD2wJXAu3uvq6ozxrpPSZKk2WCm7Sg/BdiPZmfzH4ATgYOqak9gBXBI10VV9R2axPF1bb/3A88C\nngcc0ibUxwLPqardga2S7N1evkVV7Qt8A3htz/F+SfYAtqyqZ7Vreu9Y5Q6trYAvVNWuNMnudsBh\nwI+qam/gcJo3AGP1PRw4q6r2Ad4MfLiqfgMcB7wLeB9wbFX9tmfOtwBva2P0VZqE/mTg+DbZ/Tjw\nxnbMs2kSaYAdgb8DdgaeT/NmpPc6SZKkWW3G7Ci3zquqlcBtSW4H5lTVDe2579PsFF+xmjG2Bn7W\nliX8Htg/ydOA/6yqu9o+5wI7tMeXtI830+y6QrMz+wia3dpnJDm3bX8I8CjgF2PMfUdVXdUe3whs\nDuwEHANQVZcleeI4fXcDhpK8qm3fpH38PHAWcG9VvW3UnN8APpXkS8BXquqWJL3nnw7877ZtI+DS\ntv2aqroFIMmv2vknZMGCTZg7d4OJdl8nQ0Pzp2SemcJ49DMeqxiLfsZjbMbGGIw2yPGYaYly7w74\nME1iN2IeTSnFcE/bhh1j3MsDd9KHgTmjxhqp713Z0957PAe4B/hMVX1gtSt/4PUjY4yee4Nx+t4D\nHFpVF406N5cmaX5Ikg2r6g8jJ6rqi0m+TVN6cmaSA0ddezewd1XdH7ckjxtj/glZseLuiXZdJ0ND\n81m+/M4pmWsmMB79jMcqxqKf8RjfoMfG10e/QYjHeG8EZlrpxa5JNkiykKa2954kj23P7QlcBtxB\ns6sLTa3uiPtoEsqfAUmyaZKHJvkO8HPgSUnmjxprdS4GXpTkIe1YH1+Le7oU2JtmUc+gqakeb74X\nt323STLyHT5vA75GU9Pc970+Sd4H/KGqTqQpvdiGVbEA+AlN7TdJDk6yzzjz914nSZI0q820RPk6\nmlKCc4D30HxI78tt6cOGNIng92gS4XOBJ9MkdwDnAafQfBDv/cB3aUosTqqq3wFvB85Kcj5wZVX9\ncHWLqaoLaUo+LgJ+AFy+Fvd0PLBjknOAf6SpWR7Lx4Entms8CfhBki2BA4BPtWO9om0b8Uvgu0m+\nS/PBvLPa9b4jySvb+f4uyXk0H+S7cpz5e6+TJEma1eYMDw+vvtd6oP3Wi22r6sjpXovGt3z5nVPy\nohqEPwetCePRz3isYiz6GY9+y5Yd1/d80P/hiK+PfoMQj6Gh+WOWl/pn9EmWZD9GlT+0jq+q06Z6\nPZIkSVo7MyZRrqqTp3sNE9F+dZpfnyZJmhGWLFky63cMpbU102qUJUmSpClhoixJkiR1MFGWJEmS\nOpgoS5IkSR1MlCVJkqQOJsqSJElSBxNlSZIkqYOJsiRJktTBRFmSJEnqYKIsSZIkdZgx/8JakiRN\nvqVLl/Y9X7z4iGlaibT+cUdZkiRJ6mCiLEmSJHUwUZ4FkhzYPj4uyWVrOcYpSfaa1IVJkiTNYCbK\ns8O7pnsBkiRJs40f5psmSRYBewILgacA7wFeAWwDvBJ4BnBw2/30qvpgkpOBXwE7Ao9t++0DbJ/k\nVOAI4CFJPgk8Hbi8qt4wzhre0c55PbBZ2zYf+BywgOb1cWhVXZXkL4BjgXuBr1bVRycnEpIkSeun\nOcPDw9O9hoHUJsqvB/ZoHw8FdgAWAfvRJMI7t90vAV4GvA/4f1X1tiRvAp5cVYcnua2qFiZ5HHA1\n8ETg18AvgW2r6rcd8z8c+DHwZGBD4Frg5e16bq6qk5JsAxwPPBf4ObAb8Bvgm8DLqur3Xfe2cuW9\nw3PnbrD2wZEkTZnR33qxZMmSaVqJNG3mjHXCHeXpdVlVDSe5Gbiqqu5NciuwHXBWVa0ESHIBsH17\nzfnt443ALh1jXlNVt7TX3QJsDjwgUaZJpv+9qv4b+O8kl7ftuwFDSV7VPt8EGAL+u6qWt20vHO+m\nVqy4e9ybnixDQ/NZvvzOKZlrJjAe/YzHKsain/EY36DHxtdHv0GIx9DQ/DHPmShPr5VjHG9B/7ub\necB9Hf263gGtHPV8rHdJc3rGhFX16vfQlFtcNHIiySOwnl2SJA0YE+X102nArklGfj+70NQHv3iM\n/muTxF4LbJ1kHvBQmrpngIvbeS5qSy/2rarjkmyQ5NE0NdJnAq/qKumQJEmaLdwlXH+dCJxHU2px\nUlVdP07fK5NcsiaDV9VvgM8DFwGfAS5tT30ceGKS84GTgB+07YuBU4ALge+ZJEuSpNnOD/Np0i1f\nfueUvKgGoW5qTRiPfsZjFWPRz3j0Mx79jEe/QYjH0NB8P8w3qJLsR/O1caMdX1WnTfV6JEmSZgoT\n5Vmuqs4AzpjudUiSJM001ihLkiRJHUyUJUmSpA4mypIkSVIHE2VJkiSpg4myJEmS1MFEWZIkSepg\noixJkiR1MFGWJEmSOvgPRyRJGmBLly7te754cdc/c5UGkzvKkiRJUgcT5XWQZN8kbx7j3MlJXjjB\ncTZL8ty1mP+6JJtOsO9Xk2w8xrl3Jdl1TeeXJEmazSy9WAdVddYkDfU04LnA2ZM03gNU1cHjnPvH\nB2teSZKkmcpEeR0kWQRsC9wAjCSip1fVB9vjFyU5HBgCXldVV4wx1CeAzZL8HPgW8BlgHnAv8Pqq\n+mWSVwNvBe4Djquqr7XXviXJ82l+l88DXgrs3s4Z4ENV9Zkk17VrfQTweWAD4Hrgte18pwA/AL4M\nPAzYBDi0qi5Jcg3waeBFwEbAc6rqzrUKmiRJ0gxh6cW6ezywCNij/TkoyRPac8NV9RzgPe3PWD4E\nfK2qTgT+HvhwVe0DfBR4X5L5wPuBZ9Ekw4f0XHt1VT2LJundp217KnAA8GLg0FFzHUOTaO8B/ArY\nqefcHwMnVdXewLuBd7btc4GftfP8V888kiRJs5Y7yutuB+DbVbUSIMkFwPbtue+3j5cAEy1v2K0Z\nJu+l2fVdDmxNk6j+Hvg9sH9P/x+2jzcBm7fHF1XVvUlu7Gkb8TTgMICqeke75pE661tpEvMjaXaO\nf9dz3fntY9eYfRYs2IS5czeYwK2uu6Gh+VMyz0xhPPoZj1WMRT/jMTZjYwxGG+R4mCivu2FgTs/z\neTTlESPn6Dgezz3Ay6rq5pGGJDsy9u7/yp7jOeO0jbh3nLEOB26qqlcn2Qn459XM02nFirvHOz1p\nhobms3y5FSAjjEc/47GKsehnPMY36LHx9dFvEOIx3hsBE+V1dyWwa5KRWO4CHEtT9rAH8HXgGcBP\nxxnjPlb9Li5ur/1kkmfTlEN8k2aXeVOahPVMmg//rY1LgWcDX0tyNE1d8oiFwFXt8Utokn5JkqSB\nZI3yursOOBE4j6Y84aSqun7kZJIzgaNpao/HcgVNbfORwFHAi5P8AFhCU0bxO5oa5e8C57ZzTHSH\nerQlwN8kOY+mvvr7Pee+AByR5GyahP2Pk7xuLeeRJEma0eYMD69tvqUkbwC2qqp3Tfda1ifLl985\nJS+qQfhz0JowHv2MxyrGop/x6Lds2XF9zwf9P/P5+ug3CPEYGpo/ZkmppRdrqf0HHe8E3rgG15wK\nbDGq+faq2r+rvyRJkqaPifJaqqqLgCestmP/NQc8SMuRJGmtLFmyZNbvGEpryxplSZIkqYOJsiRJ\nktTBRFmSJEnqYKIsSZIkdTBRliRJkjqYKEuSJEkdTJQlSZKkDibKkiRJUgcTZUmSJKmDibIkSZLU\nwX9hLUnSAFu6dGnf88WLj5imlUjrH3eUJUmSpA4mykCStyQ5apLGOrB93DfJmydpzKOSvGUdrl+U\n5CUT7Htkkh8nuTTJzms7pyRJ0kxn6cUkSjIPOAI4parOmu71jKiqkyfSL8lTgIOBnYDtgP2BSx+8\nlUmSJK2/BiJRTrIBcCKwFbAh8H5gDvBR4BbgZuAXSfYC3lJVI7vCt1XVwiQ7AMuA+4ALq+rtSZ4D\n/D1wD7ACeDnwEeCpSZYBlwDbVtWRSQ6jSUABTq+qDyY5GfgVsCPwWOCVVXXFOLexc5KzgT8Bjqyq\ns5K8DTiQ5i8D/1pVS3vW+j/tz0HA4cBtVXVCkuOBXYCVwJuq6uqeOV4IfL2qVgJXAFck+UvgkKp6\ndRuT/w2cWVVnTDT+kiRJM9FAJMrAIcDNVfXXSRYC5wD/Dbyqqn6S5F+BX4xz/ceAN1bVVUm+kGRL\nYAFNAvlfSb4APA/4ELBLVS1OsgggyeOBRcBIGcMlSU5pjzeqqucleRPwGprkdCyPrKrnJtkW+Dww\nsmO9O00C/4skHwFeByyrqi8meTbwxyMDtMn9n1bVM5I8iyaJ7k2UHwfcm+QsmjcURwBnA8cneSjN\nm4JnAn87zjpZsGAT5s7dYLwuk2ZoaP6UzDNTGI9+xmMVY9HPeIzN2BiD0QY5HoOSKO8G7JFk9/b5\nxsBjquon7fPz2raxpKquAqiq18D9CfBJSebS7FSfM8a1OwA/andpSXIBsH177vz28UaaXd7xnNvO\nf3WSP23b7m7XvhJYCGwBfBP4ZJI/A75WVT9LMjLG04AL2nF+APxg1BxzgA2Av6RJiE+qqp2TfAt4\nPs3O+/lVdc94C12x4u7V3MrkGBqaz/Lld07JXDOB8ehnPFYxFv2Mx/gGPTa+PvoNQjzGeyMwKB/m\nuwc4pqr2an+e1LaNGInD8KjrNmwf7+sY87M0ZRp70iSnYxmmSUBHzOsZb2VPe2+fsca5/7jd1T4C\n2Leq9gKuB6iq79HsXv8M+HySvXuuu5fxf+e3Aj+oquGq+iHNDjPAF4CXAfsBX17NOiVJkmaFQUmU\nL6b5YBpJHpnkWOCmNOYAe7X97gAe1fbbDhh5i/EfSXZp2z+TZGtgc+CXSR4O7M2qBHj0Lv2VwK5J\n5ra7z7u0bWtq9551XU+zg/zrqrorydOALYF57bdjbFFVX6Kpmd6hZ4xL27WSZIcknxg1x7/RlJCQ\n5MnADQBV9WPg0cDTeeAutCRJ0qw0KIny14G7klwInElT8vAe4JT2+Q1tv58Av2v7vRq4rm0/DPhw\nkh8CK6rqp8AnaMoYTgT+CXg3za7vvCTfGJm4qq5r+5zXzntSVV2/Fvfw6yRn0Ozovhv4cXtPF9DU\nGn+a5kN81wDfSPI9mtrsL/Ws5QfAT5OcT1N3/SmAJN9sz/8IuD7JRcDn6K9FPhu4rKpG77pLkiTN\nSnOGh817NL521/07NN+Scc3q+i9ffueUvKgGoW5qTRiPfsZjFWPRz3j0W7bsuL7ng/6f+Xx99BuE\neAwNzR+z/HVQPsw3IyQ5leYDeb1ur6r9p2M9AEkeB/wLzdfGrTZJliTNLEuWLJn1iZC0tkyU1yNV\ndcB0r2G0tnRkx+lehyRJ0lQblBplSZIkaY2YKEuSJEkdTJQlSZKkDibKkiRJUgcTZUmSJKmDibIk\nSZLUwURZkiRJ6mCiLEmSJHUwUZYkSZI6+J/5JEkaYEuXLr3/ePHiI6ZxJdL6xx1lSZIkqYOJco8k\nmya57kEc/4wk5zxY4/fMs1eSUybY97FJnv5gr0mSJGmmsfRiau1RVQumexGjPBvYFLhkuhciSZK0\nPhn4RDnJZsC/AA8Ffti2vRI4FLgX+PeqekOSi4FDquraJI8BvllVO44x5lOBTwD3AXcCrwXeA2ya\n5N+q6i87rnkO8NKqenOSQ4B3V9VTkzwK+DKwH/A5YAHN7+3QqroqyR7AscAfgBuAvxk17huBnavq\n9R1zDgFHAX9I8kvgCOAtVXV1krcAC6vqqCTHAHsAGwAnVNVXJhJbSZKkmczSC3gVcHVV7QH8uG17\nGLBvVT0TeHKb+H4ROKg9vx8wXrJ4PPD2qtoLOA84rKreBtzelSS3LgSe1h4/E/h1ks3b4+8DhwNn\nVdU+wJuBD7d9PwbsX1XPBm4FXjYyYJLdgJe2/R+gqpYDJwPHV9UZXX3aRHzLqnoWze7ze5NsPM69\nS5IkzQoDv6MMbEOTzAKc2z7+BvhmEoCtgUfQJMbfptm9fSGjdm5Hj1lVF7fH3weWrG4RVXV3kv9J\nsgmwJXAasAtNonwa8G5gKMmr2ks2SfJHwJOAU9u1Pgy4DbgJeFS75l2q6g+rm38cuwHPSHJu+/wh\n7di/GOuCBQs2Ye7cDdZhyokbGpo/JfPMFMajn/FYxVj0Mx7djEvDOPQb5HiYKMMcmhIJaJLAeTRl\nE9tX1S1JvgVQVf8vyY1JdgYeUlU3TXD8eT3jr84PgX1oyjV+BLyAZpf5ncA9NOUWF410TrIAuKnd\nuaanfS9gK+C7wOuBf5jg/MM9xxu2j/cAn6mqD0xwDFasuHuiXdfJ0NB8li+/c0rmmgmMRz/jsYqx\n6Gc8xmZcfH2MNgjxGO+NgKUXUMBO7fHewHxgZZsk/2l7bl57/os0SfTqvlHi6iS7tsd7ApdNcC3n\nAYfRfLDuJzQ7yndX1T3AxcCLAZJsk+SIqlox8rx9PDTJdu1YF9Dser88yVPGmfM+Vr1huoNmtxia\nnWzaeV+U5CFJHprk4xO8F0mSpBnNRBm+QFNa8D0gNKUL30lyKU3JxD8BH0myIXAm8ERWnyi/FTi2\n/Sq4nWnqiCfiAuBZwEVtucSmbRvAx4EnJjkfOAn4Qdv+18Dn2vbdaRJ/AKrqv4E3AZ9JMlYtxEXA\nO9oPMJ4IfCLJ/wf8qh3jQprykYvaOS+f4L1IkiTNaHOGh4dX30sAJNkbWFRVr53utazPli+/c0pe\nVIPw56A1YTz6GY9VjEU/49Fv2bLj7j/2P/P5+hhtEOIxNDR/zljnrFGeoCRLgefRfIsESR5Lsxs9\n2nlVNeaH99b2unWRZB5wdsepqqo3PhhzSpJmhiVLlsz6REhaWybKE9QmsUt6nv8S2Gstxlmr69ZF\nW+M8pXNKkiTNdNYoS5IkSR1MlCVJkqQOJsqSJElSBxNlSZIkqYOJsiRJktTBRFmSJEnqYKIsSZIk\ndTBRliRJkjqYKEuSJEkd/M98kiQNsKVLl95/vHjxEdO4Emn9446yJEmS1MFEeQ0l2TfJm8c4d3KS\nF05wnEVJ/nlyVze52jW+pKP9tulYjyRJ0lSy9GINVdVZ072GqVJVJ0/3GiRJkqaLifIaSrII2Ba4\nATi4bT69qj7YHr8oyeHAEPC6qrpinOH+JMm/ANsAH6qqzybZCzgW+ANwI/BXwCuAbavqyCSbAldX\n1eOSvBM4ALgPOLOqjk2yR8/1NwB/A+wGHAasBJ4GHAPsC+wAvL2qTk/yNuBAmr8y/GtVLU1yFHAb\n8Cngy8CfApeuZegkSZJmFEsv1s7jgUXAHu3PQUme0J4brqrnAO9pf8azFfBy4MXAW9u2TwEHVdWe\nwArgkHGuPxJ4Jk0ivKJt+xiwf1U9G7gVeFnb/ufAq4A3Af8IvK49XtQz3u7AM4BFSTbraX8usGFV\n7Qp8CXjEau5LkiRpxnNHee3sAHy7qlYCJLkA2L499/328RKahHQ8P6qqe5PcBGyeZAuaRPuGnrH2\nBMbalT4F+C7Nbu+XkvwR8CTg1CQAD6PZEb4J+ElV/U+Sm4GfV9XvktwKbN6OdTdwHs2u80Jgi555\ntgEuBKiqi5P8frybWrBgE+bO3WA1tz45hobmT8k8M4Xx6Gc8VjEW/YxHN+PSMA79BjkeJsprZxiY\n0/N8Hk35w8g5Oo67rOw5njPOuL3jbDhyUFVvTvJkml3pc4HnATdV1V69k7TlHL1z9c2bZEvgCGCH\nqrorydWj1jmHVfcHq/lLxIoVd493etIMDc1n+fI7p2SumcB49DMeqxiLfsZjbMbF18dogxCP8d4I\nWHqxdq4Edk0yN8lcYJe2DZpSDGhKGH66JoNW1QpgOMlj26Y9gcuAO4BHtW27AyTZPMn7q+pnVXU0\n8Bvg3vbcNu3joUm2m8DUC4Fft0ny04AtaZL0+5cG7NSOuRuw0ZrclyRJ0kxkorx2rgNOpClVOB84\nqaquHzmZ5EzgaODv12LsvwG+nORcmt3jrwLfa4bNucCTgfuq6nZgKMklSc6hKeP4DfDXwOeSnE+T\nVNcE5vwxcFdbQnIQ8GlgWc/5fwM2TnIezQcYb1qL+5IkSZpR5gwPr646QL2SvAHYqqreNd1rWV8t\nX37nlLyoBuHPQWvCePQzHqsYi37Go9+yZcfdf+x/5vP1MdogxGNoaP6csc5Zo7wGkuwKvBN44xpc\ncyr9H4wDuL2q9p/MtUmSJGlymSivgaq6CHjCajv2X3PAg7QcSZLW2ZIlS2b9jqG0tqxRliRJkjqY\nKEuSJEkdTJQlSZKkDibKkiRJUgcTZUmSJKmDibIkSZLUwURZkiRJ6mCiLEmSJHUwUZYkSZI6mChL\nkiRJHfwX1pIkDbClS5fef7x48RHTuBJp/eOOsiRJktTBRFmSJEnqYKIsSZIkdbBGeUAl2Qz4MvAw\nYBPgUCDAO4AbgNuAc4AvAicCWwEbAu+vqnOmY82SJElTyUR5cP0xcFJVnZ7k2cC7gZ2BHYG7gKtp\nEuVDgJur6q+TLGzbthtv4AULNmHu3A0e1MWPGBqaPyXzzBTGo5/xWMVY9DMe3YxLwzj0G+R4mCgP\nrluB9yU5EtiIZmf5jqq6FSDJ99p+uwF7JNm9fb5xknlVdc9YA69YcfeDuOxVhobms3z5nVMy10xg\nPPoZj1WMRT/jMTbj4utjtEGIx3hvBEyUB9fhwE1V9eokO9GUWNzbc364fbwHOKaqvjLVC5QkSZpO\nfphvcC0Erm2PXwKsAB6RZEGSjYG92nMXA/sDJHlkkmOneqGSJEnTwUR5cH0BOCLJ2TTJ8B8D/wCc\nT/Mhv8todpi/DtyV5ELgzPa8JEnSrGfpxYCqqkuBrXuazkhyIPCsqvpNkm8D11bVSuD107JISZKk\naWSirF6bAOck+R3w46q6cLoXJEl6cC1ZsmTWf1hLWlsmyrpfVX2BpiRDkiRp4FmjLEmSJHUwUZYk\nSZI6mChLkiRJHUyUJUmSpA4mypIkSVIHE2VJkiSpg4myJEmS1MFEWZIkSepgoixJkiR18D/zSZI0\nwJYuXXr/8eLFR0zjSqT1jzvKkiRJUgcT5fVAkn2TvLk9PnA1fc9Nsu0ajv/VJBuv4TUnJ3nhmlwj\nSZI0m1h6sR6oqrN6nr4LOGWSxz94MseTJEkaBCbKkyDJImBPYCHwFOA9wCuAbYBXAgcBTwceCnyq\nqk5KcjJwD/AI4ExgW+BWYPskpwIvBz4PPAZ4GHBUVX1rAmt5J3AAcB9wZlUdm+S6dvwTgF8BOwKP\nBV5ZVVck+RiwG/DvQICDe8bbADgR2ArYEHh/VZ2zFmGSJEmaUSy9mDxPAvYDPgC8G3hJe/w64Lqq\n2h3YAzi655rfVNVLR55U1YeA26vqAGAL4Oyq2pMmaV7KxBwJPJMm8V3RcX6jqnoecDzwmiRPBXan\nSeT/GdhpVP9DgJuram/gxcBHJ7gOSZKkGc0d5clzWVUNJ7kZuKqq7k1yK7ARsEWSC2l2kId6rrlk\nnPFWADsneQPN7vAjJriOU4DvAl8GvtRx/vz28UZgF2Br4EdVdR/wf9vd5167AXsk2b19vnGSeVV1\nz1gLWLBgE+bO3WCCy103Q0Pzp2SemcJ49DMeqxiLfsajm3FpGId+gxwPE+XJs3KM48cBTwD2rKo/\nJLmr59yYySbNYBvMZAAAIABJREFUTu4WNLvQWwCXTWQRVfXmJE+m2YU+N8nTx1nnnPbnvp624VH9\n7wGOqaqvTGR+gBUr7p5o13UyNDSf5cvvnJK5ZgLj0c94rGIs+hmPsRkXXx+jDUI8xnsjYOnFg28n\n4IY2Sd4P2CDJvHH6j/xOFgL/1e70HgCMdw0ASTZP8v6q+llVHQ38BthsNZddC+yYZE6SrYEtR52/\nGNi/Hf+RSY5d3TokSZJmAxPlB993gSclOY9mZ/lbwCfH6X9lkkuAfwFelOR7wO+AG5O8f7yJqup2\nYCjJJUnOoSmp+M1qrrkM+DlNQnw48B/AvT1dvg7c1ZaOnMmq0g1JkqRZbc7w8Oi/tGuQJNkIOKiq\nvpDkYcDPgMdX1crVXDqm5cvvnJIX1SD8OWhNGI9+xmMVY9HPePRbtuy4+4/9z3y+PkYbhHgMDc2f\nM9Y5a5RnoLbu+J86Tn2tqsbbrX6AqvqfJDsneStNrfL71iVJliTNLEuWLJn1iZC0tkyUZ6CqugTY\naxLHO3SyxpIkSZotrFGWJEmSOpgoS5IkSR1MlCVJkqQOJsqSJElSBxNlSZIkqYOJsiRJktTBRFmS\nJEnqYKIsSZIkdTBRliRJkjqYKEuSNMCWLl3KsmXHTfcypPWSibIkSZLUwUR5lkhyYPv4uCSXTfd6\nJEmSZjoT5dnjXdO9AEmSpNlk7nQvYJAlWQTsCSwEngK8B3gFsA3wSuAZwMFt99Or6oNJTgZ+BewI\nPLbttw+wfZJTgSOAhyT5JPB04PKqesM4a3gbcCDNm6Z/raqlSY4CHtOO/yjg7VV1VpL/BK4Azq6q\nz0xWHCRJktZH7ihPvycB+wEfAN4NvKQ9/jtgEbBH+3NQkie012xUVc8DjgdeU1UfAm6vqgPa838G\nLAV2Bp6f5OGrWcPuNEn5oiSbtW2PrqrnAoe06wHYCjjaJFmSJA0Cd5Sn32VVNZzkZuCqqro3ya3A\ndsBZVbUSIMkFwPbtNee3jzcCu3SMeU1V3dJedwuwOfDbMea/GzgPWEmzs71F2/49gKr6v0ke3bb9\nrqr+fXU3tGDBJsydu8Hquk2KoaH5UzLPTGE8+hmPVYxFP+PxQMZkFWPRb5DjYaI8/VaOcbwFMKfn\n+Tzgvo5+vX26xhmrD0m2pCnV2KGq7kpydc/prr823NM1zmgrVtw9kW7rbGhoPsuX3zklc80ExqOf\n8VjFWPQzHt2MScPXR79BiMd4bwQsvVh/nQbsmmRukrk0O8dXjtN/bX6XC4Fft0ny04AtaRJyaMox\nSLIdcP1ajC1JkjSjmSiv306kKYs4HzipqsZLWK9Mcskajv9j4K62rOMg4NPAsvbcHUnOAL6E36gh\nSZIG0Jzh4eHpXoPWM+23XtxWVSeszfXLl985JS+qQfhz0JowHv2MxyrGop/x6DfyX/kWLz5imley\nfvD10W8Q4jE0NL+zRBWsUR4ISfajqUUe7fiqOm2q1yNJkjQTmCgPgKo6AzhjDfof9eCtRpK0Plmy\nZMms3zGU1pY1ypIkSVIHE2VJkiSpg4myJEmS1MFEWZIkSepgoixJkiR1MFGWJEmSOpgoS5IkSR1M\nlCVJkqQOJsqSJElSBxNlSZIkqYOJsiRJA2zp0qUsW3bcdC9DWi+ZKEuSJEkdTJRnmCSLkvzzdK9D\nkiRptjNRliRJkjrMne4FaO0kOQw4uH16elV9MMn2wCeAPwD3AS8DNgM+D1wLbA9cWVWvH2fca4DT\ngWcCvwVeAMwHTgYeDmwIvLWqrngQbkuSJGm9YaI8Mz0e2AfYuX1+SZJTgEcCh1bVlUmOBl4JnAns\nCBwE/Bq4McnDq+q3Y4y9FfCFqjoyyY+A7YD9gB+1yfhOwEeAPcda3IIFmzB37gbrfpcTMDQ0f0rm\nmSmMRz/jsYqx6Gc8HsiYrGIs+g1yPEyUZ6YdgG9X1UqAJBfQ7BZfA3wwySbAnwBfavtfU1W3tH1/\nBWxOs1vc5Y6quqo9vrHtuxNwDEBVXZbkieMtbsWKu9f2vtbI0NB8li+/c0rmmgmMRz/jsYqx6Gc8\nuhmThq+PfoMQj/HeCFijPDMNA3N6ns+jKbU4Hji+qvYEPt1zfuWo6+cwtq6+o+ebmu1iSZKkaWSi\nPDNdCeyaZG6SucAubdtC4NokGwHPp0mgJ8OlwN4ASZ4BXD1J40qSJK23LL2Yma4Dvg+cR/Nm56Sq\nuj7Jx2k+iHct8HHgBOBrkzDf8cDnkpzTzve3kzCmJEnSes1EeYapqpN7nn5i1LkTgRN7mk5rH3fq\n6bMT46iqhT3HB/acOrCjuyRJ0qxlojyAkuwHHNFx6viqOq2jXZI0Sy1ZsmTWf1hLWlsmygOoqs4A\nzpjudUiSJK3P/DCfJEmS1MFEWZIkSepgoixJkiR1MFGWJEmSOpgoS5IkSR1MlCVJkqQOJsqSJElS\nBxNlSZIkqYOJsiRJktTBRFmSpAG2dOlSli07brqXIa2XTJQlSZKkDuucKCd5S5KjJmEtJDmwfdw3\nyZsnY8x1XM8ZSc6ZhHE+muTxk7Sm2yZjHEmSJI1v7nQvYESSecARwClVddZ0r6e1R1UtWNdBqurw\nyViMJEmSps5qE+UkGwAnAlsBGwLvB+YAHwVuAW4GfpFkL+AtVTWyK3xbVS1MsgOwDLgPuLCq3p7k\nOcDfA/cAK4CXAx8BnppkGXAJsG1VHZnkMODgdjmnV9UHk5wM/ArYEXgs8MqqumKM9R8FPKbt9yjg\n7VV1VpL/BK4Azm7n+0S7xjuB1wLvATZN8m/AC0fHoKrOSfIa4C3tffykqv52jLZz27YbgJOBh7fj\nvLWqrkhyDXA68Ezgt8ALgD8BvtjexobAa6vq2jHu8dXAW9v1H1dVX0vycpo3HiuBy6vqsDYWt1XV\nCUm2BU6oqr1GxeIPHevfBjgBGG7js6iqftu1FkmSpNliIqUXhwA3V9XewItpEuQPAK+qqr8AFq7m\n+o8Bb6yqZwJ/lGRLYAFwSFXtCdwBPA/4EFBVtXjkwrZcYRGwR/tzUJIntKc3qqrnAccDr1nNGh5d\nVc9t7+UDbdtWwNFV9Zl2jLdX1V7AecBhVfU24Paq+ssxYgBwJPDSqtoduCzJxmO0jTgM+FE7zuE0\nbw5G1vKFqtq1jc12NEn90W3fzwKL6ZBkPs2bl2e1cTwkyabAscBz2nVslWTvceLTG4uu9X+c5ne4\nD00y/bfjjCVJkjQrTKT0YjdgjyS7t883Bh5TVT9pn5/Xto0lVXUVQFW9Bu5PgE9KMpcmSRurDngH\nmsRyZXvdBcD27bnz28cbgV1Wcw/fa+f/v0ke3bb9rqr+vT3epqoubo+/DywZdf0DYtCWinwFOC3J\n/wG+UlW/T9LVNjLOTsAx7VouS/LEtv2OkRi197M58AvgY0mW0iTPl49xb1sDP6uq3wO/B/ZP8jTg\nP6vqrrbPuTSxHEtvLLrW/3Tgf7f3sRFw6ThjsWDBJsydu8F4XSbN0ND8KZlnpjAe/YzHKsain/F4\nIGOyirHoN8jxmEiifA9wTFV9ZaQhyS0950d2pYdHXbdh+3hfx5ifBV5QVT9NcsI4cw/TlHmMmNcz\n3sqe9t4+Xbp2zu8Zo2/vHL19+2LQ+kCSLwEHAuckeVZVPaCtp//o+xnJJnvvhbbP0cC3q+pT7Ycc\nXzjGeu/lgffXFbff0/872rDn+P5YjLH+u4G9q2r077jTihV3T6TbOhsams/y5XdOyVwzgfHoZzxW\nMRb9jEc3Y9Lw9dFvEOIx3huBiZReXAzsD5DkkUmOBW5KYw6wV9vvDppyAZJsB4zM+h9JdmnbP5Nk\na5od018meTiwN6uS09GJ+5XArknmtrvPu7Rta2r3nnVd33H+6iS7tsd7ApeNOv+AGCR5SJJjaEoy\njgMuArbsausZ59L2fknyDODqcda8ELi2jfH+NDHq8rNmuGya5KFJvgP8HHhSW5bRe0/3/45GYtJr\nrHsCfgLs2/Y5OMk+46xbkiRpVphIovx14K4kFwJn0pQ8vAc4pX1+Q9vvJ8Dv2n6vBq5r2w8DPpzk\nh8CKqvopzQfnLqD5gNw/Ae+m2e2cl+QbIxNX1XVtn/PaeU+qqq5Ed3XuSHIG8CXgXR3n3woc234V\n3M40ddXjxqCqRj74d1GS77Xr//EYbSOOB3Zs5/nHNjZj+TRNbfC/AV8F9kzy3JGTSRYleUlV/Y6m\nRvm7NCUWJ7VtbwfOSnI+cGVV/RA4laY04zs0HyjsM849HQb8XZLzaGrG1+bNiiRJ0owyZ3h4Qn9N\nn7F6v+lhutcyKJYvv3NKXlSD8OegNWE8+hmPVYxFP+PRb+S/8i1efMQ0r2T94Ouj3yDEY2ho/pgl\nvOvN9yivqySnAluMar4ddz8lSRrTkiVLZn0iJK2tWZMoV9UB070GSZIkzR7r/C+sJUmSpNnIRFmS\nJEnqYKIs/f/s3Xm4nWV97//3NjtBkS0NZlnxiANqPy0i1CIiCiaIp+KEHkRRHMCKIhaEg/iz/rSE\n9FScBxxw+GFFPQpWChY8R7QKiUwSEQri8G1FUVHAjcYSCIoh+/fHeuLea/PsKcMest+v68q1nvUM\n930/3yy8PuvO/SwlSZJaGJQlSZKkFgZlSZIkqYVBWZIkSWphUJYkSZJaGJQlSZKkFgZlSZIkqYVB\nWZKkeWzFihWcfvr7ZnoY0qxkUJYkSZJaGJQlSZKkFgblEZIcm+SULdTWoc3rQUmO2UJtHpnkfyRZ\nluScZt9tzesHkjwyyQOS/PUW6OvQzW1DkiRpLuuf6QFsi5IsAk4EzqmqC7dUu1V1ZtP+spZjJ4w4\n9tfA1za1n5Hj39Q2JEmS5rp5FZSTLAA+AewKLAROBvqADwC3ADcDP27C5rFVtXFW+LaqWpLk8cDp\nwAbg8qp6Y5KnA/8LuBtYA7wIeD/wuCSnA6uB3avqpCTHAy9uhvOlqnpnkjOBXwJ7AQ8DXlpVV48x\n/lOA24DrW46tBI4FPgI8IMl/AF8GPgksAu4BjqqqnyX5T+BqumH6pxOM/7jRNauqiyZVcEmSpDls\nXgVl4HDg5qp6VZIlwEXA74CXVdW1Sf4v8ONxrv8gcHRVXZfkM0keDiwGDq+qnyT5DPAM4N3APlX1\nuiRHAiR5JHAksHfT1uqNyyeA7arqGUleC7yCbojdVO+mG8w/keSTwHur6utJngX8PfBquqH3+VX1\nvSQvnGD8L2+p2R7jDWDx4u3p71+wGbcweZ3OwLT0M1dYj17WY5i16GU97s2aDLMWveZzPeZbUH4y\nsH+S/Zr39wMeWlXXNu9XNfvGkqq6DqCqXgF/DMBnJOmnG0DHmm19PPCtqlrfXHcZsGdz7JLm9SZg\nnynf1die3O0qbwUWAIPN/jur6nvN9uAE479XzZIsqqq7x+p0zZp1W+wGxtPpDDA4uHZa+poLrEcv\n6zHMWvSyHu2sSZefj17zoR7jfRGYb0H5buBtVXXWxh1JbhlxfOPDjUOjrlvYvG5oafOfgGdX1Q+S\nfHicvofoLvPYaNGI9taP2D/ynM11N/DCqrq5Zf9GE43/XjWTJEmaD+bbr15cCTwPIMmDkpwK/CJd\nfcCy5rzbgZ2b8/YANn7V+H6SfZr9n0zyF8COwM+S/AlwAMMBePSXkGuAfZP0N7O3+zT7trSRfV8J\nPL8Z79OSHN5y/kTjb6uZJEnSNm++BeV/Bu5IcjlwAd0lD2+h++sOFwA/b867FrizOe/lwI3N/uOB\n9ya5FFhTVT+g+/DcZXQfeHsX8Ga6s8eLknxxY8dVdWNzzqqm3zOq6qdb4R6vBg5LchJwCvD8JN8E\nlgNXtJw/0fjbaiZJkrTN6xsaGr3KQNo8g4Nrp+VDNR/WTU2F9ehlPYZZi17Wo9fG//vq173uxBke\nyezg56PXfKhHpzMw5rLX+bZGeU5Ici6w06jd/1VVz5uJ8UiStl3Lly/f5oOQtKkMyrNQVR0y02OQ\nJEma7+bbGmVJkiRpUgzKkiRJUguDsiRJktTCoCxJkiS1MChLkiRJLQzKkiRJUguDsiRJktTCoCxJ\nkiS1MChLkiRJLQzKkiTNYytWrJjpIUizlkFZkiRJamFQHiHJDklu3Irtn5/koq3V/oh+liU5Z5Ln\nPizJE5vtM5M8Z+uOTpIkaW7on+kBzDP7V9XimR7EKE8DdgBWz/RAJEmSZpN5H5STPAD4F+C+wKXN\nvpcCxwH3AN+rqtckuRI4vKpuSPJQ4F+raq8x2nwc8BFgA7AWOAJ4C7BDkq9U1TNbrnk68IKqOibJ\n4cCbq+pxSXYGPg8cDHwKWEz37+24qrouyf7AqcAfgJ8Drx7V7tHA3lV1VEufHeAU4A9JftbsPiDJ\nscDDgJcCa4BzquoJzTVXAYdW1Y3jFlaSJGmOm/dBGXgZcH1V/c8khwEvAe4PHFRVv03yzSb4fhY4\njG4oPRg4a5w2TwPeWFVXJjkJOL6q3pDkiLaQ3LgceFuz/RTgV0l2bLYvBk4ALqyqM5Ls1vTx34EP\nAgdW1W+SvAt4IfALgCRPBl4APLutw6oaTHImcFtVnZ/kEGCoqg5qAvYRwAfGrV6LxYu3p79/wVQv\n2ySdzsC09DNXWI9e1mOYtehlPXpZj17Wo9d8rodBGXYDVjXbK5vX3wD/mgTgL4AH0g3GX6UblJ/D\nqJnb0W1W1ZXN9sXA8okGUVXrkvw+yfbAw4HzgH3oBuXzgDcDnSQvay7ZPsmfAo8Bzm3Gen/gNrpB\needmzPtU1R8m6n+ES5vXXwBPmsJ1f7RmzbpNuWzKOp0BBgfXTktfc4H16GU9hlmLXtbj3qzHMD8f\nveZDPcb7ImBQhj66SySg+3DjIrrLJvasqluSfBmgqn6d5KYkewP3qapfTLL9RSPan8ilwIF0l2t8\ni+5M8F8BbwLuprvc4oqNJydZDPyiqpaNbCTJMmBX4OvAUcA/TrJ/gPUjtvuAoVHHF06hLUmSpDnL\nX72AAp7QbB8ADADrm5C8S3NsUXP8s3RD9ES/KHF9kn2b7aXAVZMcyyrgeLoP1l1Ld0Z5XVXdDVwJ\nPB8gyW5JTqyqNRvfN6/HJdmjaesyurPeL0ry2HH63MD4X5huB/40SV+SBwOPmuS9SJIkzWkGZfgM\n8KQk3wBCd+nCvyX5Nt0lE+8C3p9kIXAB8GgmDsqvB05tfgpub7rriCfjMuCpwBXNcokdmn0AHwIe\nneQS4Azgm83+VwGfavbvRzf4A1BVvwNeC3wyyViLhq8A/p/mAcZ7acL414Fv011Dfc0k70WSJGlO\n6xsaGv0v6xpLkgOAI6vqiJkey2w2OLh2Wj5U82Hd1FRYj17WY5i16GU9ep1++vt43etOnOlhzBp+\nPnrNh3p0OgN9Yx1zjfIkJVkBPIPur0iQ5GF0Z6NHW1VVYz68t6nXbY4ki4CvtRyqqjp6a/QpSZob\nli9fvs0HIWlTGZQnqQmxy0e8/xmwbBPa2aTrNkezxnla+5QkSZrrXKMsSZIktTAoS5IkSS0MypIk\nSVILg7IkSZLUwqAsSZIktTAoS5IkSS0MypIkSVILg7IkSZLUwqAsSZIktTAoS5I0j61YsWKmhyDN\nWgZlSZIkqYVBWZIkSWphUN7CkhyU5Jhm+9AJzl2ZZPct1O+NSXbYEm1JkiQJ+md6ANuaqrpwxNu/\nA86ZqbFIkiRp0xmUR0lyJLAUWAI8FngL8BJgN+ClwGHAE4H7Ah+rqjOSnAncDTwQuADYHbgV2DPJ\nucCLgE8DDwXuD5xSVV+exFhuBHavqjuSvAe4vjm0H9ABAry7qj454ppdgPOA5wKXAB9vtrcDng78\nDvgEsGuz72TgYcADq+qdSf5fYN+qem6SfYHXAH3AL4G9mnNfWlVXT6qgkiRJc5RBud1jgP2Bo4A3\nA48HjgReCXy/qk5Mcj/gBuCM5prfVNVrmqBNVb07yZuq6pAkDwK+VlWfTrIr8EVgwqA8jscBT27G\neTawMSjfF/gs8OqqujlJP/DDZixnAwcCDwB+V1VLkzwEWAk8G3hX08ZedIMxwFOAi4GnAdtV1TOS\nvBZ4BTBmUF68eHv6+xdsxu1NXqczMC39zBXWo5f1GGYtelmPXtajl/XoNZ/rYVBud1VVDSW5Gbiu\nqu5JcivdGdidklxOdwa5M+Ka1eO0twbYO8lrgA10Z543xxXNmG4Cdhyx/2PA+VV1zYh9lzSvG8/d\ni244pqp+meT3wK+BXZL0AQuBHyb5M7pB+Xi6QXlkO/uMN7g1a9Ztxq1NXqczwODg2mnpay6wHr2s\nxzBr0ct63Jv1GObno9d8qMd4XwR8mK/d+jG2H0E3NC6tqmXA70ccu3uc9g4HdqI7S/0/pjCOoRHb\nC8cYU9+I7ZuAlydZNM65Q6OuWUQ3vP8H8Ezgh8C36M5YP7iqfjZBn5IkSdskg/LUPAH4eVX9IcnB\nwIJRoXS0jfVdAvykqjYAh9ANp5NxO7BzkgXAkyZx/luB84Hl45zzbeAA+ON65g1V9VtgFXAicAXd\noHw48L1JjlOSJGmbY1Cemq8Dj0myCngU3XXGHx3n/GuSrAb+BXhukm8AdwI3JTl5Ev19mO7Dgecy\n+dD6NuCZSfYa4/jZdAP+xc320c3+VXRny6+oqpuAP6dZoiFJkjQf9Q0NDU18ljQFg4Nrp+VDNR/W\nTU2F9ehlPYZZi17Wo5f16GU9es2HenQ6A2MuKfVhvhmW5IkM/+LESF+oqvFmqyVJkrQVGZRnWFWt\nBpbN9DgkSZLUyzXKkiRJUguDsiRJktTCoCxJkiS1MChLkiRJLQzKkiRJUguDsiRJktTCoCxJkiS1\nMChLkiRJLQzKkiTNYytWrJjpIUizlkFZkiRJamFQliRJkloYlDdDkiOTvGemxwGQ5LaZHoMkSdK2\nxKAsSZIkteif6QFsC5IcD7y4efulqnpnkj2BjwB/ADYALwQeAHwauAHYE7imqo4ap93bqmpJs30O\n8GFgGbAjEOBRwAlV9ZUR1/wlcDrw18C/A18CngL8Fng2MACcCfwJsBB4PXAI8N2q+kKSjwHrq+rY\nJC8B/gw4APg34GnAEuC5VfWzTa2XJEnSXGBQ3nyPBA4E9m7er25C7YOA46rqmiT/ALwUuADYCzgM\n+BVwU5I/qarfTrHPXarqWUkOAl4LfAUgyRLgY8CLquqOJLsCn6mqk5J8C9gDOBj4VhPmnwC8H/hH\n4FnAF4AHA31NP08B/pluUL69qg5M8g66wfoDYw1u8eLt6e9fMMVb2jSdzsC09DNXWI9e1mOYtehl\nPXpZj17Wo9d8rodBefM9HvhqVa0HSHIZ3dniHwHvTLI98BDgc835P6qqW5pzf0l3dniqQfnS5vWm\n5nroLqP5AvCuEbO9t1fVdaPOfQLwNoCquirJo4HLgbcmWQzcDixsxv1XwBua6y8Z0c4DxxvcmjXr\npng7m6bTGWBwcO209DUXWI9e1mOYtehlPe7Negzz89FrPtRjvC8CrlHefEMMz8ACLKK71OI04LSq\nWgp8fMTx9aOu72NyFo7RxsbrHwBcR3eGeby+Ro93QVXdCdxDd1nHt4Dv0J0lv6Oqfj9On5IkSdss\ng/LmuwbYN0l/kn5gn2bfEuCGJNvRXdawaBPaHkqyfTO7+/gJzv1tVf1P4OYkrx7nvG/TXUpBkicB\n1zf7rwT+FriCblg+DvjmJoxZkiRpm+DSi813I3AxsIruF48zquqnST5E90G6G4AP0X0Q7wtTbPuj\ndAPs9+nO8k7GCcAVSS4c4/hpwKeSXNSM92+b/auAY+nOSi8ClgL/MMXxSpIkbTP6hoaGZnoM2sYM\nDq6dlg/VfFg3NRXWo5f1GGYtelmPXqef/j5e97oTZ3oYs4afj17zoR6dzsCYS0qdUZ5hSQ4G2v4X\n6rSqOm+6xyNJml+WL1++zQchaVMZlGdYVZ0PnD/T45AkSVIvH+aTJEmSWhiUJUmSpBYGZUmSJKmF\nQVmSJElqYVCWJEmSWhiUJUmSpBYGZUmSJKmFQVmSJElqYVCWJEmSWhiUJUmax1asWDHTQ5BmLYOy\nJEmS1GJeB+Uky5Kcs4Xb/ECSR27JNifZ741JdpjufiVJkrZV/TM9gG1NVZ0w02OQJEnS5jMoww5J\n/jewJ/BF4DzgI8AGYC1wBLAHcGxVHQqQ5LaqWpLkFcCxwN3AtVX1t0lWNvsOBXYEAjwKOKGqvpLk\nTcBLgB8DC4H3VtXKtoEluRHYvaruSPIe4Prm0H5Ap2n73VX1yRHX7NLcw3OBS4CPN9vbAU8Hfgd8\nAti12Xcy8DDggVX1ziT/L7BvVT03yb7Aa4A+4JfAXs25L62qq6dYZ0mSpDnFoAy7AX9OdxnKT4Bl\nwBur6sokJwHHAxePce1JwLOr6udJXpnkfqOO71JVz0pyEPDaJFfSDdF/BjwA+E/gvZsw5scBTwYe\nA5wNbAzK9wU+C7y6qm5O0g/8sKreneRs4MCm399V1dIkDwFWAs8G3tW0sRfdYAzwlObenwZsV1XP\nSPJa4BXAmEF58eLt6e9fsAm3NXWdzsC09DNXWI9e1mOYtehlPXpZj17Wo9d8rodBGa6uqnUASfqA\n3arqyubYxcByxg7KZwHnNTPSZ1XVXUlGHr+0eb2J7uzyo4HvVtVdwF1JVm/imK+oqnuSbGx3o48B\n51fVNSP2XTJqDHvRDcdU1S+T/B74NbBLc/8LgR8m+TO6Qfl4ukF5ZDv7jDe4NWvWbeJtTU2nM8Dg\n4Npp6WsusB69rMcwa9HLetyb9Rjm56PXfKjHeF8E5vXDfI314xxbRHcJxtCo/QsBqurtwCF063hR\nkgeO03Zf82fDiH2j2x1t5PGF47S70U3Ay5MsGufcoVHXbLzH/wCeCfwQ+BbdGesHV9XPJuhTkiRp\nm2RQvrfrm7W5AEuBq4DbgZ0BkuwBDCS5T5K3ATdX1fuAK4CHT9D2jcDuSRYm6QBPmOD824GdkywA\nnjSJsb8VOJ/uLPhYvg0cAH9cz7yhqn4LrAJOpHsf3wIOB743iT4lSZK2SQble3s9cGqSi4C9gQ8C\n1wJ3Jrl3YsedAAAgAElEQVQceDlwY1VtfNjviiTfoDtT++/jNVxVtwKfB1YDpzWv94xzyYeBC4Bz\nmXxofRvwzCR7jXH8bGBBkoub7aOb/avoLrG4oqpuortue+Uk+5QkSdrm9A0NTfSv/9qSkhxJNyyv\nB74LPKMJptuMwcG10/Khmg/rpqbCevSyHsOsRS/r0ev009/H61534kwPY9bw89FrPtSj0xkYc0mp\nD/NNvwcDVwK/Bz4HPKR5GHC0L1TVR6d1ZJKkeWf58uXbfBCSNpVBeZpV1TuAd4zavWwGhiJJkqRx\nuEZZkiRJamFQliRJkloYlCVJkqQWBmVJkiSphUFZkiRJamFQliRJkloYlCVJkqQWBmVJkiSphUFZ\nkiRJamFQliRpHluxYsVMD0GatQzKkiRJUguD8jRLsizJOVu4zQ8keeSWbFOSJGm+65/pAWjzVdUJ\nMz0GSZKkbY1BeWbskOR/A3sCXwTOAz4CbADWAkcAewDHVtWhAEluq6olSV4BHAvcDVxbVX+bZGWz\n71BgRyDAo4ATquorSd4EvAT4MbAQeG9VrWwbWJIfAR8HngtsBzwd+B3wCWDXZt/JVfW1LVoRSZKk\nWcalFzNjN+A1wL7AccBpwBurahmwCjh+nGtPAl5QVfsBVyW536jju1TVs5o2jk6yE90QvS9wDLB0\ngrH1Az+sqqcCPwEOpBuyf1dVS4FDgA9P9kYlSZLmKmeUZ8bVVbUOIEkfsFtVXdkcuxhY3ry2OQs4\nr5mRPquq7koy8vilzetNdGeXHw18t6ruAu5KsnoS47tkVBt7ASsBquqXSX6fZKeq+k3bxYsXb09/\n/4JJdLP5Op2BaelnrrAevazHMGvRy3r0sh69rEev+VwPg/LMWD/OsUV0l2AMjdq/EKCq3p7kc3SX\nWVyU5KnjtN3X/NkwYt/odicaX19zTV/LGFutWbNuEl1svk5ngMHBtdPS11xgPXpZj2HWopf1uDfr\nMczPR6/5UI/xvgi49GJ2uD7Jvs32UuAq4HZgZ4AkewADSe6T5G3AzVX1PuAK4OETtH0jsHuShUk6\nwBM2YXzfBg5oxrILsKGqfrsJ7UiSJM0ZzijPDq8HPpJkCFgDvBK4A7gzyeXAZcCNVbUhyVrgiiT/\nRffhvH8fr+GqujXJ54HVwA+a13umOL6zgWVJLqY7m3z0FK+XJEmacwzK06z5tYmVI94vaTYPaDn9\nr0dsv7E5/x3AO0adt6x5vX5Eu9eP2P8fwCl0l1R8l+5DemON7xEjtk8aceiosa6RJEnaFhmU54cH\nA1cCvwc+BzykeRhwtC9U1UendWSSpBm1fPnybX4NqrSpDMrzwASz0JIkSWrhw3ySJElSC4OyJEmS\n1MKgLEmSJLUwKEuSJEktDMqSJElSC4OyJEmS1MKgLEmSJLUwKEuSJEktDMqSJElSC4OyJEmS1MKg\nLEmSJLUwKI8hyUFJjhnj2JlJnjPdY5qKJI9IctVWaPfYJKds6XYlSZJmm/6ZHsBsVVUXzvQYJEmS\nNHMMymNIciSwO/Bz4MXN7i9V1Tub7ecmOQHoAK+sqqvHaOcU4Laq+nCS3YEPV9WyJD8CvgQ8Bfgt\n8Gzg/sCngMV0/26Oq6rrktwA/H/AocCPgO8ALwT+s6pemuRM4A7gz4ElwCuBNSPGsAw4FfgDcBPw\nN8A3gcOr6oYkDwX+FXgi8AlgV2AhcHJVXZTkQOADwC3AzcCPp1xQSZKkOcalF+N7JHAksH/z57Ak\nj2qODVXV04G3NH+malfgM1W1L91gvAdwAnBhVR0IHAO8tzl3AXA1sDfdYH1jVT0R2D/JnzTn9Dfj\n+Xvg5FF9fQw4rKqW0g3QhwOfBQ5rjh8MnNXsv7mqDgCeTzccA7wdeFlV/Xe6QVySJGmb54zy+B4P\nfLWq1gMkuQzYszl2cfO6GnjHJrR9e1Vd12zfBOwIPBnoJHlZs3/7EeevrqqhJLcC1zT7ftVcB/D1\n5vUKYOOsN0l2ohvqfz5i3EuBFcBX6c40Pwd4NfBWuuF7v+bc+yVZBDyiqq5t9q0C7jfejS1evD39\n/Qsmuv8totMZmJZ+5grr0ct6DLMWvaxHL+vRy3r0ms/1MCiPbwjoG/F+EbBhxDFattva2GjhiO31\no87rA+6mu9ziipZ21o+xvXF89xnxfvTY7nUPVfXrJDcl2Ru4T1X9IsndwNuq6qyRHSfZMOLthP8K\nsWbNuolO2SI6nQEGB9dOS19zgfXoZT2GWYte1qOX9ehlPXrNh3qM90XApRfjuwbYN0l/kn5gH4Zn\nc/dvXp8E/GCcNm4Hdm629xvnPIAr6S55IMluSU6cwlg3jmdf4Psbd1bVGmAoycOaXUuBjb+G8Vng\nI8A5I/p/XtP/g5Kc2uz/Rbr6gGVTGJMkSdKc5Yzy+G6ku1RhFd0vFWdU1U+TAJDkAmAX4OXjtHEu\n8H+SPJHuA3Tj+RBwZpJL6K5Lfv0UxnrfJF9uxvOyUcdeDXw+yXrgBuDsZv8FdB8S3BiU/xl4WpLL\nm/5Pafa/pTnnp3QfbpQkSdrm9Q0NjbdqYP5K8hpg16r6u5key0SaX704p6q+PMXrDgCOrKojtuR4\nBgfXTsuHaj78c9BUWI9e1mOYtehlPXpZj17Wo9d8qEenM9A31jFnlFsk2Rd4E3D0FK45F9hp1O7/\nqqrnbcmxbSlJVgDPAF4w02ORJEmajQzKLZqH6R414Ym91xyylYYzmb6P3IRrlgPLt/xoJEmStg0+\nzCdJkiS1MChLkiRJLQzKkiRJUguDsiRJktTCoCxJkiS1MChLkiRJLQzKkiRJUguDsiRJktTCoCxJ\nkiS1MChLkiRJLQzKkiRJUguDsiRJktTCoDxHJTkyyXumsb8XJrkjye7T1ackSdJMMihrQkmWAs8E\nrpvpsUiSJE2X/pkegDZPkuOBFzdvv1RV70yyJ/AR4A/ABuCFwAOATwM3AHsC11TVUZPs5uqqWpVk\n5RYdvCRJ0izWNzQ0NNNj0CZIciTwXGBXYO9m92q6oXhX4LaquibJPwCDwAXA9cCjgV8BNwG7VdVv\np9DnSuDYqrp+vPPWr79nqL9/wZTuR5IkaYb0jXXAGeW57fHAV6tqPUCSy+jOFv8IeGeS7YGHAJ9r\nzv9RVd3SnPtLYEdg0kF5stasWbelm2zV6QwwOLh2WvqaC6xHL+sxzFr0sh69rEcv69FrPtSj0xkY\n85hrlOe2IXq/BS2iu9TiNOC0qloKfHzE8fWjrm/9BpXkkUlWNn/22pIDliRJmiucUZ7brgH2TbLx\n73Ef4FRgCXBDku2AZwHfmkqjVfUTYNkWHKckSdKc44zy3HYj8AlgFXAJcEZV/RT4EPAl4IvN9hF0\nl1lskiSvatYn/yXwqSSf2bxhS5IkzX4+zKctbnBw7bR8qObDuqmpsB69rMcwa9HLevSyHr2sR6/5\nUI9OZ8CH+XRvSQ4GTmw5dFpVnTfd45EkSZpNDMrzWFWdD5w/0+OQJEmajVyjLEmSJLUwKEuSJEkt\nDMqSJElSC4OyJEmS1MKgLEmSJLUwKEuSJEktDMqSJElSC4OyJEmS1MKgLEmSJLUwKEuSJEktDMqS\nJElSC4PyBJLskOTGrdj++Uku2lrtj+hnWZJzNvHaXZJcleQ9W3pckiRJs1X/TA9A7F9Vi2d6EBP4\nJ+AbwIKZHogkSdJ0MSi3SPIA4F+A+wKXNvteChwH3AN8r6pek+RK4PCquiHJQ4F/raq9xmjzccBH\ngA3AWuAI4C3ADkm+UlXPbLnm6cALquqYJIcDb66qxyXZGfg8cDDwKWAx3b/L46rquiT7A6cCfwB+\nDrx6VLtHA3tX1VGTLMkhwAuA3Sd5viRJ0pzn0ot2LwOur6r9gX9v9t0fOKiqngL8eRN8Pwsc1hw/\nGDhrnDZPA95YVcuAVcDxVfUG4L/aQnLjcuCvmu2nAL9KsmOzfTFwAnBhVR0IHAO8tzn3g8Dzqupp\nwK3ACzc2mOTJdEPvMRNWoVFVayd7riRJ0rbCGeV2u9ENswArm9ffAP+aBOAvgAfSDcZfpTt7+xxG\nzdyObrOqrmy2LwaWTzSIqlqX5PdJtgceDpwH7EM3KJ8HvBnoJHlZc8n2Sf4UeAxwbjPW+wO3Ab8A\ndm7GvE9V/WGi/jfV4sXb098/Pas0Op2BaelnrrAevazHMGvRy3r0sh69rEev+VwPg3K7PrpLJKA7\n676I7rKJPavqliRfBqiqXye5KcnewH2q6heTbH/RiPYncilwIN3lGt8Cnk13lvlNwN10l1tcsfHk\nJIuBXzQz14zYvwzYFfg6cBTwj2N1mOTjQIB/q6q3TXKcf7RmzbqpXrJJOp0BBged7N7IevSyHsOs\nRS/r0ct69LIeveZDPcb7IuDSi3YFPKHZPgAYANY3IXmX5tii5vhn6YboiX5R4vok+zbbS4GrJjmW\nVcDxwGrgWrozyuuq6m7gSuD5AEl2S3JiVa3Z+L55PS7JHk1bl9Gd9X5RkseO1WFVHV1VyzYlJEuS\nJG0rDMrtPgM8Kck36M6s3gb8W5Jv010y8S7g/UkWAhcAj2bioPx64NTmp+D2pruOeDIuA54KXNEs\nl9ih2QfwIeDRSS4BzgC+2ex/FfCpZv9+dIM/AFX1O+C1wCeTTLg+Isl/S7IS+DvgsCQrN4ZwSZKk\nbVnf0NDQTI9hTktyAHBkVR0x02OZLQYH107Lh2o+/HPQVFiPXtZjmLXoZT16WY9e1qPXfKhHpzPQ\nN9Yx1yhvhiQrgGfQ/RUJkjyM7mz0aKuqasyH9zb1us2RZBHwtZZDVVVHb40+JUmS5hKD8mZoQuzy\nEe9/BizbhHY26brN0axxntY+JUmS5hLXKEuSJEktDMqSJElSC4OyJEmS1MKgLEmSJLUwKEuSJEkt\nDMqSJElSC4OyJEmS1MKgLEmSJLUwKEuSJEktDMqSJElSC4OyJEmS1MKgLEmSJLUwKG/jkhzavD4i\nyVWb0c4Lk9yRZPctNzpJkqTZy6C87fu7zW0gyVLgmcB1mz8cSZKkuaF/pgege0tyJLAUWAI8FngL\n8BJgN+ClwJOAFzenf6mq3pnkTOCXwF7Aw5rzDgT2THIucCJwnyQfBZ4IfKeqXjPJIV1dVauSrNz8\nu5MkSZob+oaGhmZ6DBqlCcpHAfs3r8cBjweOBA6mG4T3bk5fDbwQ+Hvg11X1hiSvBf68qk5IcltV\nLUnyCOB64NHAr4CfAbtX1W+nMK6VwLFVdf14561ff89Qf/+CyTYrSZI0k/rGOuCM8ux1VVUNJbkZ\nuK6q7klyK7AHcGFVrQdIchmwZ3PNJc3rTcA+LW3+qKpuaa67BdgRmHRQnqw1a9Zt6SZbdToDDA6u\nnZa+5gLr0ct6DLMWvaxHL+vRy3r0mg/16HQGxjxmUJ691o+xvRO933wWARtazmv7drR+1PvWb1BJ\nHgl8qnn7hqr6zoSjlSRJ2sYYlOee84B9k2z8u9sHOBV4/hjnT/mBzar6CbBsk0YnSZK0jfBXL+am\nTwCr6C61OKOqfjrOudckWb05nSV5VbM++S+BTyX5zOa0J0mSNBf4MJ+2uMHBtdPyoZoP66amwnr0\nsh7DrEUv69HLevSyHr3mQz06nQEf5tO9JTmY7s/GjXZaVZ033eORJEmaTQzK81hVnQ+cP9PjkCRJ\nmo1coyxJkiS1MChLkiRJLQzKkiRJUguDsiRJktTCoCxJkiS1MChLkiRJLQzKkiRJUguDsiRJktTC\noCxJkiS1MChLkiRJLQzKkiRJUguD8hyX5AWbcM3BSRZN4fzFSS5Mcs5U+5IkSZqrDMpzWJJHAC/Z\nhEtPBCYdlIGPAZduQj+SJElzVv9MD2C+S7IQ+DTwcOB3wN8ApwC7AtsBJ1fV15L8CPg48Nxm/9OB\njwBPTHIy8E/AZ5tmFwJHVNUNSV4OvB7YALyPbkB+EvCVJAdW1d2TGOZRwF7AX27+HUuSJM0NfUND\nQzM9hnktyVHAblV1YpIXAwEeXFXHJHkIsLKq/izJjcBxVXVBkrOBs4HfAsdW1aFJ9gZ2qKqLk/wN\n8Fi6gftqYA+64frTVfW8pq3dq+qOKYxz2ca+Jjp3/fp7hvr7F0y2aUmSpJnUN9YBZ5Rn3l8B3wCo\nqrOTfBBY2bz/ZZLfJ9mpOfeS5vUmYEe6QXmjW4APJlkBLAa+A/wF8MOqugu4C3jeVr4XANasWTcd\n3dDpDDA4uHZa+poLrEcv6zHMWvSyHr2sRy/r0Ws+1KPTGRjzmGuUZ9499P49DNH7zWYR3WUTAOtH\n7B/97ecfgK9W1VOBFWO0PSlJViRZmeRDU71WkiRpW+GM8sz7NvA04ItJngP8GjgAODvJLsCGqvpt\nkrZrNzD8d7gEuCFJH92Z4wXAD4Ek2YFuyL4A+OtR191LVS3fEjcmSZI0lzmjPPPOBu6fZBVwAt0H\n+xYkubg5dvQ41/4A+Ksk76f7oN+HgK801y0FngKcDHyd7nKOM6pqqNm+NMmSiQaXZEGSlcAHgKXN\nTPPTNuE+JUmS5hQf5tMWNzi4dlo+VPNh3dRUWI9e1mOYtehlPXpZj17Wo9d8qEenM+DDfLq3JOcC\nO43a/V9VNS0P/UmSJM1mBuV5rKoOmekxSJIkzVauUZYkSZJaGJQlSZKkFgZlSZIkqYVBWZIkSWph\nUJYkSZJaGJQlSZKkFgZlSZIkqYVBWZIkSWphUJYkSZJaGJQlSZKkFgZlSZIkqYVBeYYkWZbknC3c\n5geSPHJLtjmi7aVJfpXkOVujfUmSpNmmf6YHoC2nqk7YGu0meRRwInDZ1mhfkiRpNjIoz6wdkvxv\nYE/gi8B5wEeADcBa4AhgD+DYqjoUIMltVbUkySuAY4G7gWur6m+TrGz2HQrsCAR4FHBCVX0lyZuA\nlwA/BhYC762qlZMY583AIcAnt8hdS5IkzQEuvZhZuwGvAfYFjgNOA95YVcuAVcDx41x7EvCCqtoP\nuCrJ/UYd36WqntW0cXSSneiG6H2BY4Clkx1kVa2rqnsme74kSdK2wBnlmXV1Va0DSNIH7FZVVzbH\nLgaWN69tzgLOa2akz6qqu5KMPH5p83oT3dnlRwPfraq7gLuSrN6ytzJs8eLt6e9fsLWa79HpDExL\nP3OF9ehlPYZZi17Wo5f16GU9es3nehiUZ9b6cY4torsEY2jU/oUAVfX2JJ+ju8zioiRPHaftvubP\nhhH7Rrf7R83s9Feat++uqv8zzjjvZc2adVM5fZN1OgMMDq6dlr7mAuvRy3oMsxa9rEcv69HLevSa\nD/UY74uAQXl2uT7JvlV1Bd2lEVcBtwM7AyTZAxhIch/gfwGnVNX7kuwGPHyCtm8Edk+yEPgT4Alj\nndjMOi/bzHuRJEma01yjPLu8Hjg1yUXA3sAHgWuBO5NcDrwcuLGqNj7sd0WSb9CdHf738RquqluB\nzwOr6a6FXg1Mat1xkmc3DwoeBLw9ydc24d4kSZLmlL6hoTH/BV7bmCRH0g3L64HvAs+oqpu2dD+D\ng2un5UM1H/45aCqsRy/rMcxa9LIevaxHL+vRaz7Uo9MZ6BvrmEsv5pcHA1cCvwc+BzykeRhwtC9U\n1UendWSSJEmzjEF5HqmqdwDvGLV72QwMRZIkadZzjbIkSZLUwqAsSZIktTAoS5IkSS0MypIkSVIL\ng7IkSZLUwqAsSZIktTAoS5IkSS0MypIkSVILg7IkSZLUwqAsSZIktTAoS5IkSS0MyrNQkqcmedBM\nj2OkJC9MckeS3Wd6LJIkSdPBoDw7/Q0wa4JykqXAM4HrZnoskiRJ06V/pgewLUpyJHAQ8ADgocD7\ngZ8ApwJ/AG6iG4ZfAuxeVScl2QG4Hng18HzgsUleACwFXg9sAN5XVV9I8iLgRGA98J2qOj7JKcAS\n4NHArsBbmz4eATyrqn6c5G3A/sAC4MNVddYkb+nqqlqVZOUmF0WSJGmOcUZ563kscDDwNOAfgU8A\nh1XVUmANcHjbRVX1b8C/A69szjsZeCrwDODwJlCfCjy9qvYDdk1yQHP5TlV1EPBF4IgR2wcn2R94\neFU9tRnTW5PcbzI3UlVrp3z3kiRJc5wzylvPqqpaD9yW5L+Avqr6eXPsYrozxVdP0MZfAD+sqruA\nu4DnJfkr4D+r6o7mnJXA45vt1c3rzcBQs30r8EDgycCTRswK3wfYGfjxpt3e2BYv3p7+/gVbutlW\nnc7AtPQzV1iPXtZjmLXoZT16WY9e1qPXfK6HQXnrGTlbPwRsN+L9IrpLKYZG7FvY0sY93HvWfwjo\nG9XWXc32+hH7R273AXcDn6yqt0808CSPBD7VvH1DVX1nomtGWrNm3VRO32SdzgCDg052b2Q9elmP\nYdail/XoZT16WY9e86Ee430RMChvPfsmWQAsBgaAO5M8rKp+Rnc2+VLgTrqzugD7jbh2A92/mx8C\naZZbrAcuoLt++TFJBpolEUvpLu14+gTjuRJ4T5J30g3X766q49pOrKqfAMumeL+SJEnbFNcobz03\n0l0ffBHwFroP6X2+WfqwEDgb+AbdILwS+HO6ARlgFXAO3QfxTga+TneJxRlVdSfwRuDCJJcA11TV\npRMNpqoup7vk4wrgm8CkZ4mTvKoZ418Cn0rymcleK0mSNFf1DQ0NTXyWpqT51Yvdq+qkmR7LTBgc\nXDstH6r58M9BU2E9elmPYdail/XoZT16WY9e86Eenc5A31jHXHoxjyU5mO7PzI12WlWdN93jkSRJ\nmk0MyltBVZ0502OYjKo6Hzh/pschSZI0G7lGWZIkSWphUJYkSZJaGJQlSZKkFgZlSZIkqYVBWZIk\nSWphUJYkSZJaGJQlSZKkFgZlSZIkqYVBWZIkSWphUJYkSZJaGJQlSZKkFgZlSZIkqYVBWZIkSWph\nUJ6FkuyQ5MZxjp+f5KIptnlkkvc024dO8dpdkly18XpJkqT5wKA8N+1fVU/bjOv/born/xPwjc3o\nT5Ikac7pGxoamukxCEjyAOBfgPsClwIvAV4OnAr8Afg58Grg7cDrga8DhwGfB+4PbA8cV1Wrm9no\n3avqjmYW+Pqmm92BW5s2L6iqQyY5tgHgBU2bJ010/vr19wz19y+YTNOSJEkzrW+sA/3TOQqN62XA\n9VX1P5McRjcofxA4sKp+k+RdwAur6g1JjqiqZyb5M+CMqvpSkqcBb6IbaMdUVe9O8qbJhuTmmrVJ\nJn0ja9asm/S5m6PTGWBwcO209DUXWI9e1mOYtehlPXpZj17Wo9d8qEenMzDmMYPy7LEbsKrZXgn8\nKbAEOLcJqfcHbht1za3A3yc5CdgOuHNaRipJkjQPGJRnjz5gQ7N9H+Bu4JaqWjbONScAv6iqlyd5\nArDxYbuR62kWTnUgST4OBPi3qnrbVK+XJEnaFhiUZ48CnkB3nfIBwBqAJLtV1feTHAesqqrrRlyz\nBNj4/n8Ai5rt24Gdk/wYeBJwzai+xn2Is6qO3pwbkSRJ2hb4qxezx2eAJyX5Bt3Z3CHgVcCnklwC\n7Ec3TI++5sQkXwOuBB6c5JXAh4ELgHOB77X0dU2S1ZMZVJL/lmQl3V/KOCzJyiS7TfnuJEmS5hh/\n9UJb3ODg2mn5UM2HBwymwnr0sh7DrEUv69HLevSyHr3mQz06nQF/9UK9kiwCvtZyqFx6IUmSZFCe\nt6rqbmDZTI9DkiRptnKNsiRJktTCoCxJkiS1MChLkiRJLQzKkiRJUguDsiRJktTCoCxJkiS1MChL\nkiRJLQzKkiRJUguDsiRJktTCoCxJkiS1MChLkiRJLQzK25AkByU5ptk+dIJzVybZfQptL03yqyTP\n2dxxSpIkzQX9Mz0AbTlVdeGIt38HnLMl2k3yKOBE4LIt0Z4kSdJcYFCeRZIcCSwFlgCPBd4CvATY\nDXgpcBjwROC+wMeq6owkZwJ3Aw8ELgB2B24F9kxyLvAi4NPAQ4H7A6dU1ZenOLSbgUOAT27G7UmS\nJM0pBuXZ5zHA/sBRwJuBxwNHAq8Evl9VJya5H3ADcEZzzW+q6jVN0Kaq3p3kTVV1SJIHAV+rqk8n\n2RX4IjCloFxV6wCSTOr8xYu3p79/wVS62GSdzsC09DNXWI9e1mOYtehlPXpZj17Wo9d8rodBefa5\nqqqGktwMXFdV9yS5FdgO2CnJ5XRnkDsjrlk9TntrgL2TvAbYQHfmeatas2bd1u4C6P6HOzi4dlr6\nmgusRy/rMcxa9LIevaxHL+vRaz7UY7wvAgbl2Wf9GNuPAB4FLK2qPyS5Y8Sxu8dp73BgJ7qz1DsB\nV000gGbG+ivN23dX1f+ZxLglSZK2KQblueMJwPlNSD4YWJBk0Tjnb/xFkyXAT6pqQ5JDgPGuAaCq\n7gKWbe6AJUmS5jJ/Hm7u+DrwmCSr6M4sfxn46DjnX5NkNfAvwHOTfAO4E7gpyclT6TjJs5OsBA4C\n3p7ka5tyA5IkSXNJ39DQ0EyPQduYwcG10/Khmg/rpqbCevSyHsOsRS/r0ct69LIeveZDPTqdgb6x\njrn0Yh5L8kTgXS2HvlBV481WS5IkbfMMyvNYVa3GtciSJEmtXKMsSZIktTAoS5IkSS0MypIkSVIL\ng7IkSZLUwqAsSZIktTAoS5IkSS0MypIkSVILg7IkSZLUwqAsSZIktTAoS5IkSS0MypIkSVILg/IM\nSHJsklO2UFuHNq8HJTlmS7TZ0sfiJBcmOWdrtC9JkjQb9c/0ALTpkiwCTgTOqaoLt2JXHwMuBf5y\nK/YhSZI0qxiUt4IkC4BPALsCC4GTgT7gA8AtwM3Aj5MsA46tqo2zwrdV1ZIkjwdOBzYAl1fVG5M8\nHfhfwN3AGuBFwPuBxyU5HVgN7F5VJyU5HnhxM5wvVdU7k5wJ/BLYC3gY8NKqunqSt3RUc51BWZIk\nzRsG5a3jcODmqnpVkiXARcDvgJdV1bVJ/i/w43Gu/yBwdFVdl+QzSR4OLAYOr6qfJPkM8Azg3cA+\nVfW6JEcCJHkkcCSwd9PW6hFLJrarqmckeS3wCmBSQbmq1iaZ9M0vXrw9/f0LJn3+5uh0Bqaln7nC\neqeAhq4AACAASURBVPSyHsOsRS/r0ct69LIeveZzPQzKW8eTgf2T7Ne8vx/w0Kq6tnm/qtk3llTV\ndQBV9Qr4YwA+I0k/3Znqi8a49vHAt6pqfXPdZcCezbFLmtebgH2mfFeTtGbNuq3VdI9OZ4DBwbXT\n0tdcYD16WY9h1qKX9ehlPXpZj17zoR7jfREwKG8ddwNvq6qzNu5IcsuI4xsfohwadd3C5nVDS5v/\nBDy7qn6Q5MPj9D1Ed5nHRotGtLd+xP6R5/RIsgJYCny3qo4bpy9JkqRtlkF567gSeB5wVpIHAScA\nv0h3/cJ/AMuAK4DbgZ0BkuwBbPxK8/0k+1TVlUk+CbwH2BH4WZI/AQ4ArqMbgEf/HV4DnNLMPEN3\n5vhU4PmTHXxVLZ/a7UqSJG17/Hm4reOfgTuSXA5cQHfJw1uAc5r3P2/Ouxa4sznv5cCNzf7jgfcm\nuRRYU1U/AD4CXEb3IcF3AW+mO3u8KMkXN3ZcVTc256xq+j2jqn66qTeSZMH/z969R1lWVvfe/7Zd\ntIJ2sJHCaFQUYn5REYLKpQXkeiIxKAZRCSo2r0YCAWEQPF7IsdEElBjxBm1CMKLREBURxVcBI9Ai\nIEhADEcyjRcUFLQwHWhEbZuu88daZe1dvar6QnVdur6fMWrsvdd61vPMNdljMPdTc1cnuYrmi4j7\nJrkqyQEbO58kSdJsMW94eOxv/6WHZmho5ZS8qeZC39SGMB/9zMcoc9HPfPQzH/3MR7+5kI/BwYXj\ntqPaejGHJbkI2GbM4Xur6tDpiEeSJGkmsVCew6rqsOmOQZIkaaayR1mSJEnqYKEsSZIkdbBQliRJ\nkjpYKEuSJEkdLJQlSZKkDhbKkiRJUgcLZUmSJKmDhbIkSZLUwUJZkiRJ6mChLEmSJHWwUJYkSZI6\nWChvRpIcnOTYcc6dn+SQjZx3UZJLk1z40CKUJEmaPQamOwBNnqq6dBNN/ffAV4E/2ETzS5IkzTgW\nypuRJEuAnYA7gCPawxdX1Znt8xcmOQkYBI6uqpvWc+rXAs/GQlmSJM0hFsqbn6cABwK7ta9v6GmZ\nGK6qg9oWjFOBl6zPhFW1Msl6B7Bo0VYMDMzfgJA33uDgwilZZ7YwH/3Mxyhz0c989DMf/cxHv7mc\nDwvlzc+uwGVVtRogyTXALu25K9vHG4B3bqoAVqx4YFNN3WdwcCFDQyunZK3ZwHz0Mx+jzEU/89HP\nfPQzH/3mQj4m+iBgobz5GQbm9bxeAKzpOUfH8z5J3gbsC/xHVZ0w6RFKkiTNAhbKm5+bgcVJRv7b\n7gGcAbwY2Af4JLAncNt4E1TV0k0dpCRJ0kxnobz5uZ2mxWI5zZ//O6+qfjDSY5zkEuCJwKvWZ7Ik\n84EvA48GfifJVcDbq+qKSY9ckiRpBrFQ3rwsAFZX1TnAOb0nqmrJxkxYVQ8C+z3kyCRJkmYZC+XN\nRJLFwBuBYzbgmouAbcYcvreqDp3M2CRJkmYjC+XNRFVdB+y4gdcctonCkSRJmvX8J6wlSZKkDhbK\nkiRJUgcLZUmSJKmDhbIkSZLUwUJZkiRJ6mChLEmSJHWwUJYkSZI6WChLkiRJHSyUJUmSpA4WypIk\nSVIHC2VJkiSpg4WyJEmS1GHOFspJjk9y2iTNdXj7eHCSYydjzg1c/7Qkx0/1upIkSZuzgekOYLZL\nsgA4Gbiwqi6d7ngkSZI0OTbbQjnJfOBcYAdgC+CtwDzgvcDdwF3A95LsBxxfVSO7wvdU1bZJdgWW\nAWuAa6vqDUkOAv4aWAWsAF4GvAd4ZpJlwA3ATlV1SpITgSPacC6uqjOTnA/8GHg28CTgFVV10zjx\nnwbcU1VnJ9kJOLuq9kvyHeBiYC/gf4A/HnPdx4FLgR2BrYG0z0+qqi8meRlNYb8a+HfgzcB1VbVL\nkscDdwC/XVVDSW4B/jfwZ20enkbzgeBt6/9fQpIkaXbabAtl4Ejgrqp6TZJtgSuAXwKvrKpbknwB\n+N4E178fOKaqvpnko0m2BxYBR1bV95N8FHg+8C5gj6o6LskSgCRPAZYAu7Vz3ZDkwvb5w6vq+Un+\nHDgK6CyUJ7AD8NG2GP8asPPIiSSnAD+oqn9uC+0nVtULkhwM/HmSq4EzgD+oqvuTXALsAdyX5NE0\nxfdXgD3bue8BfgXsDvw+TavO7cCEhfKiRVsxMDB/A29r4wwOLpySdWYL89HPfIwyF/3MRz/z0c98\n9JvL+dicC+XnAvsk2bt9vSXwhKq6pX29vD02nlTVNwGq6ij4TQF8XpIBmoL1inGu3RX4WlWtbq+7\nBtilPXd1+3gnTZG6oe4biaudY+v2+YE0u9TP6Rn71THjfg/4r6q6vz1+VRvr1W0sewHvAxbTFMXL\n23E3VdUD7b2sM8AVKx7Y0HvaKIODCxkaWjkla80G5qOf+RhlLvqZj37mo5/56DcX8jHRB4HN+ct8\nq4DTq2q/9uep7bERI/c+POa6LdrHNR1z/hNNm8a+wGcnWHuYps1jxIKe+Vb3HO8d0zXH2JjGXt87\nx7Y0O+Z7jzN23gRxXQXsCTwV+BzwDJqi+cpx1pQkSdrsbc6F8vXAoQBJtktyBvCjNOYB+7Xj7gMe\n147bGRj5WPGtJHu0xz+U5Gk0u7I/bNsU9me00By7M38zsDjJQLv7vEd7bEP8Ji76i9/xfAJ4DbAs\nyXg75d8Gnppk5B73BW4Erm3X+GVVraEpqJ9Fk0NJkqQ5aXMulD8J3J/kWuASmvaCU4EL29d3tONu\nAX7ejnsVTQ8uwInAu5N8FVhRVbcB5wDX0HxJ8G9pvgg3DCxI8qmRhavq9nbM8nbd86rqBxsY/0XA\noUm+BDx6fS6oqv8EPk7Th9x1/ufAG4BL237lm6vqq20rxiOBr7dDbwXWVNWqrnkkSZLmgnnDw2M7\nD6SHZmho5ZS8qeZC39SGMB/9zMcoc9HPfPQzH/3MR7+5kI/BwYXjtsJuzl/mmxWSXARsM+bwvVV1\n6HTEI0mSpIaF8jSrqsOmOwZJkiStbXPuUZYkSZI2moWyJEmS1MFCWZIkSepgoSxJkiR1sFCWJEmS\nOlgoS5IkSR0slCVJkqQOFsqSJElSBwtlSZIkqYOFsiRJktTBQnkTSrJfkgsnec73JnnKZM4pSZKk\ntQ1MdwDaMFV10nTHIEmSNBdYKG96j0ryMWAX4FPAZ4BzgDXASuDVwM7A8VV1OECSe6pq2yRHAccD\nq4BbquovklzVHjsc2BoIsCNwUlV9MckbgT8FvgdsAby7qq4aG1SSPwKOrKpXta//EbgEWAGcAfwa\nuAP4M2BL4JPAw9ufv6iqmyYzSZIkSTONrReb3tOB1wGLgROA9wFvqKr9gOXAiRNcewrwkqraG7gx\nyZZjzj+xql7QznFMkm1oiujFwLHAvhPMfTmwR5JHJHkYsBdwKfB+4NCqOgD4CfBS4EDgzjbmVwDb\nree9S5IkzVruKG96N1XVAwBJ5gFPr6rr23NXAkvbxy4XAJ9pd6QvqKpfJOk9/9X28U6a3eXfBf6j\nqn4B/CLJDeMFVVUPJvk88ALgLuBqYBHwVOCidp1HAvcA/wz8TZK/By6qqksnuuFFi7ZiYGD+REMm\nzeDgwilZZ7YwH/3Mxyhz0c989DMf/cxHv7mcDwvlTW/1BOcW0LRgDI85vgVAVb0jycdp2iyuSPK8\nCeae1/6s6Tk2dt6xPgq8Ebgd+BeaFo8ftTvHfZLsAuwPHJtkz6p6+3iTrljxwDqWnRyDgwsZGlo5\nJWvNBuajn/kYZS76mY9+5qOf+eg3F/Ix0QcBWy+m3q1JFrfP9wVuBO4DHgeQZGdgYZKHJTkduKuq\nzgKuA7Zfx9y3Azsl2SLJIPCciQZX1TeA3wF2B75SVSvaGJ7ePp6QZOckBwEHVdXlNO0jE84rSZK0\nOXBHeeq9HjgnyTDNF+eOBu4Hfp7kWuAa4PaqWpNkJXBdkntpvpz3jYkmrqqfJPkX4AbgtvbxwXXE\nczmwsKpGdp9fA3w4ySrgx8C5NIX8x9ovCq6haReRJEnarM0bHl7Xb+c1myRZQtNGsRr4D+D5VXXn\nOGPnAV8C/ryqvjNZMQwNrZySN9Vc+HXQhjAf/czHKHPRz3z0Mx/9zEe/uZCPwcGF88Y7547y5ue3\ngeuBXwEfBx7ffhlwrE8ArwU+OZlFsiRJ0ubCQnkzU1XvBN455vB+4wz/4KaNRpIkafbyy3ySJElS\nBwtlSZIkqYOFsiRJktTBQlmSJEnqYKEsSZIkdbBQliRJkjpYKEuSJEkdLJQlSZKkDhbKkiRJUgcL\nZUmSJKmDhbIkSXPUsmVnTXcI0oxmoSxJkiR1sFCWJEmSOlgobyJJDk5ybPv88HWMvSrJTus5798l\nWdI7/1RKcnyS06Z6XUmSpKk2MN0BbK6q6tKel28CLtyE80uSJGmSWSiPI8kSYF9gW+AZwKnAnwJP\nB14BvBzYHXgE8PdVdV6S84FVwGOAS4CdgJ8AuyS5CHgZ8BHgCcAjgdOq6vPrEcsrgTcCdwK/AG5t\n49sJmA/cXFUfbcd+G9gTeBVwRDvFxVV15pj4jmhj2R74JXAUcDdwLrADsAXw1qq6IsmBwHvb83cB\n35so3kWLtmJgYP66bmtSDA4unJJ1Zgvz0c98jDIX/cxHP/PRz3z0m8v5sFCe2FOBfYDXAm8GdgWW\nAEcD36qqk5NsCXwXOK+95r+r6nVtIUtVvSvJG6vqsCTbAZdX1UeS7AB8CpiwUE4yDzgDeA6wAvj3\nMUMuAl4PfDTJzsDtwNZtnLu1Y25IMrKjPRLfa4G7q+rIJEcALwLuB+6qqtck2Ra4AtgZeAfwyqq6\nJckXWEehvGLFAxOdnjSDgwsZGlo5JWvNBuajn/kYZS76mY+1mY9Rvj/6zYV8TPRBwB7lid1YVcM0\nu6jfrKoHaXaIHw5sk+Ra4IvAYM81N0ww3wpgtyTX0OzmPmY9YngMsLKqflpVvwauGXP+Gpod6wXA\noTQtHrsCX6uq1VW1emTMmPieNTJXVf1rVX0QeC7w4iRXtfNs2c775Kq6pb1u+XrELEmSNOu5ozyx\n1eM8fzKwI7BvVf06yf0951ZNMN+RwDY0u9TbADeuRwzzgDU9r/s+3FTVmiRX0rSJ/DHwQmDv9roR\nC3rmGInvwbFztedOr6oLeg8mGXd9SZKkzZVFz8Z5DnBHWyS/CJjf7ryOZyTP2wLfr6o1wGE0Bey6\n/AzYOsmjk2wB7NUx5iKaHuOfV9UQcDOwOMlAkgFgj/ZYr68DBwAkOSTJW4DraXalSbJdkjPasT9K\nYx6w33rELEmSNOtZKG+cfwOemmQ5zc7y54EPTjD+5iQ3AJ8GXpjky8DPgTuTvHWihdqi+jSalocL\ngVs7hl0B/FE7P1V1O82X8pYDVwPnVdUPxlzzr8Aj23s4iaYV5JPA/W1LySXttdB8kfHC9tgdE8Ur\nSZK0uZg3PDw83TFoMzM0tHJK3lRz4QsGG8J89DMfo8xFP/PRz3z0Mx/95kI+BgcXzhvvnD3KM0SS\n3YG/7Tj1ifaLdpIkSZpCFsozRFXdgP2/kiRJM4Y9ypIkSVIHC2VJkiSpg4WyJEmS1MFCWZIkSepg\noSxJkiR1sFCWJEmSOlgoS5IkSR0slCVJkqQOFsqSJM1Ry5adNd0hSDOahbIkSZLUYbMqlJMcn+S0\nSZrr8Pbx4CTHTtKcS5L8Xcfxf02y5QTX3TNJ65+f5JCHcP2Tk9w4GbFIkiTNdAPTHcBMlGQBcDJw\nYVVduqnXq6ojNvUakiRJ2jCzqlBOMh84F9gB2AJ4KzAPeC9wN3AX8L0k+wHHV9XIrvA9VbVtkl2B\nZcAa4NqqekOSg4C/BlYBK4CXAe8BnplkGXADsFNVnZLkRGCkqL24qs5Mcj7wY+DZwJOAV1TVTRPc\nxuOTfBp4OvCuqvqnJLcDO7X39RHgf4AbgcGqWtLew9uBPwR+Brywqtb05OUo4Pj2Hm6pqr/outd2\n+P5Jju+J9eZx7usJwD8BC9o5XgMMT3BfkiRJm5XZ1npxJHBXVe0PvJimQH4H8Mqq+l/Atuu4/v3A\nMVW1F/DYJNsDi4Ajq2pf4D7g+cC7gKqq40YuTPIUYAmwT/vz8iQ7tqcfXlXPB94HHLWOGHagKcZf\nDLx+zLmlwNvb+9u+5/g2NLvbe7bPdx5z3SnAS6pqb+DGto2j614Bhqvq4DbWV09wX28HPlRV+9EU\n3Ket474kSZI2K7NqRxl4LrBPkr3b11sCT6iqW9rXy9tj40lVfROgqo6C3xTA5yUZoClirxjn2l2B\nr1XV6va6a4Bd2nNXt493Anus4x6+VlUPJvkRsPWYc08Drmmffw44qH1+30jcQNd1FwCfSfIx4IKq\n+kWSrnsF+GrPPHtOcF/PAd7cjr2SZvd+vSxatBUDA/PXd/hDMji4cErWmS3MRz/zMcpc9DMf/cxH\nP/PRby7nY7YVyquA06vqgpEDSe7uOT+yQz62RWCL9nENa/sn4I+r6rYkZ0+w9jBNm8eIkZYEgNU9\nx3vHdJlo7LyeOXvvYXXHuN+oqnck+ThwOHBFkufRfa9d6493X73He+91nVaseGB9hz4kg4MLGRpa\nOSVrzQbmo5/5GGUu+pmPtZmPUb4/+s2FfEz0QWC2tV5cDxwKkGS7JGcAP0pjHrBfO+4+4HHtuJ2B\nkQx8K8ke7fEPJXkaze7sD5M8Gtif0aJw7IeIm4HFSQba3ec92mOT6bs0O7kAf7Q+FyR5WJLTaVpS\nzgKuo2nb6LrXLuPd19dp8gGwL03PtCRJ0pwx2wrlTwL3J7kWuISm5eFU4ML29R3tuFuAn7fjXgXc\n3h4/EXh3kq8CK6rqNuAcmnaHc4G/pWk3GAYWJPnUyMJVdXs7Znm77nlV9YNJvr+/Af4uyWXAT4EH\nxxuY5A+SvK39Ut9K4LokX25j/8Y497qWCe7rrcBRSa6g6WFeOjm3KEmSNDvMGx72DxnMFEn2BB6o\nqm8meTMwr6rOmO64NtTQ0MopeVPNhV8HbQjz0c98jDIX/czHqGXLzmLp0qXmo4fvj35zIR+DgwvH\nbZudbT3Ks0KSi2j+OkWve6vq0HVc+ivgQ0l+ATxA81c+JEnaJI477uTpDkGa0SyUN4GqOmwjr7sZ\n2G2Sw5EkSdJGmG09ypIkSdKUsFCWJEmSOlgoS5IkSR0slCVJkqQOFsqSJElSBwtlSZIkqYOFsiRJ\nktTBQlmSJEnqYKEsSZIkdbBQliRJkjpYKEuSNEctW3bWdIcgzWgWyptAkoOTHDvOufOTHLIJ1jwt\nyfGTPa8kSdJcNTDdAWyOqurS6Y5BkiRJD42F8iaQZAmwE3AHcER7+OKqOrN9/sIkJwGDwNFVddM4\n85wG3FNVZyfZCTi7qvZL8h3gYmAv4H+APx5z3ceBS4Edga2BtM9PqqovJnkZcDKwGvh34M3AdVW1\nS5LHt3H/dlUNJbkF+N/AnwFrgKcBF1bV2x5SkiRJkmY4Wy82nacAS4B92p+XJ9mxPTdcVQcBp7Y/\nG2oH4KNVtRhYBOw8ciLJKcAPquqf20NPrKoXACcCxyR5FHAGcFBV7d3OtQdwX5JH0xTfXwH2TDII\n3AP8Cti9vZ/FwAkbEbMkSdKs4o7yprMrcFlVrQZIcg2wS3vuyvbxBuCdGzH3fVX1zfb5nTS7xgAH\nAk8CntMz9qtjxv0e8F9VdX97/Ko21qtpCua9gPfRFMQPA5a3426qqgfae5kwuEWLtmJgYP5G3NaG\nGxxcOCXrzBbmo5/5GGUu+pmPfuajn/noN5fzYaG86QwD83peL6BpXRg5R8fzrjlGbNHzfPWYcSPr\nbAv8EtibpvAdO3beOHH9gqZgXgw8laYt42ia98clwPyONce1YsUD6zv0IRkcXMjQ0MopWWs2MB/9\nzMcoc9HPfKzNfIzy/dFvLuRjog8Ctl5sOjcDi5MMJBmg2a29uT23T/u4J3DbBHPcBzyufb73eqz5\nCeA1wLIkW44z5tvAU5OMvCv2BW4Erm3X+GVVraEpqJ8FXL8e60qSJG12LJQ3nduBc2laF64Gzquq\nH4ycTHIJ8HbgryeY4yLg0CRfAh69PotW1X8CH6fpQ+46/3PgDcClSa4Gbq6qr7atGI8Evt4OvRVY\nU1Wr1mddSZKkzc284eGJfvOvjZHkdcAOVfWm6Y5lOgwNrZySN9Vc+HXQhjAf/czHKHPRz3yMWrbs\nLJYuXWo+evj+6DcX8jE4uHDeeOfsUZ5kSRYDbwSO2YBrLgK2GXP43qo6dDJjkyRJ0vqzUJ5kVXUd\nzd8s3pBrDttE4UiSNK7jjjt5ukOQZjR7lCVJkqQOFsqSJElSBwtlSZIkqYOFsiRJktTBQlmSJEnq\nYKEsSZIkdbBQliRJkjpYKEuSJEkdLJQlSZKkDhbKkiRJUgcLZUmS5qhly86a7hCkGc1CWZIkSepg\noSxJkiR1sFCeIkkOTnJs+/zwdYy9KslOUxMZJHlTksXrOfb4JKdt4pAkSZKm3cB0BzBXVNWlPS/f\nBFw4XbGMVVXvnO4YJEmSZhoL5fWUZAmwL7At8AzgVOBPgacDrwBeDuwOPAL4+6o6L8n5wCrgMcAl\nwE7AT4BdklwEvAz4CPAE4JHAaVX1+fWI5bvAPwKHA98B/h14KfBfVfWKJLsA5wC/Bta0534L+Bhw\nP3A28B7gC8BPgafSFO5fBM4FdgC2AN5aVVckORB4L3A3cBfwvYniW7RoKwYG5q/rNibF4ODCKVln\ntjAf/czHKHPRz3z0Mx/9zEe/uZwPC+UN81RgH+C1wJuBXYElwNHAt6rq5CRbAt8Fzmuv+e+qel1b\naFNV70ryxqo6LMl2wOVV9ZEkOwCfAtZZKAPzgZuAM4EfAp+uqt2T/DDJo4HtgBOq6uYkb6cp5C9p\n431SVf0sydnAF6vq0ragBzgSuKuqXpNkW+AKYGfgHcArq+qWJF9gHYXyihUPrMctPHSDgwsZGlo5\nJWvNBuajn/kYZS76mY+1mY9Rvj/6zYV8TPRBwB7lDXNjVQ3T7Kp+s6oepNkhfjiwTZJraXZlB3uu\nuWGC+VYAuyW5hmZn+TEbEMsNbSw/AW5uj/0U2Lo9dkaS5TS73iPzfreqfjZBbM8FXpzkKpod5i2T\nLACeXFW3tGOWb0CMkiRJs5Y7yhtm9TjPnwzsCOxbVb9Ocn/PuVUTzHcksA3NLvU2wI2TEMs84H3A\nme1u8SnAo8aJpev16VV1Qe/BJGt6XvrhSpIkzQkWPZPjOcAdbZH8ImB+uxM7npG8bwt8v6rWAIcB\nE12zIbYFvpvk4cALNmDe64FDAZJsl+SM9viP0pgH7DdJMUqSJM1oFsqT49+Ap7atDjvS9Bl/cILx\nNye5Afg08MIkXwZ+DtyZ5K2TEM8HgItpep4/ALyapiVjXT4J3N+2kFwCXN0eP5WmFeMS4I5JiE+S\nJGnGmzc8PDzdMWgzMzS0ckreVHPhCwYbwnz0Mx+jzEU/89HPfPQzH/3mQj4GBxfOG++cPcozVJLd\ngb/tOPWJqppot1qSJEmTwEJ5hqqqG7AfWJIkadrYoyxJkiR1sFCWJEmSOlgoS5IkSR0slCVJkqQO\nFsqSJElSBwtlSZIkqYOFsiRJktTBQlmSJEnqYKEsSdIctGzZWSxbdtZ0hyHNaBbKkiRJUgcL5Rks\nyZIkfzfdcUiSJM1FFsqSJElSh4HpDkDrluRE4Ij25cVVdWaSXYBzgF8Da4CXAr8FfAT4LrALcHNV\nvXacOY8FHl9V/6d9/SXgL4HfbR9XAzdW1V8meRLwMeBBmvfMK6vqB5vkZiVJkmYId5RnvqcAS4B9\n2p+XJ9kR2A44oar2B64BXtGOfzbwFmA34AVJHj3OvJ8AXgyQZGvgMcD3gL8CDqiqfYEnJtkLOBz4\nUrvWicDjJvsmJUmSZhp3lGe+XYHLqmo1QJJraHaLvwOcmWQr4PHAx9vx36mqu9uxPwa2Bv5n7KRV\n9d9J/ivJs4AAnwKeATwJuCwJ7bXbA5cDn2mL7gur6rqJAl60aCsGBuY/tLteT4ODC6dkndnCfPQz\nH6PMRT/z0c989DMf/eZyPiyUZ75hYF7P6wU0rRbvA86sqkuTnAI8qj2/esz18xjfR2laNran2YVe\nBPx7VT1/7MC21eMPgXck+aeq+uh4k65Y8cDEdzRJBgcXMjS0ckrWmg3MRz/zMcpc9DMfazMfo3x/\n9JsL+Zjog4CtFzPfzcDiJANJBoA92mPbAt9N8nDgBTQF9Ib6AvA84NFVdTtQwNOSbAeQ5G1JfifJ\nEcBOVXUxTWvGcx7qTUmSJM10Fsoz3+3AucBy4GrgvPaLdB8ALqZpmfgA8GqaVon1VlWrgNuAS9rX\nDwAnAV9oWzweA/wY+DZwdpIrgKXABx/yXUmSJM1wtl7MYFV1fs/Lc8acO5emgB7xmfbxOT1jJtz5\nTfIImn7nv+y55iLgojFDbwJ2X9+4JUmSNgcWypu5JC8CTu44dRnNn5x7V1XdO7VRSZKm23HHdf2v\nQVIvC+XNXFV9DvjcOKffMZWxSJIkzSb2KEuSJEkdLJQlSZKkDhbKkiRJUgcLZUmSJKmDhbIkSZLU\nwUJZkiRJ6mChLEmSJHWwUJYkSZI6WChLkiRJHSyUJUmSpA4WypIkzUHLlp3FsmVnTXcY0oxmodxK\ncnCSY8c5d36SQ6Y6ppkoyeHTHYMkSdJUGJjuAGaKqrp0umOY6ZIsAE4GLpzuWCRJkjY1C+VWkiXA\nTsAdwBHt4Yur6sz2+QuTnAQMAkdX1U3jzHMasC3wu8AOwF8B/x/wZOAFwA+BjwBPAB4JnFZVn09y\nFfAl4ID2+hcCPx5n7EHAe4G7gQKGquq0JKcD+wDzgbOr6oIk5wM/BZ7dxn4mcHS7xr7A/cC5baxb\nAG+tqivGieeNwDOTLKuq4zYowZIkSbOMrRf9ngIsoSk29wFenmTH9txwVR0EnNr+TGSbqjoY+BTw\n6p7nLwK2AS6vqn2BlwFv67nuvqo6EPgicNgEY88EXgU8H9gVIMk+wPZV9Tya4vavkmzZjl/dXzzS\nPAAAIABJREFUzvsfwHPb+/gPYH/gSOCuqtofeDFNAT5ePO8CyiJZkiTNBe4o99sVuKyqVgMkuQbY\npT13Zft4A/DOdcxzQ/t4FzDcPv8J8BhgBbBbktcBa9pjI65uH+9cx9jtq+rmNsYv0Px3fC6wZ7sT\nDM2HoMd1xPOfPfFsDewJ7JNk7/b4lm2LRVc862XRoq0YGJi/vsMfksHBhVOyzmxhPvqZj1Hmop/5\n6Gc++pmPfnM5HxbK/YaBeT2vF9AUqCPn6HjeZfU4z+fR7OBuQ7NjvQ1w40aOHRvLKuBDVfWO3pNJ\n1hXPKuD0qrpgHdf15mVCK1Y8sL5DH5LBwYUMDa2ckrVmA/PRz3yMMhf9zMfazMco3x/95kI+Jvog\nYOtFv5uBxUkGkgwAe7THoClWodmBve0hrLEt8P2qWkPTzrBgI8beneT3k8wH/rA9dj1NH/XDkjwi\nyQfWM57rgUMBkmyX5IwJxq7BD1eSJGmOsFDudzvNF9uW07QdnFdVPxg5meQS4O3AXz+ENT5NU9B+\nGfg5cGeSt27g2L8CLgI+R1O0P1hV19K0h1wHfAX49/WM55PA/UmuBS5htN2iy13AgiSfWs+5JUmS\nZq15w8Pr6iKYG9o+4B2q6k3THcu6JPlD4NtVdXuSfwCWV9W/THdcI4aGVk7Jm2ou/DpoQ5iPfuZj\nlLnoZz4aI//YyNKlS81HD98f/eZCPgYHF47bXuqv0YEki2n+9NkxG3DNRTR9w73urapDJzO2ccwD\nPpNkJc2X8vy7xpIkSZPMQhmoquuAHdc5sP+awzZROOuz9mXAZdO1viRp9jvuuJOnOwRpxrNHWZIk\nSepgoSxJkiR1sFCWJEmSOlgoS5IkSR0slCVJkqQOFsqSJElSBwtlSZIkqYOFsiRJktTBQlmSJEnq\nYKEsSZIkdbBQliRpDlq27CyWLTtrusOQZjQLZUmSJKmDhfJ6SPKoJLdvwvk/l+SKTTV/zzr7Jblw\nPcf+fpJvJzlhzPElSf5k00QoSZI0cwxMdwACYJ+qWjTdQYyxO/CFqvpA78GqOn96wpEkSZpaFsrj\nSPJbwKeBRwBfbY+9AjgBeBD4v1X1uiTXA0dW1XeTPAH4bFU9e5w5nwmcA6wBVgKvBk4FHpXki1X1\nRx3XHAS8pKqOTXIk8OaqemaSxwH/ArwI+DCwiOa/5wlV9c0k+wBnAL8G7gD+bMy8xwC7VdVrO9Yc\nBN4CPDLJ94E/AW5tT98D3FNVZ69HGiVJkmYtWy/G90rg1qraB/hGe+yRwMFVtRfw+23h+8/Ay9vz\nLwIumGDO9wFvqKr9gOXAiVX1l8C9XUVy61rgWe3zvYCfJtm6fX4lcBJwaVUdCBwLvLsd+37g0Ko6\nAPgJ8NKRCZM8F3hJO34tVTUEvBP4RFW9rz18a1UdP8G9SZIkbVbcUR7f02mKWYCr2sf/Bj6bBOBp\nwGNoCuPLaHZvD2HMzu3YOavq+vb5lcDSdQVRVQ8k+VWSrYDtgc8Ae9AUyp8B3gwMJnlle8lWSR4L\nPBW4qI31kTQ7wT8CHtfGvEdV/Xpd6/e4YX0HLlq0FQMD8zdg6o03OLhwStaZLcxHP/Mxylz0Mx/9\nzEc/89FvLufDQnl882haJKDZeV9A0zaxS1XdneTzAFX1syR3JtkNeFhV/Wg951/QM/+6fBU4kKZd\n42vAH9PsMr8RWEXTbnHdyOAki4AftTvX9BzfD9gB+DfgtcDfrOf6tOuslxUrHtiAaTfe4OBChoZW\nTslas4H56Gc+RpmLfuZjbeZjlO+PfnMhHxN9ELD1YnwFPKd9vj+wEFjdFslPbM8taM//M00Rva6/\nKHFrksXt832BG9czluXAiTS7urfQ7Cg/UFWrgOuBFwMkeXqSk6tqxcjr9vGEJDu3c11Ds+v9siTP\nWM/1JUmS5hwL5fF9FNgzyZeB0LQufCnJ12laJv4WeE+SLYBLgN9l3YXy64Ez2j8FtxtNH/H6uAZ4\nHnBd2y7xqPYYwAeA301yNXAe8JX2+GuAD7fH96Yp/AGoql8Cfw58KMnU9EhIkiTNMvOGh4enO4ZZ\nL8n+wJKqevV0xzITDA2tnJI31Vz4ddCGMB/9zMcoc9HPfDRG/lW+pUuXmo8evj/6zYV8DA4unDfe\nOXuUH6IkbwOeT/NXJEjyJJrd6LGWV9W4X97b2OseiiQLgMs7TlVVHbMp1pQkzQzHHXfydIcgzXgW\nyg9RW8Qu7Xn9Q2C/jZhno657KNoe5yldU5IkabawR1mSJEnqYKEsSZIkdbBQliRJkjpYKEuSJEkd\nLJQlSZKkDhbKkiRJUgcLZUmSJKmDhbIkSZLUwUJZkiRJ6mChLEnSHLRs2VksW3bWdIchzWgWypIk\nSVIHC+U5JslnpzsGSZKk2cBCeY6pqkOnOwZJkqTZYGC6A9C6JVkCHAz8FvAE4D3AW4AvAD8FPgx8\nCFgAPAi8FvgTYOuqens7x5XAicAVVbVtkmcC5wBrgJXAq4GdgeOr6vD2mnvasUcBxwOrgFuq6i+m\n4r4lSZKmkzvKs8czgBcBBwB/Azwc+GJVnQ78NfDuqjoQeC/wf4CLgEMAkmwDPLaqvtkz3/uAN1TV\nfsBymiJ6PKcAL6mqvYEbk2w5mTcmSZI0E7mjPHssr6rVwD1JVgA7ADe0554LJMlfAfOBoaq6I8lw\nkscBBwEXj5nv6VV1ffv8SmBp+9jlAuAzST4GXFBVv5go0EWLtmJgYP6G3t9GGRxcOCXrzBbmo5/5\nGGUu+pmPfuajn/noN5fzYaE8e/Tu/s8DhmlaIWgfX1pVd4255mKaXeXnA2dMMPcCmhaM4THHtwCo\nqnck+ThwOHBFkudV1c/Gm2zFigfWcSuTY3BwIUNDK6dkrdnAfPQzH6PMRT/zsTbzMcr3R7+5kI+J\nPgjYejF7LE4yP8m2wEKgt1C9HngxQJIDkhzZHr8IeAHwu1V105j5bk2yuH2+L3AjcB/wuHaenYGF\nSR6W5HTgrqo6C7gO2H7yb0+SJGlmsVCePW4HPgVcAZxKswM84jTgxUm+QtNCcR1AVRVNi8blHfO9\nHjgjyRXAbsD7gVuAnye5FngVcHtVjXzZ77okX6bZdf7GZN+cJEnSTGPrxezx3ao6pef1P488qaof\n07RXrKWqdhnzetv28VvA/h2X/GHP8ze0Y98JvHPjwpYkSZqdLJQlSZqDjjvu5OkOQZrxLJRngao6\nf7pjkCRJmmvsUZYkSZI6WChLkiRJHSyUJUmSpA4WypIkSVIHC2VJkiSpg4WyJEmS1MFCWZIkSepg\noSxJkiR1sFCWJEmSOlgoS5IkSR0slCVJmoOWLTuLZcvOmu4wpBnNQnkTS3JwkmPHOXd+kkOmIaY3\nJVk81etKkiTNJgPTHcDmrqoune4Yxqqqd053DJIkSTOdhfImlmQJsBNwB3BEe/jiqjqzff7CJCcB\ng8DRVXXTOPPsCiwDftX+vBx4EPgwsIjmv+UJVfXNJP8FfAH4KfDqqvq9do5XA7sA2wAXApcBHwG2\nB34JHAXcDZwL7ABsAby1qq5IchRwPLAKuKWq/uKhZ0eSJGnmsvViajwFWALs0/68PMmO7bnhqjoI\nOLX9Gc/RwLKq2g84E/ht4CTg0qo6EDgWeHc7dgvgi1V1OnBHkme0xw+lKZBHvBq4u6r2Av4ReBFw\nJHBXVe0PvBh4bzv2FOAlVbU3cGOSLTc4C5IkSbOIO8pTY1fgsqpaDZDkGpqdXYAr28cbgIlaIj4L\nfDDJ7wGfqKr/TPJcYDDJK9sxW/WMv6F9vIhm1/q7wDOA64DXteeeBXwZoKr+tY3tg8A+SfZux2yZ\nZAFwAfCZJB8DLqiqX4wX6KJFWzEwMH+CW5k8g4MLp2Sd2cJ89DMfo8xFP/PRz3z0Mx/95nI+LJSn\nxjAwr+f1AmBNzzk6nvepqi8n2Q04BPhIklNo2iBOqKrrOi5Z1T5+BvgkcCtNsT6cZGTMg6z9W4VV\nwOlVdcGY4+9I8nHgcOCKJM+rqp91xbpixQPj3cakGhxcyNDQyilZazYwH/3Mxyhz0c98rM18jPL9\n0W8u5GOiDwK2XkyNm4HFSQaSDAB7tMegacUA2BO4bbwJkhwPbFNVHwfeQ7NLfT1NewRJnp7k5LHX\nVdWPaQrwP6W/7QLg68AB7fWHJHlLO+eh7bHtkpyR5GFJTqdpyTiLZld6+w3MgSRJ0qzijvLUuJ2m\nxWI5zYeT86rqByM7u0kuAZ4IvGqCOb4DfCrJvTRf5jsaeAA4P8nVwHzg9eNc+zngxI75/xU4KMly\n4Nc0Pcs/AQ5Icm0752lVtSbJSuC6dv3vAd9Y/9uXJEmafeYND4/7235NgiSvA3aoqjdNdyxTZWho\n5ZS8qebCr4M2hPnoZz5GmYt+5qMx8o+NLF261Hz08P3Rby7kY3Bw4bzxzrmjvAm1/6jHG4FjNuCa\ni2j+fFuve6vq0MmMTZIkSROzUN6E2i/Z7bjOgf3XHLaJwpEk6TeOO26tr7VIGsMv80mSJEkdLJQl\nSZKkDhbKkiRJUgcLZUmSJKmDhbIkSZLUwUJZkiRJ6mChLEmSJHWwUJYkSZI6WChLkiRJHSyUJUmS\npA7+E9aSJM0xy5ad9ZvnS5cuncZIpJnNHWVJkiSpg4VyjyQHJzl2nHPnJzlkE637kk0xryRJkjae\nrRc9qurSqV4zyZOBPwU+PdVrS5IkaXwWyj2SLAF2Au4AjmgPX1xVZ7bPX5jkJGAQOLqqbhpnnoXA\nh4FFNDk+oaq+meQ7wD8ALwQeDhwEnAPsnuStNDv8OwBPAfYD3g7sA8wHzq6qC5KcD9wP/D6wLXA0\nsAL4WHv8bOBe4Azg1+29/BnwXOB4YA3wNODCqnpbkqe31wwDK4ElwKPb889p7+dG4HDgNGAV8Jiq\nchdckiRt1my9WNtTaIrFfdqflyfZsT03XFUHAae2P+M5Cbi0qg4EjgXe3R4fAP6zqp4HfB84EHgX\nsLyq3t6OWVBV+9AUttu3Yw8A/irJliPztHH8H+Ct7bFdgVdU1eeB9wOHVtUBwE+Al7Zjdm/vbTFw\nQnvsA8AxbayXA3+xjvz8t0WyJEmaC9xRXtuuwGVVtRogyTXALu25K9vHG4B3TjDHc4HBJK9sX2/V\nc+7q9vFOYGvgf8Zce0PPHHsmuap9/TDgce3zf2sfrwNGdru/W1U/S/JY4KnARUkAHgncA/wIuKmq\nHmjva2S93YF/bF8/HPj6BPfVG9+4Fi3aioGB+esaNikGBxdOyTqzhfnoZz5GmYt+5qOf+ehnPvrN\n5XxYKK9tGJjX83oBTbvCyDk6no+1iqbd4rqOc6t7ns/rOL+q5/FDVfWO3pNtQTvym4B5PXH0Xvej\nqtpvzHX7jVl7xAPA/lU13DN2+zFjtuiIb1wrVjywriGTYnBwIUNDK6dkrdnAfPQzH6PMRT/zsTbz\nMcr3R7+5kI+JPgjYerG2m4HFSQaSDAB7tMegacUA2BO4bYI5rgdeDJDk6UlOnmDsGro/sFxP0xP9\nsCSPSPKBnnMjcSwGvtV7UVWtGFm3fTwhyc4TrH8LcHA79ogkBwL3AY9NMi/JbwM7TnC9JEnSZskd\n5bXdTtNisZzmg8R5VfWDkVaFJJcATwReNcEcHwDOT3I1zRfxXj/B2NuAZyV5D82X8ACoqmuTXEnT\nXjEPWNZzzSOSfL6N45Ws7TXAh5OsAn4MnEtTVHc5ETg3yZuAXwBHVtWKJP9G04ZxC6MfFCRJkuaM\necPDE3UQzC1JXgfsUFVvmu5YxtP+1YsL2y/tzUhDQyun5E01F34dtCHMRz/zMcpc9DMfa//LfHM9\nH718f/SbC/kYHFzY1QoLuKP8G0kWA28EjtmAay4Cthlz+N6qOnQyY5MkaTIdd9xEHYGSRlgot9ov\n3m1QL25VHbaJwplozSVTvaYkSdJc5Jf5JEmSpA4WypIkSVIHC2VJkiSpg4WyJEmS1MFCWZIkSepg\noSxJkiR1sFCWJEmSOlgoS5IkSR0slCVJkqQO/st8kiTNMcuWnfWb50uXLp3GSKSZzR1lSZIkqYOF\nMpDk+CSnTdJch7ePByc5dpLmPC3J8Q/h+iVJ/mQDxj82yYok+23smpIkSbOdrReTKMkC4GTgwqq6\ndLrjGVFV52/gJe8CvrcJQpEkSZo15kShnGQ+cC6wA7AF8FZgHvBe4G7gLuB77Q7q8VU1sit8T1Vt\nm2RXYBmwBri2qt6Q5CDgr4FVwArgZcB7gGcmWQbcAOxUVackORE4og3n4qo6M8n5wI+BZwNPAl5R\nVTdNcBu7JbkceDxwSlVdmuQvgcNpfjPwhap6W0+sv2p/Xg6cBNxTVWcneR+wB7Aa+POqunVMrg4A\nVgL/0b7+I+DIqnpV+/ofgUuq6nPrl31JkqTZaa60XhwJ3FVV+wMvpimQ3wG8sqr+F7DtOq5/P3BM\nVe0FPDbJ9sAimgJyX+A+4Pk0O7FVVceNXJjkKcASYJ/25+VJdmxPP7yqng+8DzhqHTFsV1V/SFNw\nn95zfG9gT2BJkt8CjgaWVdV+wJnAb/fEchDwxKraE3gLTRFNz/kFwFLg1J7DlwN7JHlEkocBewEz\nZrdckiRpU5kTO8rAc4F9kuzdvt4SeEJV3dK+Xt4eG0+q6psAVXUU/KYAPi/JAM1O9RXjXLsr8LWq\nWt1edw2wS3vu6vbxTppd3olc1a5/a5IntsceaGNfTVPsbwN8Fvhgkt8DPlFV/5lkZI5nAde083wF\n+MqYNd4E/GNV/c/INVX1YJLPAy+g2Xm/uqpWTRTookVbMTAwfx23MzkGBxdOyTqzhfnoZz5GmYt+\n5qOf+ehnPvrN5XzMlUJ5FXB6VV0wciDJ3T3nR3bWh8dct0X7uKZjzn8C/riqbkty9gRrD9O0eYxY\n0DPf6p7jvWPGm+c3z9td7ZOBXavq/iS3AlTVl5PsBhwCfCTJKT3XPcjEv0V4PjC//eLgjsDuSV4K\nfBR4I3A78C/riJMVKx5Y15BJMTi4kKGhlVOy1mxgPvqZj1Hmop/5WJv5GOX7o99cyMdEHwTmSuvF\n9cChAEm2S3IG8KM05gH7tePuAx7XjtsZGMnct5Ls0R7/UJKnAVsDP0zyaGB/RgvgsR8+bgYWJxlo\nd5/3aI9tqL174voBzQ7yT9si+VnA9sCCtsjdpqo+TtMzvWvPHF9vYyXJrknO6V2gqvaqqj3b1oz/\nHziuqv5vVX0D+B1gd9behZYkSdoszZVC+ZPA/UmuBS6haXk4FbiwfX1HO+4W4OftuFfR7KACnAi8\nO8lXgRVVdRtwDk0bw7nA3wJvptn1XZDkUyMLV9Xt7Zjl7brnVdUPNuIefprkczQ7um8GvtHe0zU0\nvcb/QPMlvu8An0ryZZre7I/3xPIV4LYkV9P0Xf89QJLPrsf6lwM3VtXYXXdJkqTN0rzhYeseTazd\ndf8SzV/J+M66xg8NrZySN9Vc+HXQhjAf/czHKHPRz3ys/S/zzfV89PL90W8u5GNwcOG47a9zpUd5\nVkhyEc0X8nrdW1WHTkc8AEmeDHwa+OT6FMmSpJnvuONOnu4QpFnBQnkGqarDpjuGsdrWkWdPdxyS\nJElTba70KEuSJEkbxEJZkiRJ6mChLEmSJHWwUJYkSZI6WChLkiRJHSyUJUmSpA4WypIkSVIHC2VJ\nkiSpg4WyJEmS1MFCWZIkSergP2EtSdIcsmzZWX2vly5dOk2RSDPfnN1RTnJwkmPHOXd+kkM2wZq3\nJ3lUkt9P8u0kJ0z2GmPWu2cTzHlIkvMne15JkqSZZs7uKFfVpdO4/O7AF6rqA9MYgyRJkiYwZwvl\nJEuAnYA7gCPawxdX1Znt8xcmOQkYBI6uqpvGmWdXYBnwq/bn5cCDwIeBRTQ5PqGqvtlesgh4C/DI\nJN+vqvf1zDUf+H/s3XmYXWWVsP27SBEQKCGYUmknBHE1oPIxjyFMigOCIoqCSOhWUVqFD7EFBwqw\nwRlEISqCorzOCIi0IIokhEEmozatLgVFmSleAwSiHULq/WM/6Tqn2DUllVPDuX/Xlevss/czrL2y\nL1jnyXOqzgE2AdYETszMn0fEPOBq4OXAcuDrwJwyz97AR4HnAs8HNgI+0PhBICJeCpxd+i4GDge+\nCJyTmVdFxFrAb4EATgZmAdOAszLz26X/N4C/AXeMIL2SJEmTXttuvSheSFVwzip/Do6ITcu1vszc\nB/hw+TOYI4C5mbkH8Eng2cAxwBWZuTfwbuCzDe0XAZ8AvttYJBeHAPdl5p7A64DPNVy7LzN3oypg\nN8zMFcXsS8v152TmK8oYHx8w7plUxfMewHzgaOACqqIeqmL7cmBn4AWZuTuwF/CRiHgaVSF+Urmf\nJ4fIhSRJ0pTRtivKxdbATzJzGUBEXAdsVa5dXV5voipsB/ND4IsR8WKq4vf3EbEL0B0Rby1t1hlh\nPLsAsyJit/L+aRExvSEOgPuAheX4AWD9cnwVQGb+V0Q8Z8C4W2TmjQ331QN8DPhURKwJHACcD+wO\n7FRWsKH6ILURsAVwfTk3D3jVUDcxY8Y6dHZOG+5ex0R3d1dL5pkszEcz89HPXDQzH83MRzPz0ayd\n89HuhXIf0NHwfjrV9oQV16g5blK2LmwP7Ad8PSKOA5ZSbbe4YbgAIuKHVMXuBaXfqZn57QFtAJY1\nnGo8XhH/SP91YDqwPDOXRcSVVKvJW2bmDRGxE3BeZjatSEdEB/15GXaeRYuWjDCUVdPd3UVv7+KW\nzDUZmI9m5qOfuWhmPp7KfPTz+WjWDvkY6oNAu2+9WAjsHBGdEdEJ7Ej/au2s8roT8LvBBoiI91Bt\nhfgmcAbVKvWNVFsniIgtIuLYwfpn5gGZuUdmnlf6HVD6PTMiThvFvexW+r0M+MuAa7dFxM7leDZw\nSzm+ADiFapWYMv9rI2KNiFg7IlZ82TCB7crxnqOISZIkadJq9xXlO6m2Isyn+tBwbmb+pazgEhE/\nAp4HHDbEGLcD34+IR6i+zHcEsAQ4PyIWUO0jft8I4/kesFdEXF/6nTSKe3k0Ii6l2nd9zIBr7wPO\njog+qj3SRwBk5q0RsSHwrfL++oi4GriBaqV6bun/H8DXIuJo4E9Uq9KSJElTWkdf36C7Cqa0iHgn\nsElmHj/esayqiDgJeCgzzxplvxdTfRFxn7GMp7d3cUseqnb456DRMB/NzEc/c9Gs3fNR9wtH2jkf\nA7X78zFQO+Sju7urY7BrbbmiXLYhfBA4chR9LgI2HHD6kcw8YCxja5WIeBfwTqofFSdJkqQB2nZF\nWauPK8rjw3w0Mx/9zEUz89HMfDQzH83aIR9DrSi3+5f5JEmSpFoWypIkSVINC2VJkiSphoWyJEmS\nVMNCWZIkSaphoSxJkiTVsFCWJEmSalgoS5IkSTUslCVJkqQaFsqSJElSjc7xDkCSJK1ec+eePui1\nnp6eFkYiTS6uKEuSJEk1XFEGIuI9wMzMPGkMxjooMy+MiFcCL8zML47BmCcBD2XmWSvZfw7wSGZe\nPEy7dYGvA88CHgfmZOb9KzOnJEnSZGehPIYiYjpwLHBhZl4x3vGskJnnj7DpO4E7MvOgiJgFnFLO\nSZIktZ22KJQjYhpwDrAJsCZwItABfA64H7gP+FNE7AG8JzMPKv0eysyZEbE1MBdYDlyfmR+IiH2A\njwFLgUXAm4AzgJdGxFzgJuAlmXlcRBwNvLmEc0lmfjIizgfuBbYFng8cmpm/HOI2to+IK4F/Ao7L\nzCsi4v3AQVRbaH6cmSc3xPo/5c/BwDGUFemIOBPYEVgGvCszb2uYYzPgKoDMXBARX46IVwGHZOZh\nJSdfAX6UmZeONP+SJEmTUbvsUT4EuC8z9wReR1Ugfxx4a2a+HJg5TP/PA0dm5q7AsyLiBcAMqgJy\nNvAosC/waSAz86gVHSPihcAcYFb5c3BEbFour5WZ+wJnAm8bJoZnZuYrqAruUxvO7wbsBMyJiKcD\nRwBzM3MP4JPAsxti2Qd4XmbuBHyIqohu9F/Aq0vb2cALgCuBHSNi7YhYA9gVmDCr5ZIkSatLW6wo\nA7sAsyJit/L+acBzM/PX5f38cm4wkZm/AcjMt8H/FsDnRkQn1Ur1zwfpuzXwi8xcVvpdB2xVri0o\nr3dTrfIOZV6Z/7aIeF45t6TEvoyq2N8Q+CHwxYh4MfDdzPx9RKwYYxvgujLONcA1A+Y4D3hZRFxb\nxn0wM5+MiMuoCuj7gAWZuXSoQGfMWIfOzmnD3M7Y6O7uask8k4X5aGY++pmLZuajmfloZj6atXM+\n2qVQXgqcmpnfXnEiIhq/pLZiZb1vQL81y+vymjG/CrwmM38XEUN9ya6PapvHCtMbxlvWcL6xzWDj\n/O9xWdU+Ftg6Mx+LiNsAMvOqiNge2A/4ekQc19DvSYb4V4RSAL8bICLWAw4ol74BfBC4E/jWMHGy\naNGS4ZqMie7uLnp7F7dkrsnAfDQzH/3MRTPz8VTmo5/PR7N2yMdQHwTaZevFjZSiLyKeGRGnAfdE\npQPYo7R7FNiotHsZsCJzv42IHcv58yJic2B94K8RsQGwJ/0F8MAPHwuBnSOis6w+71jOjdZuDXH9\nhWoF+cFSJG9DtU1ievkJHhtm5jep9kxv3TDGzSVWImLriDi7cYKIeHVEfKy8fStwOUBm/gp4DrAD\nT12FliRJmpLapVD+HvBYRFwP/Ihqy8OHgQvL+7tKu18Dj5d2h1GtoAIcDXy2bElYlJm/A86m2sZw\nDvAp4ASqVd/pEfH9FRNn5p2lzfwy77mZ+ZeVuIcHI+JSqhXdE4BflXu6jmqv8ZepvsR3O/D9iLiK\nam/2NxtiuQb4XUQsoNp3/SWAiPhhaXI1sE1E/ALYH/iPhvmvBG7JzIGr7pIkSVNSR1+fdY+GVlbd\nf0r1UzJuH659b+/iljxU7fDPQaNhPpqZj37molk75mO438zXbvkYSjs+H0Nph3x0d3cNuv21XfYo\nTwoRcRHVF/IaPZKZB9S1b4WI2Bj4AfC9kRTJkqSJ56ijjh3vEKRJyUJ5AsnMA8c7hoH/J4ohAAAg\nAElEQVTK1pFtxzsOSZKkVmuXPcqSJEnSqFgoS5IkSTUslCVJkqQaFsqSJElSDQtlSZIkqYaFsiRJ\nklTDQlmSJEmqYaEsSZIk1bBQliRJkmr4m/kkSZri5s49fdBrPT09LYxEmlxcUZYkSZJqWChLkiRJ\nNSyUBxER60XEnUNcvzQifj7KMedExGfK8UGrFmHTuOdHxH5jNZ4kSZIslFfFrMzcaxX6Hz9mkUiS\nJGnM+WW+BhHxdOAHwNrAteXcLOA04AngLuAdwMeB9SLicuBg4FvAusA6wHsz86ayGv2SzHysrCLf\n1jDPB4CtIuKizDxwkFjOBy7MzMvKavFBwEnA14E7gK2AhZn59oY+awKXA6cChwP3AtsCzwcOzcxf\nRsTRwJtLl0vK/X4hM18VEbsAPwY2pPoQ9SvgM8BuQDcQwKcz87zRZVaSJGnysVBu9lbgtsz8/yPi\nYOAtwOeBvTPzbxHxKeCNmfn+iDi8FJcvBs7NzEsiYi/gg8AbhpokMz8dER8crEgexrZUxfmDwN0R\nsUHDtTOA72Xm1RFxOLBWZu4bEe8C3hYRi4A5wPal/U3AhcBzI6ID2BVYCGwJrFWuA7wU2AXYDPgO\nMGShPGPGOnR2TluJWxu97u6ulswzWZiPZuajn7loZj6amY9m5qNZO+fDQrnZFsD8cjwPeBYwE7go\nIqBaNX5oQJ8HgI9GxHFUxeXjqznG2zPzfoCIuBdYv5xfURi/p6HtgvJ6N7AjsDXwi8xcVvpfR7Uy\n/V/Ai4EdgLnAzsDTqHKwBnBDZj4ZEXc3zDeoRYuWrMr9jVh3dxe9vYtbMtdkYD6amY9+5qKZ+Xgq\n89HP56NZO+RjqA8CFsrNOoDl5XgNYClwf2buMUSfY4B7MvOwiNiOaqsCQF9DmzVXIpbB+i8b0K6j\nvK4BbBIRm2XmH2vadpQxOxrOTae633nATlRbR64GPgWsB7wf2LtmHEmSpCnPL/M1S2C7crwnsAgg\nIrYor++NiJcN6DOTas8wwOupik+AR4GNImIaVRE60HC5fxTYqBzvNoLYvwa8DzivbKOosxDYOSI6\nI6KTapV5IdUq+mFUq9UPUe1H7s7Mu0YwryRJ0pRkodzsG8BOEXEV1RfX+oB/Bb4WEQuoCtas6XNs\nRFwJ3Ag8OyKOAM4CfgRcBPx3zVwLI+KmmvMrXAAcFxFXUH2RcFiZ+XPgt1QFc931O4FzqArjBVR7\nq/+SmUm17eSG0nQRcPtI5pQkSZqqOvr6+oZvJY1Cb+/iljxU7bBvajTMRzPz0c9cNDMfzcxHM/PR\nrB3y0d3dNei2Uvcoj6OImA5cWXMpM/PIVscjSZKkfhbK4ygzlwJ7jHcckiRJeir3KEuSJEk1LJQl\nSZKkGhbKkiRJUg0LZUmSJKmGhbIkSZJUw0JZkiRJqmGhLEmSJNWwUJYkSZJqWChLkiRJNfzNfJIk\nTWFz554+5PWenp4WRSJNPm27ohwR60XEnatx/Esj4uera/yGefaIiAtX9zySJEntxhXl1WdWZs4Y\n7yAkSZK0ctqqUI6IpwM/ANYGri3nDgXeCzwJ/HdmvjMibgQOycw7IuK5wA8zc9tBxnwpcDawHFgM\nHA58GFgvIi7PzFfV9NkHeENmvjsiDgFOyMyXRsRGwLeA/YGvATOo/o7em5m/iYhZwGnAE8BdwDsG\njHsksH1mvn2QWM8HHgS2BbqBTwJHADOB2cAS4BxgE2At4MTMvDIibge+DLy2nN8nMxcPlmdJkqSp\noN22XrwVuC0zZwG/KufWBV6ZmbsC/1wK3wuAg8v1/YFvDzHmmcAHMnMPYD5wdGa+H3ikrkgurge2\nKce7Ag9GxPrl+GrgGOCKzNwbeDfw2dL288ABmbkX8ADwxhUDRsQuwBtK+6EsK+P+F7BLZu5TjvcE\n3gL8IzNnAwcCZ5U+ncDvM3N34M/A3sPMIUmSNOm11YoysAVVMQswr7z+DfhhRABsDjyDqjD+CdXq\n7X4MWLkdOGZm3liOrwaG/VZEZi6JiP+JiHWAFwAXAztSFcoXAycA3RHx1tJlnYh4FrAZcFGJdV3g\nIeAeYKMS846Z+cQw099UXu8Dfl+OHwDWp1ppnldivLfEuGFps6C83l3aDmrGjHXo7Jw2TBhjo7u7\nqyXzTBbmo5n56GcumpmPZuajmflo1s75aLdCuYNqiwRUq+nTqbZNbJWZ90fEZQCZ+X8j4u6I2B5Y\nIzPvGeH40xvGH861VCuzi4FfAK+hWmX+ILCUarvFDSsaR8QM4J6yck3D+T2otkr8DHg78B/DzLts\nkOMOoK+81t3PwLaDWrRoyTAhjI3u7i56e90BsoL5aGY++pmLZubjqcxHP5+PZu2Qj6E+CLTb1osE\ntivHewJdVFsR7o+I55Vr08v1C6iK6OF+osRtEbFzOZ4N3DLCWOYDR1Ot8P6aakV5SWYuBW4EXgcQ\nEVtExLGZuWjF+/L63oh4WRnrOqpV7zdFxJYjnL/OzVR5oeRjeWY+vArjSZIkTVrtVih/A9gpIq4C\ngmrrwk8j4maqLROfAs6IiDWBHwEvYvhC+X3AaeVHwW1PtY94JK4DdgduKNsl1ivnAL4AvCgiFgDn\nAteU8/8KfK2c342q8AcgM/8BvAs4LyJWdt/Dd4BpEXF1OT5yJceRJEma9Dr6+vrGO4YJKSL2BOZk\n5uHjHctk09u7uCUPVTv8c9BomI9m5qOfuWjWbvkYyS8caad8DKfdno/htEM+uru7Bt1S2m57lEck\nIk4G9qX6KRJExPOpVqMHmp+Zg355b2X7rYqImA5cWXMpM9MVYkmSpBFyRVljzhXl8WE+mpmPfuai\nmfloZj6amY9m7ZCPoVaU222PsiRJkjQiFsqSJElSDQtlSZIkqYaFsiRJklTDQlmSJEmqYaEsSZIk\n1bBQliRJkmpYKEuSJEk1LJQlSZKkGhbKkiRJUo3O8Q5AkiStHnPnnj5sm56enhZEIk1OrihLkiRJ\nNSyUV1JEvDIi3j3ItfMjYr8RjnNSRLyn5vxDqxrjSEXEvIh4yWCxSJIktSO3XqykzLxivGOQJEnS\n6mOhvJIiYg7wEuAu4M3l9CWZ+cly/NqIOAboBo7IzF8OMdz2EXEl8E/AcY1FeETMA96TmbeV1d6Z\nmXlSRJwKzAKmAWdl5rdrYjwT2BFYBryrjPEpYFeqv/uzMvOCmn6dwNeB5wLrAidl5mUlltsAMtOV\nZ0mSNKW59WLVvBCYQ1WwzgIOjohNy7W+zNwH+HD5M5RnZuYrqAruU4ebNCJmAS/IzN2BvYCPRMTT\nBrTZB3heZu4EfKjEtjvwkszctfQ7KSK6aqbYELgyM2cDbwJObrh2m0WyJElqB64or5qtgZ9k5jKA\niLgO2Kpcu7q83gR8Yphx5gGUFd/njWDeXYCdygovVB94NgL+1NBmG+C6Mu41wDURcSwwv5x7PCJ+\nC2xWM/4iqlXudwLLgWc0XLtpuOBmzFiHzs5pI7iNVdfdXVfnty/z0cx89DMXzcxHM/PRzHw0a+d8\nWCivmj6go+H9dKrCcsU1ao4HG2ewto3v1yyvS4HzMvPjjQ0j4stAAD8F/sFT/8VgqHgbHUK1qjyr\nvN7ScG3poHdRLFq0ZLgmY6K7u4ve3sUtmWsyMB/NzEc/c9HMfDyV+ejn89GsHfIx1AcBt16smoXA\nzhHRWfb17ljOQVVkAuwE/G6YcXYDiIiXAX8ZcO1RqtViqPYWA9xItQd6jYhYOyK+AJCZR2bmHpl5\nKnAzsGcZd+uIOLuc26OcWw/YFPhjTTwzgT9n5nLgQKqCWpIkqa1YKK+aO4FzqLYzLADOzcz/LXQj\n4kfAKcDHhhnnwYi4FPgWcMKAa+cAZ0fEfwL3AmTm9VRbO24ArgFuHThg2W7xu4hYAHwe+FJmXgvc\nGhHXUK06H5+Zj9fE8wOqQvwq4HHg7og4cZh7kCRJmlI6+vqG2xWgOmX/7iaZefx4xzLR9PYubslD\n1Q7/HDQa5qOZ+ehnLpq1Uz5G+pv52iUfI9FOz8dItEM+uru7Oga75h7llRAROwMfBI4cRZ+LqPb7\nNnokMw8Yy9gkSVrhqKOOHe8QpEnNQnklZOYNVPt7R9PnwNUUjiRJklYD9yhLkiRJNSyUJUmSpBoW\nypIkSVINC2VJkiSphoWyJEmSVMNCWZIkSaphoSxJkiTVsFCWJEmSalgoS5IkSTX8zXySJE0hc+ee\nPqr2PT09qykSafJzRVmSJEmqYaE8TiJivYi4c4jrl0bEz0c55pyI+Ew5PmjVIpQkSWpvFsoT16zM\n3GsV+h8/ZpFIkiS1Ifcot1BEPB34AbA2cG05Nws4DXgCuAt4B/BxYL2IuBw4GPgWsC6wDvDezLyp\nrEa/JDMfK6vItzXM8wFgq4i4KDMPrIljA+AmIDKzLyIOBbYFPgOcB0wHngTenpl/jYjPA9sB04Av\nZub5Y5oYSZKkCcgV5dZ6K3BbZs4CflXOfR44oKwePwC8MTPfDzySma8Cng2cm5l7AicAHxxuksz8\ndOn/lCK5XH8Y+A2wczl1AFUx/jHgs5m5N/A54KMRsSHwmszcBdgNWHMl7luSJGnScUW5tbYA5pfj\necCzgJnARREB1arxQwP6PEBVsB4HrAU8PkaxfAN4c0TcArwwM2+JiF2AiIiPUK0e92bm3yLiDxHx\nQ+D7pd+QZsxYh87OaWMU5tC6u7taMs9kYT6amY9+5qKZ+WhmPpqZj2btnA8L5dbqAJaX4zWApcD9\nmbnHEH2OAe7JzMMiYjuq7REAfQ1tVmaV93KqFeS9gMvKuaVUK9r3NTbMzFdFxDbAIcDbgFcMNfCi\nRUtWIpzR6+7uord3cUvmmgzMRzPz0c9cNDMfT2U++vl8NGuHfAz1QcCtF62VVHt9AfYEFgFExBbl\n9b0R8bIBfWYCd5Tj11PtHwZ4FNgoIqYBO9XMNeTfbWY+AVwDnAJ8s5y+EXhdiWWviDgkIjaOiPdl\n5i8z8zjgGSO6U0mSpEnOQrm1vgHsFBFXAUG1KvyvwNciYgHVHuCs6XNsRFxJVcg+OyKOAM4CfgRc\nBPx3zVwLI+KmYeL5LtCXmbeX9ycBr4uIa4Ae4AbgXmCXiLg+Iq4GvjqaG5YkSZqs3HrRQuVLdHs2\nnFrx65B2rGk7s7zeDGzecOnShuOvDDHX3iMI6eXAlxr63AvsW9PuzSMYS5IkaUqxUJ7CImI6cGXN\npQSeC/ydauuFJGmKOOqoY8c7BGnKsFCewjJzKbDHeMchSZI0GblHWZIkSaphoSxJkiTVsFCWJEmS\nalgoS5IkSTUslCVJkqQaFsqSJElSDQtlSZIkqYaFsiRJklTDQlmSJEmqYaEsSZIk1fBXWEuSNEXM\nnXv6qPv09PSshkikqcFCeYxExO7A7zPzwXGM4d+BtwGvz8w/1lw/HpgPBPCSzDyuxSFKkiRNGm69\nGDv/AjxznGN4JfDWuiIZIDM/kZk3tDgmSZKkSckV5SIi5lAVmk8HngucAfwZOA14Aribqhh+C2U1\nNiLWA24D3gG8DtgyIt4AzAbeBywHTs/M70bEm4BjgWXArZl5dEScBMwEXgRsAnykzLEx8OrM/FNE\nnArMAqYBZ2XmtweJ/zBgG+ArEfFW4EhgB2Bt4EuZeW5EnA9c2NBnY+DCzNyuvL8FOAg4CVgKPAN4\nE3BOiW9N4MTM/PmoEyxJkjTJuKLcbEtgf2Av4D+oCsSDM3M2sAg4pK5TZv4U+BVwRGl3IrA7sC9w\nSCmoTwP2yczdgE0iYs/SfcPMfCXwfeDwhuP9I2IW8ILM3L3E9JGIeNogMVzQEMNfgDvLXLOAU1Yi\nF3/LzDeUe74vM/ek+jDwuZUYS5IkadJxRbnZ/MxcBjwUEY8AHZl5V7l2NdVK8S+HGWNzqr3Kfwf+\nDhwQEdsAf8zMx0qbecDW5fim8nof0FeOH6Bazd0F2Cki5pXzawAbAX8aKoDM/EdEbBgR11OtDHcP\nE3OdFXHtAsyKiN3K+6dFxPTMXDpYxxkz1qGzc9pKTDl63d1dLZlnsjAfzcxHP3PRzHw0Mx/NzEez\nds6HhXKzxhX2PmCthvfTqbZS9DWcW7NmjCd56kp9H9AxYKy/l+NlDecbjzuoitzzMvPjw0beICJm\nU61Az87MJyLisUGa9g1433g/SxteTx1sy0edRYuWjDjWVdHd3UVv7+KWzDUZmI9m5qOfuWhmPp7K\nfPTz+WjWDvkY6oOAWy+a7RwR0yJiJtAFLI2I55drs4FbgEepVnUBdmvou5zqg8fvgYiI9SJi7Yj4\nKfAHYLOI6Bow1nBuBF4bEWuUsb4wwvuYCdxViuT9gWkRMb2m3aPAsyKiIyKeDWw6SAwHUN3UMyPi\ntBHGIEmSNKlZKDe7k2p/8M+BD1N9Se9bZevDmsB3gKuoCuF5wD9TFchQ/di1C6m+iHci8DOqLRbn\nZubjwAeAKyJiAbAwM68dLpjMvJ5qy8cNwDXArSO8j59RFebzqYrfy4Av1oy/qLS9GTgVWFgz1veA\nx8o2jh8BC0YYgyRJ0qTW0dc38F/f21P5qRf+bOEx0Nu7uCUPVTv8c9BomI9m5qOfuWg2lfOxsr9w\nZKrmY2VM5edjZbRDPrq7uzoGu+Ye5UmmbKU4tubSmZl5cavjkSRJmqoslIvMPH+8YxiJzLwUuHS8\n45AkTTxHHVW3jiJpZblHWZIkSaphoSxJkiTVsFCWJEmSalgoS5IkSTUslCVJkqQaFsqSJElSDQtl\nSZIkqYaFsiRJklTDQlmSJEmqYaEsSZIk1fBXWEuSNAXMnXv6SvXr6ekZ40ikqcMVZUmSJKmGhbIk\nSZJUw0J5CoiIg8rrxhFxy3jHI0mSNBVYKE8Nx493AJIkSVONX+YbJxExB5gNzAS2BD4MvAXYAjgU\n2Al4c2l+SWZ+MiLOB+4FtgWeX9rtDWwVERcBxwJrRMQXgR2AWzPznUPEcDtwCbAr8DDwGqALOB/Y\nAFgTeB8wC1g/M08p/a4Gjs7M34xBKiRJkiYkC+XxtRlVEfp24ARga2AO8CGqQnj70u6miLiwHK+V\nmftGxLuAt2XmMRHxwcw8MCI2Bl4MvBp4EPhrRGyQmQ8PMv8mwDcy87iI+AXwMmB/4BelMN8OOAN4\nK/AD4JSI2BB41lBF8owZ69DZOW2lEjJa3d1dLZlnsjAfzcxHP3PRzHw0Mx/NzEezds6HhfL4uiUz\n+yLiPuA3mflkRDxAVbBekZnLACLiOmCr0mdBeb0b2LFmzNsz8/7S735gfarV4jqPNhS8d5e22wGn\nAmTmLRHxosy8KyL6ImIjYB+qVehBLVq0ZNgbHwvd3V309i5uyVyTgfloZj76mYtm5uOpzEc/n49m\n7ZCPoT4IuEd5fC0b5HhDoKPh/XRgeU27xjZ14wzWZqi2fQP6rFgavgTYDzgAuBBJkqQpzkJ5YroY\n2DkiOiOik2rleOEQ7cfy7/FmYE+AiNgJuK2cv4hqS8eLMvOXYzifJEnShGShPHGdA8yn2mpxbmb+\nZYi2CyPipjGa90xg24j4OfAJ4GiAzEyqPc1XjtE8kiRJE1pHX1/feMegKaa3d3FLHqp22Dc1Guaj\nmfnoZy6amY9m5qOZ+WjWDvno7u4adJuqX+ab4iJif6ofGzfQmZl5cavjkSRJmiwslKe4zLwUuHS8\n45AkSZps3KMsSZIk1bBQliRJkmpYKEuSJEk1LJQlSZKkGhbKkiRJUg0LZUmSJKmGhbIkSZJUw0JZ\nkiRJquEvHJEkaQqYO/f0lerX09MzxpFIU4crypIkSVINC2UREcdHxM7jHYckSdJE4tYLkZmfGO8Y\nJEmSJhoL5QkmItYEvg68APgH8C/A2cC6wDrAezPzpoi4A/gKcBBwO3Ar8Ebgj5l5aEScDzwG/DMw\nEzgiMxdGxOnADsDawJcy89zS9kJgQXl9GvBj4B2Z+cKIuB34MvBaYC1gn8xcvNqTIUmSNI7cejHx\nHA7cn5m7UhXCrwPOzcw9gROAD5Z204BfAtsDuwJ3ZuYOwKyI2KC06czMfYCPAidGxNql3W7ALOCU\nAXO/Dfhtuf4w0LFiHOD3mbk78Gdg77G+aUmSpInGFeWJZxvgKoDM/E5ErA+cFRHHUa3mPt7Q9qbM\n7IuIB4CF5dyDwPrl+Gfl9Qbgk5n5j4jYMCKuB5YC3QPm3hyYV44vBf694dqC8np3w/i1ZsxYh87O\nacPe6Fjo7u5qyTyThfloZj76mYtm5qOZ+WhmPpq1cz4slCeeJ2le6T8GuCczD4uI7YDPNFxbNsjx\nipXgNRre90XEbGAvYHZmPhERjw2YuwNYXo77BlyrG7/WokVLhro8Zrq7u+jtdQfICuajmfnoZy6a\nmY+nMh/9fD6atUM+hvog4NaLiedmqmKWiNgP+AhwR7n2emD6KMaaVV53Bn5LtVf5rlIk7w9Mi4jG\n8e4AtivHr1q58CVJkqYGC+WJ5zvAuhExn2o1eR/g2Ii4ErgReHZEHDHCsdaOiMuAj1HtR/4ZsFkZ\ne1PgMuCLDe3Pp9rjPA94FtXqtiRJUlty68UEk5lLqb5U12jzhuNLy+vXGvpsN/A4IgB+mJmXDRhr\nh4bjMxovRMQLgFMy8yfl5yrPLmNu3DD+caO4HUmSpEnLQlmNHqFavT6Rah/y+8Y5HkmSpHFjoTxF\nZeaclejzMLDv2EcjSVrdjjrq2PEOQZpy3KMsSZIk1bBQliRJkmpYKEuSJEk1LJQlSZKkGhbKkiRJ\nUg0LZUmSJKmGhbIkSZJUw0JZkiRJqmGhLEmSJNWwUJYkSZJq+CusJUmapObOPX2Vx+jp6RmDSKSp\nyRXllRARb1iJPvtHxPQhrj89Il4xzBgPrcS8J0XEe0bbT5Ikqd1ZKI9SRGwMvGUluh4LDFooA9sA\nQxbKkiRJap223HoREWsCXwdeAPwD+BfgJGATYC3gxMy8MiJuB74MvLac3wc4G9ghIk4EvgpcUIZd\nEzg8M++IiMOA9wHLgdOpCuSdgMsjYu/MXFoT1tnA0yPiD8BlwHml35PA2zPzrw3xbwGcBfQBi4E5\nwAbA94E/AC8Gbs7Mo0qXl0TEZcBmwNGZeUVEvImqeF8G3JqZR0fEScD6QACbAsdk5uURcSDw/tL2\nlsx8/2jyLUmSNBm164ry4cD9mbkr8BWqQvMfmTkbOJCqCIXqg8TvM3N34M/A3sCngfmZeQqwEXBK\nZu5JVTQfFRFdwInA7sC+wCGZeQFwP/CqQYpkyrjfzcxzgI8Bn83MvYHPAR8d0PYLwJHl+pXAv5Xz\nWwHHAzsA20fEVuX8zMzcj6p4f1dErAecBuyTmbsBm0TEnqXt8zLz1cDRwJGl7UeAvUp+nhcRuw6b\nYUmSpEmuLVeUqbY5XAWQmd+JiM8D88r7eyPifyJiw9J2QXm9m2q19eGGce4HPh8RJwMzgFuBzamK\n678DfwcOWIn4dgEiIj4CTAN6B1zfAfhKREC10n1zOf+HzLyLqvONVCvDANeW13vKPbwY+GNmPlbO\nzwO2HtB2xf1uCTwf+EmZb32qlfjrBgt+xox16OycNvK7XQXd3V0tmWeyMB/NzEc/c9HMfDQzH83M\nR7N2zke7FspP0rya3gd0NLyfTrVtAqrtBis0tgE4BfhJZn4pIg4C9qsZe2UsBd6YmfcNcn0JsGdm\n9q04UfZON87bQXVf8NR7qLvfvw/SdinV1ox9Rxr8okVLRtp0lXR3d9Hbu7glc00G5qOZ+ehnLpqZ\nj6cyH/18Ppq1Qz6G+iDQrlsvbgb2AoiI/YD/C+xZ3j8PWJ6ZDw/Sdzn9HzBmAndERAfVyvF04PfV\nMLFeRKwdET8t1xv7DTfujcDrSjx7RcQhA9r+Gnhluf7miNi7nN80IjaKiDWAHYHfDjLXH4DNyjYR\ngNnALYO0TWDziHhmme/kiHjOEPchSZI0JbRrofwdYN2ImA8cQ/XFvmkRcXW5duQQfX8HbBMRZ1B9\n0e8LwOWl32xgV6o9yj+j2tJwbln5nQdcGxEzBxn3l8DBEXEc1RcLXxcR1wA9wA0D2h4NfKjEPwdY\nWM4n1d7jG4DrM/O/6ybKzMeBDwBXRMQCYGFmXjtI2yVUOfpxRFwHPAO4d5B7kCRJmjI6+vr6hm+l\nCa9svbgwM7cb71h6exe35KFqh38OGg3z0cx89DMXzaZSPsbqF45MlXyMhan0fIyFdshHd3fXwK21\n/6td9yiPm4i4CNhwwOlHMnNlvvQnSZKk1cRCucUy88DVNO6dwLivJkuSWueoo44d7xCkKa1d9yhL\nkiRJQ7JQliRJkmpYKEuSJEk1LJQlSZKkGhbKkiRJUg0LZUmSJKmGhbIkSZJUw0JZkiRJqmGhLEmS\nJNWwUJYkSZJq+CusJUmapObOPX2Vx+jp6RmDSKSpyRVlSZIkqYaF8hQSEQeV140j4pZR9Pvh6otK\nkiRpcrJQnlqOX5lOmXnAWAciSZI02blHeZxFxBxgNjAT2BL4MPAWYAvgUGAn4M2l+SWZ+cmIOB+4\nF9gWeH5ptzewVURcBBwLrBERXwR2AG7NzHcOEcNDmTkzIuYB78nM2yLiPSWmecB7gOXA5sCFmXny\nmCVAkiRpgnJFeWLYDNgf+DhwAvD6cvwhYA4wq/w5OCI2LX3Wysx9gTOBt2Xmp4FHMvPAcv3FwMnA\n9sCrI2KDVYhvhxLHzsB7V2EcSZKkScMV5Ynhlszsi4j7gN9k5pMR8QDwMuCKzFwGEBHXAVuVPgvK\n693AjjVj3p6Z95d+9wPrAw+vZHy/zMwlZaxhG8+YsQ6dndNWcqrR6e7uask8k4X5aGY++pmLZuaj\nmfloZj6atXM+LJQnhmWDHG8IdDS8n061BWJgu8Y2deMM1magvobjNYcYa0iLFi0ZTfOV1t3dRW/v\n4pbMNRmYj2bmo5+5aGY+nsp89PP5aNYO+Rjqg4BbLya2i4GdI6IzIjqpVo4XDtF+Vf8+HwU2Kse7\nruJYkiRJk5qF8sR3DjCfaqvFuZn5lyHaLoyIm1ZxrrMj4j+pviwoSZLUtjr6+ktz7BgAAA4MSURB\nVPqGb6UpKyKmA3/NzGeP1Zi9vYtb8lC1wz8HjYb5aGY++pmLZlMpH2P1m/mmSj7GwlR6PsZCO+Sj\nu7tr0O2p7lFuExGxP9WPjRtoNnBui8ORJI2Bo46q+8+6pLFiodwmMvNS4NLxjkOSJGmycI+yJEmS\nVMNCWZIkSaphoSxJkiTVsFCWJEmSalgoS5IkSTUslCVJkqQaFsqSJElSDQtlSZIkqYaFsiRJklTD\n38wnSdIEN3fu6att7J6entU2tjTZuaIsSZIk1bBQbkMR8ZmImDPecUiSJE1kFsqSJElSDfcoT0Fl\ntfiVwNOB5wJnAE8AHwTuBv4O3BYRTwe+BawLrAO8F3gGcEhmHlbG+grwI2Bz4EBgOfCjzDythbck\nSZLUchbKU9eWwNbABsCvgSeB7YBFwK2lzbOBczPzkojYi6qQfhNwZkSsDSwFdgX+DTgP2KiM864W\n3ockSdK4sFCeuuZn5jLgoYhYBEzLzAcBIuK60uYB4KMRcRywFvB4Zj4ZEZcBrwbuAxZk5tKIuBD4\nGdUK9DeHmnjGjHXo7Jy2eu5qgO7urpbMM1mYj2bmo5+5aGY+mpmPZuajWTvnw0J56mrcf94xyLVj\ngHsy87CI2A74TDn/DarV5TupCmMy890R8c9UK87zImKHUog/xaJFS8bmDobR3d1Fb+/ilsw1GZiP\nZuajn7loZj6eynz08/lo1g75GOqDgIXy1LVzREwDZgBdABGxAfA41XaKG4CZwG9K+9cD0wEy81cR\n8RzgmcCHImJ94OjMPAU4JSJ2p9r//LcW3o8kSVJLWShPXXcC3wdeBHwYWBOYX87fVtp8A/hGRLwR\nOAt4S0QckZlfA64EujKzD3gkIroj4ibgMeD6zLRIliRJU5qF8tR1R2YeN+DcV2vabd5wfClARHQA\ne9Dwpb3MfO9YByhJkjSR+XOU1SQiNgZuAX6ambePcziSJEnjxhXlKSgzz1+FvncC245ZMJKkVXbU\nUceOdwhSW3JFWZIkSaphoSxJkiTVsFCWJEmSalgoS5IkSTUslCVJkqQaFsqSJElSDQtlSZIkqYaF\nsiRJklTDQlmSJEmqYaEsSZIk1fBXWEuSNAHMnXv6uMzb09MzLvNKk4ErypNURBxUXjeOiFvGOx5J\nkqSpxkJ58jp+vAOQJEmaytx60UIRMQeYDcwEtgQ+DLwF2AI4FNgJeHNpfklmfjIizgfuBbYFnl/a\n7Q1sFREXAccCa0TEF4EdgFsz851DxHAHcCmwD3A51YellwOXZ+bxEbEP8DFgKbAIeBNwAXBOZl4V\nEWsBvwUiM5eNRV4kSZImIleUW28zYH/g48AJwOvL8YeAOcCs8ufgiNi09FkrM/cFzgTelpmfBh7J\nzAPL9RcDJwPbA6+OiA2GmP+FwJeBHYH3Ad+nKtD/pVyfARySmbOBR4F9qQrlg8v1vamKaotkSZI0\npbmi3Hq3ZGZfRNwH/CYzn4yIB4CXAVesKEAj4jpgq9JnQXm9m6rAHej2zLy/9LsfWB94eJD5H83M\n35e2j1GtQC+LiBUfmnqBcyOiE9gE+Dnwf4BPRcSawAHA+UPd4IwZ69DZOW3IJIyV7u6ulswzWZiP\nZuajn7loZj6amY9m5qNZO+fDQrn1lg1yvCHQ0fB+OrC8pl1jm7pxBmtT27ZmZfirwGsy83cRcdaK\nNhFxJdVq8paZecMQ47No0ZKhLo+Z7u4uensXt2SuycB8NDMf/cxFM/PxVOajn89Hs3bIx1AfBNx6\nMXFcDOwcEZ1lNXdHYOEQ7VfX3936wF/L9o09qQp2qLZfnALMW03zSpIkTSgWyhPLOcB8qq0W52bm\nX4ZouzAibloNMZwNXFdi+RRwQkRslJm3Uq16f2s1zClJkjThdPT19Y13DJoEIuLFwNzM3Ge4tr29\ni1vyULXDPweNhvloZj76mYtmEzUf4/kLRyZiPsbLRH0+xks75KO7u2vQLavuUZ6CImJ/qh8bN9CZ\nmXnxSoz3LuCdwOGrGpskSdJkYaE8BWXmpVQ/K3msxvsS8KWxGk+S9FRHHVW3viFpPLlHWZIkSaph\noSxJkiTVsFCWJEmSalgoS5IkSTUslCVJkqQaFsqSJElSDQtlSZIkqYaFsiRJklTDQlmSJEmqYaEs\nSZIk1fBXWGvSOvnkk8c7BEma9Hp6esY7BGnCckVZkiRJqmGhrFoRsX9ETB/vOCRJksaLhbIGcyxg\noSxJktqWe5RXo4iYBpwDbAKsCZxY/lwNvBxYDnwdmAM8CewNfBR4LvB8YCPgA5l5RcOYFwNnZOY1\nEfE04HdAAF8t/dYFTsrMyyJiHnAbQGa+p2GM/z0PfAK4oByvCRwO7ALsBFweEXsD7wAOKfFekpmf\nHYv8SJIkTWSuKK9ehwD3ZeaewOuAz5Xz92XmbsA0YMPMnFWOX1quPyczX1H6f3zAmBcBry3HLweu\nBNYHrszM2cCbgMZvud3WWCTXnN8IOKXE+FXgqMy8ALgfeBXwHOAgYDdgd+ANEfH80adCkiRpcnFF\nefXaBZgVEbuV90+j2s5wU3l/H7CwHD9AVfACXAWQmf8VEc8ZMOaPgH8HPgAcAHwXWARsHxHvpFr1\nfUZD+5uot+L8/cDnI+JkYAZw64B2OwCbUa2CA3QBGwN/HWRcZsxYh87OaYNdliRNMN3dXeMdwoRi\nPpq1cz4slFevpcCpmfntFSfKtodlDW0ajzvK66Ar/Zn5cETcExFBVYgfCRwKbAjMKq+3DIhhsNgA\nTgF+kplfioiDgP1q2v1nZh45WEwDLVq0ZKRNJUkTQG/v4vEOYcLo7u4yHw3aIR9DfRBw68XqdSPV\nqi8R8cyIOG2E/XYrfV4G/KXm+sXAh4EbMnMZMBP4c2YuBw5kdF/CmwncEREdJdYVfZdTfZC6Fdgz\nItaJiI6IOLPsjZYkSZrSLJRXr+8Bj0XE9VRbJhaMsN+jEXEp8E3geICI+FxEvLBcvwR4M3Bhef8D\n4LURcRXwOHB3RJzYOGBE/H9le8VAXwa+AFwOfAeYHRGvAOYB1wJLqPZWXwP8Arg/M/8+wvuQJEma\ntDr6+vrGOwY1iIiTgIcy86zxjmVl9fYubslDNXfu6a2YRpKmtJ6enin/T+uj0Q5bDUajHfLR3d3V\nMdg19yhr0vI/7s3a4T9mo2E++pmLZuZD0khZKE8wmXnSeMcgSZIk9yhLkiRJtSyUJUmSpBoWypIk\nSVINC2VJkiSphj8eTpIkSarhirIkSZJUw0JZkiRJqmGhLEmSJNWwUJYkSZJqWChLkiRJNSyUJUmS\npBqd4x2ANBIR0QmcB2xK9dwel5nXDmjzBHBdw6m9M/PJ1kXZOiPMx6HAMcBy4JzMPK/lgbZQRMwG\nvg/8S2ZeVnO9bZ4PGFE+2ub5iIg1gfOBFwBPAkdk5p8GtGmL5yMizgB2AvqAozPz5oZr+wCnUeXo\nx5n5sfGJsnWGycedwF1U+QA4NDPvaXWMrRQRLwF+CJyRmWcNuNZ2zwdYKGvyOAx4PDN3i4gtga8B\nOwxo80hm7tHyyMbHkPmIiHWBE8u5pcDNEXFxZv5tXKJdzSJiU+BYmgudgdrm+RguH+32fACHAA9n\n5qER8Qrg48DBA9pM+eejfHjaLDN3jojNga8COzc0+TywL3APMD8ifpCZvx2HUFtiBPkAeFVmPtb6\n6Fqv/HfhC8BVgzRpq+djBbdeaLL4P1T/4wfoBZ4xjrFMBMPlY0fg5sx8JDP/TlUw7drC+FrtPuBA\n4JHxDmSCGC4f7fZ87A1cXI5/xtS+16HsDVwCkJm/A2ZExNMBImIT4G+ZeVdmLgd+XNpPZYPmo039\nD/Bq4N6BF9r0+QBcUdYkkZlPAE+Ut8cA36pptnZEfIvqn1d/kJmntyq+VhtBPp5NVUCv8CCwUQtC\nGxeZuQQgIoZq1k7Px3D5aKvng4b7zczlEdEXEdMzc2lDm3Z4Pp4N3Nrwvrece5T6Z2LT1oU2LobK\nxwpfioiNgWuBEzJzyv4648xcBiwb5L8b7fh8ABbKmoAi4u3A2wec7snMn0TEvwHbAK+t6Xoc1Upr\nH3BNRFyTmbes3mhXv1XIR6OO1RLcOBgqH8N0bbvnYxTDTPXnY8cB7+vud0o+H8MY6u99yjwTozDw\nnk8ErgD+RrXy/AbgwlYHNUG1zfNhoawJJzPPBc4deD4i/pWqIHxdWVEd2O9LDW2vAl4KTPr/0a1k\nPu6lWgFY4TnAL1ZbkC00WD5G0K+tno9htNXzERHnU93vr8sX+zoGrCZP2edjgIF/7/9EtU2n7tpz\nqPkn+ClmqHyQmd9YcRwRP6Z6Jtq1UG7H5wOwUNYkUfZHvQuYnZn/qLkeQA9wKDCNag/ilP0P2nD5\nAG4Ezo2IDYBlVPk4poUhTijt9nyMQLs9H1cCbwR+QvXh8urGi230fFwJnAx8OSK2Ae7NzMUAmXln\nRDy9bDO4G9iPKh9T2aD5iIj1ge8Bry0fqmYzNZ+JEWnT5wOAjr6+KbvdRlNIRJwGvBn4a8PpV1B9\noW1+Zt4QEZ8E9qL6cVeXZuaprY+0NUaYj4OAD1D9U/IXMvObrY+0NSLiNVT3+s9U++juy8xXRMTx\ntOfzMZJ8tNPzMY1qlXkzqi8szcnMu9rx+YiITwC7U93nvwFbU/3Ej4sjYnfgk6XpDzLzM+MUZsv8\nv3bumAiBIAiA4Ej57AQgCAXUK8EMRpBA9BpICT7dKnLolrB1wQS792Uee3Wt3tWzuv3yjvJa61Ld\nq63zBuaoHtXrX99HCWUAABj5Hg4AAAZCGQAABkIZAAAGQhkAAAZCGQAABkIZAAAGQhkAAAZCGQAA\nBh+GUZF/zUPGlQAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 720x2160 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "G_e835Wj3CXa",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "# we could remove coefficients close to zero\n",
        "# figure out and apply class weights using dicts or balancing"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}